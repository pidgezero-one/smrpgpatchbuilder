from django.core.management.base import BaseCommand

from smrpgpatchbuilder.utils.disassembler_common import (
    writeline,
)
from smrpgpatchbuilder.datatypes.scripts_common.classes import (
    ShortVar,
    ByteVar,
)
from smrpgpatchbuilder.datatypes.overworld_scripts.arguments.types.flag import Flag
from .legacy.eventdisassembler import Command as EventDisassemblerCommand
from .legacy.objectsequencedisassembler import Command as AnimationDisassemblerCommand

from smrpgpatchbuilder.datatypes.overworld_scripts.event_scripts.ids.script_ids import *
from smrpgpatchbuilder.datatypes.overworld_scripts.action_scripts.ids.script_ids import *
from smrpgpatchbuilder.datatypes.overworld_scripts.arguments.packets import *
from smrpgpatchbuilder.datatypes.overworld_scripts.arguments.battlefields import *
from smrpgpatchbuilder.datatypes.overworld_scripts.ids.music_names import *
from smrpgpatchbuilder.datatypes.overworld_scripts.ids.sound_names import *
from smrpgpatchbuilder.datatypes.overworld_scripts.arguments.scenes import *
from smrpgpatchbuilder.datatypes.overworld_scripts.ids.overworld_names import *
from smrpgpatchbuilder.datatypes.overworld_scripts.ids.room_names import *
from smrpgpatchbuilder.datatypes.overworld_scripts.arguments.coords import *
from smrpgpatchbuilder.datatypes.overworld_scripts.arguments.tutorials import *
from smrpgpatchbuilder.datatypes.overworld_scripts.ids.shops_ids import *
from smrpgpatchbuilder.datatypes.overworld_scripts.arguments.variables import *
from smrpgpatchbuilder.datatypes.battles.ids.pack_ids import *

import sys, re, os, shutil

DIALOGS = [
    "DI0000_INN_BANNER",
    "DI0001_ITEM_SHOP_BANNER",
    "DI0002_INN_AND_ITEM_SHOP_BANNER",
    "DI0003_MONSTRO_TOWN_BANNER",
    "DI0004_TOADSTOOLS_ROOM_BANNER",
    "DI0005_BELOME_TEMPLE_BANNER",
    "DI0006_GARROS_HOUSE_BANNER",
    "DI0007_YOSTER_ISLE_BANNER",
    "DI0008_MARRYMORE_HOTEL_BANNER",
    "DI0009_BEETLES_ARE_US_BANNER",
    "DI0010_WEAPON_AND_ARMOR_SHOP_BANNER",
    "DI0011_BEDROOM_BANNER",
    "DI0012_HEALTH_FOOD_STORE_BANNER",
    "DI0013_MUSHROOM_BOY_SHOP_BANNER",
    "DI0014_ACCESSORY_SHOP_BANNER",
    "DI0015_MELODY_BAY_BANNER",
    "DI0016_CASINO_BANNER",
    "DI0017_HINO_MART_BANNER",
    "DI0018_NIMBUS_NPC",
    "DI0019_DUPLICATE",
    "DI0020_DUPLICATE",
    "DI0021_DUPLICATE",
    "DI0022_DUPLICATE",
    "DI0023_DUPLICATE",
    "DI0024_DUPLICATE",
    "DI0025_DUPLICATE",
    "DI0026_DUPLICATE",
    "DI0027_DUPLICATE",
    "DI0028_DUPLICATE",
    "DI0029_DUPLICATE",
    "DI0030_DUPLICATE",
    "DI0031_DUPLICATE",
    "DI0032_DUPLICATE",
    "DI0033_DUPLICATE",
    "DI0034_DUPLICATE",
    "DI0035_DUPLICATE",
    "DI0036_NIMBUS_NPC_FERTILIZER_LOCATION_HINT",
    "DI0037_NIMBUS_NPC_LINK_SAMUS_HINT",
    "DI0038_KNIFE_GUY_PRIZE_GRANT",
    "DI0039_FROGFUCIUS_ASKS_FOR_CRICKET_FOOD",
    "DI0040_EMPTY",
    "DI0041_DUPLICATE",
    "DI0042_DUPLICATE",
    "DI0043_DUPLICATE",
    "DI0044_DUPLICATE",
    "DI0045_DUPLICATE",
    "DI0046_DUPLICATE",
    "DI0047_DUPLICATE",
    "DI0048_EMPTY",
    "DI0049_NIMBUS_EGG_BOSS_TALK_AFTER_WINNING",
    "DI0050_EMPTY",
    "DI0051_EMPTY",
    "DI0052_EMPTY",
    "DI0053_EMPTY",
    "DI0054_EMPTY",
    "DI0055_EMPTY",
    "DI0056_EMPTY",
    "DI0057_EMPTY",
    "DI0058_EMPTY",
    "DI0059_EMPTY",
    "DI0060_EMPTY",
    "DI0061_NIMBUS_NPC_AFTER_GIVING_YOU_FINAL_CELLAR_PRIZE",
    "DI0062_EMPTY",
    "DI0063_DUPLICATE",
    "DI0064_GOT_AN_70A7_AUTO_TERMINATE",
    "DI0065_GOT_AN_70A7_AWAIT_TERMINATE",
    "DI0066_GOT_A_70A7_AUTO_TERMINATE",
    "DI0067_DUPLICATE",
    "DI0068_DUPLICATE",
    "DI0069_DUPLICATE",
    "DI0070_DUPLICATE",
    "DI0071_DUPLICATE",
    "DI0072_DUPLICATE",
    "DI0073_DUPLICATE",
    "DI0074_DUPLICATE",
    "DI0075_DUPLICATE",
    "DI0076_DUPLICATE",
    "DI0077_DUPLICATE",
    "DI0078_DUPLICATE",
    "DI0079_DUPLICATE",
    "DI0080_DUPLICATE",
    "DI0081_DUPLICATE",
    "DI0082_DUPLICATE",
    "DI0083_DUPLICATE",
    "DI0084_DUPLICATE",
    "DI0085_DUPLICATE",
    "DI0086_DUPLICATE",
    "DI0087_DUPLICATE",
    "DI0088_DUPLICATE",
    "DI0089_DUPLICATE",
    "DI0090_DUPLICATE",
    "DI0091_DUPLICATE",
    "DI0092_DUPLICATE",
    "DI0093_DUPLICATE",
    "DI0094_DUPLICATE",
    "DI0095_DUPLICATE",
    "DI0096_DUPLICATE",
    "DI0097_DUPLICATE",
    "DI0098_DUPLICATE",
    "DI0099_DUPLICATE",
    "DI0100_DUPLICATE",
    "DI0101_DUPLICATE",
    "DI0102_DUPLICATE",
    "DI0103_DUPLICATE",
    "DI0104_DUPLICATE",
    "DI0105_DUPLICATE",
    "DI0106_DUPLICATE",
    "DI0107_DUPLICATE",
    "DI0108_DUPLICATE",
    "DI0109_DUPLICATE",
    "DI0110_DUPLICATE",
    "DI0111_DUPLICATE",
    "DI0112_DUPLICATE",
    "DI0113_DUPLICATE",
    "DI0114_DUPLICATE",
    "DI0115_DUPLICATE",
    "DI0116_DUPLICATE",
    "DI0117_DUPLICATE",
    "DI0118_DUPLICATE",
    "DI0119_DUPLICATE",
    "DI0120_DUPLICATE",
    "DI0121_DUPLICATE",
    "DI0122_DUPLICATE",
    "DI0123_DUPLICATE",
    "DI0124_DUPLICATE",
    "DI0125_DUPLICATE",
    "DI0126_DUPLICATE",
    "DI0127_DUPLICATE",
    "DI0128_DUPLICATE",
    "DI0129_DUPLICATE",
    "DI0130_DUPLICATE",
    "DI0131_DUPLICATE",
    "DI0132_DUPLICATE",
    "DI0133_DUPLICATE",
    "DI0134_DUPLICATE",
    "DI0135_DUPLICATE",
    "DI0136_DUPLICATE",
    "DI0137_DUPLICATE",
    "DI0138_DUPLICATE",
    "DI0139_DUPLICATE",
    "DI0140_DUPLICATE",
    "DI0141_DUPLICATE",
    "DI0142_DUPLICATE",
    "DI0143_DUPLICATE",
    "DI0144_DUPLICATE",
    "DI0145_DUPLICATE",
    "DI0146_DUPLICATE",
    "DI0147_DUPLICATE",
    "DI0148_DUPLICATE",
    "DI0149_DUPLICATE",
    "DI0150_DUPLICATE",
    "DI0151_DUPLICATE",
    "DI0152_DUPLICATE",
    "DI0153_DUPLICATE",
    "DI0154_DUPLICATE",
    "DI0155_DUPLICATE",
    "DI0156_DUPLICATE",
    "DI0157_DUPLICATE",
    "DI0158_DUPLICATE",
    "DI0159_DUPLICATE",
    "DI0160_DUPLICATE",
    "DI0161_DUPLICATE",
    "DI0162_DUPLICATE",
    "DI0163_DUPLICATE",
    "DI0164_DUPLICATE",
    "DI0165_DUPLICATE",
    "DI0166_DUPLICATE",
    "DI0167_DUPLICATE",
    "DI0168_DUPLICATE",
    "DI0169_DUPLICATE",
    "DI0170_DUPLICATE",
    "DI0171_DUPLICATE",
    "DI0172_DUPLICATE",
    "DI0173_DUPLICATE",
    "DI0174_DUPLICATE",
    "DI0175_DUPLICATE",
    "DI0176_DUPLICATE",
    "DI0177_DUPLICATE",
    "DI0178_DUPLICATE",
    "DI0179_DUPLICATE",
    "DI0180_DUPLICATE",
    "DI0181_DUPLICATE",
    "DI0182_DUPLICATE",
    "DI0183_DUPLICATE",
    "DI0184_DUPLICATE",
    "DI0185_DUPLICATE",
    "DI0186_DUPLICATE",
    "DI0187_DUPLICATE",
    "DI0188_DUPLICATE",
    "DI0189_DUPLICATE",
    "DI0190_DUPLICATE",
    "DI0191_DUPLICATE",
    "DI0192_DUPLICATE",
    "DI0193_DUPLICATE",
    "DI0194_DUPLICATE",
    "DI0195_DUPLICATE",
    "DI0196_DUPLICATE",
    "DI0197_DUPLICATE",
    "DI0198_DUPLICATE",
    "DI0199_DUPLICATE",
    "DI0200_DUPLICATE",
    "DI0201_DUPLICATE",
    "DI0202_DUPLICATE",
    "DI0203_DUPLICATE",
    "DI0204_DUPLICATE",
    "DI0205_DUPLICATE",
    "DI0206_DUPLICATE",
    "DI0207_DUPLICATE",
    "DI0208_DUPLICATE",
    "DI0209_DUPLICATE",
    "DI0210_DUPLICATE",
    "DI0211_DUPLICATE",
    "DI0212_DUPLICATE",
    "DI0213_DUPLICATE",
    "DI0214_DUPLICATE",
    "DI0215_DUPLICATE",
    "DI0216_DUPLICATE",
    "DI0217_DUPLICATE",
    "DI0218_DUPLICATE",
    "DI0219_DUPLICATE",
    "DI0220_DUPLICATE",
    "DI0221_DUPLICATE",
    "DI0222_DUPLICATE",
    "DI0223_DUPLICATE",
    "DI0224_DUPLICATE",
    "DI0225_DUPLICATE",
    "DI0226_DUPLICATE",
    "DI0227_DUPLICATE",
    "DI0228_DUPLICATE",
    "DI0229_DUPLICATE",
    "DI0230_DUPLICATE",
    "DI0231_DUPLICATE",
    "DI0232_DUPLICATE",
    "DI0233_DUPLICATE",
    "DI0234_DUPLICATE",
    "DI0235_DUPLICATE",
    "DI0236_DUPLICATE",
    "DI0237_DUPLICATE",
    "DI0238_DUPLICATE",
    "DI0239_DUPLICATE",
    "DI0240_DUPLICATE",
    "DI0241_DUPLICATE",
    "DI0242_DUPLICATE",
    "DI0243_DUPLICATE",
    "DI0244_DUPLICATE",
    "DI0245_DUPLICATE",
    "DI0246_DUPLICATE",
    "DI0247_DUPLICATE",
    "DI0248_DUPLICATE",
    "DI0249_DUPLICATE",
    "DI0250_DUPLICATE",
    "DI0251_DUPLICATE",
    "DI0252_DUPLICATE",
    "DI0253_DUPLICATE",
    "DI0254_DUPLICATE",
    "DI0255_DUPLICATE",
    "DI0256_DUPLICATE",
    "DI0257_DUPLICATE",
    "DI0258_DUPLICATE",
    "DI0259_DUPLICATE",
    "DI0260_DUPLICATE",
    "DI0261_DUPLICATE",
    "DI0262_DUPLICATE",
    "DI0263_DUPLICATE",
    "DI0264_DUPLICATE",
    "DI0265_DUPLICATE",
    "DI0266_DUPLICATE",
    "DI0267_DUPLICATE",
    "DI0268_DUPLICATE",
    "DI0269_DUPLICATE",
    "DI0270_DUPLICATE",
    "DI0271_DUPLICATE",
    "DI0272_DUPLICATE",
    "DI0273_DUPLICATE",
    "DI0274_DUPLICATE",
    "DI0275_DUPLICATE",
    "DI0276_DUPLICATE",
    "DI0277_DUPLICATE",
    "DI0278_DUPLICATE",
    "DI0279_DUPLICATE",
    "DI0280_DUPLICATE",
    "DI0281_DUPLICATE",
    "DI0282_DUPLICATE",
    "DI0283_DUPLICATE",
    "DI0284_DUPLICATE",
    "DI0285_DUPLICATE",
    "DI0286_DUPLICATE",
    "DI0287_DUPLICATE",
    "DI0288_DUPLICATE",
    "DI0289_DUPLICATE",
    "DI0290_DUPLICATE",
    "DI0291_DUPLICATE",
    "DI0292_DUPLICATE",
    "DI0293_DUPLICATE",
    "DI0294_DUPLICATE",
    "DI0295_DUPLICATE",
    "DI0296_DUPLICATE",
    "DI0297_DUPLICATE",
    "DI0298_DUPLICATE",
    "DI0299_DUPLICATE",
    "DI0300_DUPLICATE",
    "DI0301_DUPLICATE",
    "DI0302_DUPLICATE",
    "DI0303_DUPLICATE",
    "DI0304_DUPLICATE",
    "DI0305_DUPLICATE",
    "DI0306_DUPLICATE",
    "DI0307_DUPLICATE",
    "DI0308_DUPLICATE",
    "DI0309_DUPLICATE",
    "DI0310_DUPLICATE",
    "DI0311_DUPLICATE",
    "DI0312_DUPLICATE",
    "DI0313_DUPLICATE",
    "DI0314_DUPLICATE",
    "DI0315_DUPLICATE",
    "DI0316_DUPLICATE",
    "DI0317_DUPLICATE",
    "DI0318_DUPLICATE",
    "DI0319_DUPLICATE",
    "DI0320_DUPLICATE",
    "DI0321_DUPLICATE",
    "DI0322_DUPLICATE",
    "DI0323_DUPLICATE",
    "DI0324_DUPLICATE",
    "DI0325_DUPLICATE",
    "DI0326_DUPLICATE",
    "DI0327_DUPLICATE",
    "DI0328_DUPLICATE",
    "DI0329_DUPLICATE",
    "DI0330_DUPLICATE",
    "DI0331_DUPLICATE",
    "DI0332_DUPLICATE",
    "DI0333_DUPLICATE",
    "DI0334_DUPLICATE",
    "DI0335_DUPLICATE",
    "DI0336_DUPLICATE",
    "DI0337_DUPLICATE",
    "DI0338_DUPLICATE",
    "DI0339_DUPLICATE",
    "DI0340_DUPLICATE",
    "DI0341_DUPLICATE",
    "DI0342_DUPLICATE",
    "DI0343_DUPLICATE",
    "DI0344_DUPLICATE",
    "DI0345_DUPLICATE",
    "DI0346_DUPLICATE",
    "DI0347_DUPLICATE",
    "DI0348_DUPLICATE",
    "DI0349_DUPLICATE",
    "DI0350_DUPLICATE",
    "DI0351_DUPLICATE",
    "DI0352_DUPLICATE",
    "DI0353_DUPLICATE",
    "DI0354_DUPLICATE",
    "DI0355_DUPLICATE",
    "DI0356_DUPLICATE",
    "DI0357_DUPLICATE",
    "DI0358_DUPLICATE",
    "DI0359_DUPLICATE",
    "DI0360_DUPLICATE",
    "DI0361_DUPLICATE",
    "DI0362_DUPLICATE",
    "DI0363_DUPLICATE",
    "DI0364_DUPLICATE",
    "DI0365_DUPLICATE",
    "DI0366_DUPLICATE",
    "DI0367_DUPLICATE",
    "DI0368_DUPLICATE",
    "DI0369_DUPLICATE",
    "DI0370_DUPLICATE",
    "DI0371_DUPLICATE",
    "DI0372_DUPLICATE",
    "DI0373_DUPLICATE",
    "DI0374_DUPLICATE",
    "DI0375_DUPLICATE",
    "DI0376_DUPLICATE",
    "DI0377_DUPLICATE",
    "DI0378_DUPLICATE",
    "DI0379_DUPLICATE",
    "DI0380_DUPLICATE",
    "DI0381_DUPLICATE",
    "DI0382_DUPLICATE",
    "DI0383_DUPLICATE",
    "DI0384_DUPLICATE",
    "DI0385_DUPLICATE",
    "DI0386_DUPLICATE",
    "DI0387_DUPLICATE",
    "DI0388_DUPLICATE",
    "DI0389_DUPLICATE",
    "DI0390_DUPLICATE",
    "DI0391_DUPLICATE",
    "DI0392_DUPLICATE",
    "DI0393_DUPLICATE",
    "DI0394_DUPLICATE",
    "DI0395_DUPLICATE",
    "DI0396_DUPLICATE",
    "DI0397_DUPLICATE",
    "DI0398_DUPLICATE",
    "DI0399_DUPLICATE",
    "DI0400_DUPLICATE",
    "DI0401_DUPLICATE",
    "DI0402_DUPLICATE",
    "DI0403_DUPLICATE",
    "DI0404_DUPLICATE",
    "DI0405_DUPLICATE",
    "DI0406_DUPLICATE",
    "DI0407_DUPLICATE",
    "DI0408_DUPLICATE",
    "DI0409_DUPLICATE",
    "DI0410_DUPLICATE",
    "DI0411_DUPLICATE",
    "DI0412_DUPLICATE",
    "DI0413_DUPLICATE",
    "DI0414_DUPLICATE",
    "DI0415_DUPLICATE",
    "DI0416_DUPLICATE",
    "DI0417_DUPLICATE",
    "DI0418_DUPLICATE",
    "DI0419_DUPLICATE",
    "DI0420_DUPLICATE",
    "DI0421_DUPLICATE",
    "DI0422_DUPLICATE",
    "DI0423_DUPLICATE",
    "DI0424_DUPLICATE",
    "DI0425_DUPLICATE",
    "DI0426_DUPLICATE",
    "DI0427_DUPLICATE",
    "DI0428_DUPLICATE",
    "DI0429_DUPLICATE",
    "DI0430_DUPLICATE",
    "DI0431_DUPLICATE",
    "DI0432_DUPLICATE",
    "DI0433_DUPLICATE",
    "DI0434_DUPLICATE",
    "DI0435_DUPLICATE",
    "DI0436_DUPLICATE",
    "DI0437_DUPLICATE",
    "DI0438_DUPLICATE",
    "DI0439_DUPLICATE",
    "DI0440_DUPLICATE",
    "DI0441_DUPLICATE",
    "DI0442_DUPLICATE",
    "DI0443_DUPLICATE",
    "DI0444_DUPLICATE",
    "DI0445_DUPLICATE",
    "DI0446_DUPLICATE",
    "DI0447_DUPLICATE",
    "DI0448_DUPLICATE",
    "DI0449_DUPLICATE",
    "DI0450_DUPLICATE",
    "DI0451_DUPLICATE",
    "DI0452_DUPLICATE",
    "DI0453_DUPLICATE",
    "DI0454_DUPLICATE",
    "DI0455_DUPLICATE",
    "DI0456_DUPLICATE",
    "DI0457_DUPLICATE",
    "DI0458_DUPLICATE",
    "DI0459_DUPLICATE",
    "DI0460_DUPLICATE",
    "DI0461_DUPLICATE",
    "DI0462_DUPLICATE",
    "DI0463_DUPLICATE",
    "DI0464_DUPLICATE",
    "DI0465_DUPLICATE",
    "DI0466_DUPLICATE",
    "DI0467_DUPLICATE",
    "DI0468_DUPLICATE",
    "DI0469_DUPLICATE",
    "DI0470_DUPLICATE",
    "DI0471_DUPLICATE",
    "DI0472_DUPLICATE",
    "DI0473_DUPLICATE",
    "DI0474_DUPLICATE",
    "DI0475_DUPLICATE",
    "DI0476_DUPLICATE",
    "DI0477_DUPLICATE",
    "DI0478_DUPLICATE",
    "DI0479_DUPLICATE",
    "DI0480_DUPLICATE",
    "DI0481_DUPLICATE",
    "DI0482_DUPLICATE",
    "DI0483_DUPLICATE",
    "DI0484_DUPLICATE",
    "DI0485_DUPLICATE",
    "DI0486_DUPLICATE",
    "DI0487_DUPLICATE",
    "DI0488_DUPLICATE",
    "DI0489_DUPLICATE",
    "DI0490_DUPLICATE",
    "DI0491_DUPLICATE",
    "DI0492_DUPLICATE",
    "DI0493_DUPLICATE",
    "DI0494_DUPLICATE",
    "DI0495_DUPLICATE",
    "DI0496_DUPLICATE",
    "DI0497_DUPLICATE",
    "DI0498_DUPLICATE",
    "DI0499_DUPLICATE",
    "DI0500_DUPLICATE",
    "DI0501_DUPLICATE",
    "DI0502_DUPLICATE",
    "DI0503_DUPLICATE",
    "DI0504_DUPLICATE",
    "DI0505_DUPLICATE",
    "DI0506_DUPLICATE",
    "DI0507_DUPLICATE",
    "DI0508_DUPLICATE",
    "DI0509_DUPLICATE",
    "DI0510_DUPLICATE",
    "DI0511_DUPLICATE",
    "DI0512_DUPLICATE",
    "DI0513_GOT_A_70A7_AWAIT_TERMINATE",
    "DI0514_SHOPKEEPER_YELLS_AT_YOU_ON_SHELF",
    "DI0515_GOT_X_COINS",
    "DI0516_FOUND_A_70A7_AWAIT_TERMINATE",
    "DI0517_YOU_WIN",
    "DI0518_YOU_LOSE",
    "DI0519_MUSHROOM_INNKEEPER",
    "DI0520_LITTLE_SHORT_ON_COINS",
    "DI0521_NEW_PAGE_GOOD_LUCK",
    "DI0522_GOT_A_70A7_AWAIT_TERMINATE",
    "DI0523_NEW_PAGE_NUM_OF_COOKIES_AWAIT_TERMINATE",
    "DI0524_GOT_A_70A7_AWAIT_TERMINATE",
    "DI0525_GOT_A_70A7_AUTO_TERMINATE",
    "DI0526_GOT_A_FROG_COIN",
    "DI0527_NEW_PAGE_NUM_OF_COOKIES_AUTO_TERMINATE",
    "DI0528_EMPTY",
    "DI0529_MUSHROOM_KINGDOM_NPC",
    "DI0530_MUSHROOM_KINGDOM_NPC",
    "DI0531_RECEIVED_70A7",
    "DI0532_EMPTY",
    "DI0533_MUSHROOM_KINGDOM_NPC",
    "DI0534_MUSHROOM_KINGDOM_NPC",
    "DI0535_EMPTY",
    "DI0536_EMPTY",
    "DI0537_EMPTY",
    "DI0538_KINGDOM_SUPER_JUMP_HINT",
    "DI0539_EMPTY",
    "DI0540_KINGDOM_JUMP_SHOES_HINT",
    "DI0541_JUMPING_KID",
    "DI0542_EMPTY",
    "DI0543_EMPTY",
    "DI0544_EMPTY",
    "DI0545_YEAH",
    "DI0546_THANKS_A_BUNCH",
    "DI0547_SUPER_JUMP_TIMING_HINT",
    "DI0548_EMPTY",
    "DI0549_EMPTY",
    "DI0550_EMPTY",
    "DI0551_BELLHOP_1",
    "DI0552_BELLHOP_2",
    "DI0553_BELLHOP_3",
    "DI0554_EMPTY",
    "DI0555_EMPTY",
    "DI0556_EMPTY",
    "DI0557_EMPTY",
    "DI0558_EMPTY",
    "DI0559_EMPTY",
    "DI0560_EMPTY",
    "DI0561_EMPTY",
    "DI0562_EMPTY",
    "DI0563_EMPTY",
    "DI0564_EMPTY",
    "DI0565_EMPTY",
    "DI0566_EMPTY",
    "DI0567_EMPTY",
    "DI0568_CHANCELLOR",
    "DI0569_EMPTY",
    "DI0570_EMPTY",
    "DI0571_EMPTY",
    "DI0572_EMPTY",
    "DI0573_EMPTY",
    "DI0574_EMPTY",
    "DI0575_EMPTY",
    "DI0576_EMPTY",
    "DI0577_EMPTY",
    "DI0578_WALLET_GUY_INTRO",
    "DI0579_WALLET_GUY_PROMISE",
    "DI0580_SUPER_JUMP_TIMING_HINT",
    "DI0581_EMPTY",
    "DI0582_EMPTY",
    "DI0583_EMPTY",
    "DI0584_EMPTY",
    "DI0585_EMPTY",
    "DI0586_EMPTY",
    "DI0587_EMPTY",
    "DI0588_EMPTY",
    "DI0589_EMPTY",
    "DI0590_EMPTY",
    "DI0591_EMPTY",
    "DI0592_EMPTY",
    "DI0593_EMPTY",
    "DI0594_EMPTY",
    "DI0595_EMPTY",
    "DI0596_EMPTY",
    "DI0597_EMPTY",
    "DI0598_EMPTY",
    "DI0599_EMPTY",
    "DI0600_EMPTY",
    "DI0601_EMPTY",
    "DI0602_EMPTY",
    "DI0603_EMPTY",
    "DI0604_EMPTY",
    "DI0605_BERSERK_HINT",
    "DI0606_EMPTY",
    "DI0607_KID_STUCK_INDOORS",
    "DI0608_SHOPKEEPER_YELLS_AT_YOU_ON_SHELF",
    "DI0609_SHOPKEEPER_YELLS_AT_YOU_BEHIND_COUNTER",
    "DI0610_EMPTY",
    "DI0611_EMPTY",
    "DI0612_EMPTY",
    "DI0613_EMPTY",
    "DI0614_EMPTY",
    "DI0615_EMPTY",
    "DI0616_EMPTY",
    "DI0617_EMPTY",
    "DI0618_EMPTY",
    "DI0619_EMPTY",
    "DI0620_EMPTY",
    "DI0621_EMPTY",
    "DI0622_EMPTY",
    "DI0623_EMPTY",
    "DI0624_EMPTY",
    "DI0625_EMPTY",
    "DI0626_EMPTY",
    "DI0627_EMPTY",
    "DI0628_EMPTY",
    "DI0629_EMPTY",
    "DI0630_EMPTY",
    "DI0631_EMPTY",
    "DI0632_EMPTY",
    "DI0633_EMPTY",
    "DI0634_SCARY_THINGS",
    "DI0635_EMPTY",
    "DI0636_EMPTY",
    "DI0637_EMPTY",
    "DI0638_EMPTY",
    "DI0639_EMPTY",
    "DI0640_EMPTY",
    "DI0641_EMPTY",
    "DI0642_EMPTY",
    "DI0643_EMPTY",
    "DI0644_EMPTY",
    "DI0645_EMPTY",
    "DI0646_EMPTY",
    "DI0647_EMPTY",
    "DI0648_EMPTY",
    "DI0649_HELP",
    "DI0650_EMPTY",
    "DI0651_EMPTY",
    "DI0652_EMPTY",
    "DI0653_DUPLICATE",
    "DI0654_DUPLICATE",
    "DI0655_VAULT_HINT",
    "DI0656_GUEST_ROOM_ITEM_HINT",
    "DI0657_IM_SCARED",
    "DI0658_WHAT_ARE_THOSE_THINGS",
    "DI0659_CHANCELLOR_IS_STILL_IN_THRONE_ROOM",
    "DI0660_TOO_SCARED_TO_PASS",
    "DI0661_TRAPPED_AGAIN",
    "DI0662_SAVED_BY_YOU_AGAIN",
    "DI0663_EMPTY",
    "DI0664_EMPTY",
    "DI0665_EMPTY",
    "DI0666_EMPTY",
    "DI0667_EMPTY",
    "DI0668_THAT_WAS_TOO_DARN_CLOSE",
    "DI0669_ASKS_FOR_WALLET_BACK",
    "DI0670_YOURE_TERRIBLE",
    "DI0671_THANKS_FOR_RETURNING_WALLET",
    "DI0672_DEMANDS_WALLET_BACK_AGAIN",
    "DI0673_LOTS_OF_NOISE_OUT_THERE",
    "DI0674_OH_WOW",
    "DI0675_SHAKEN_NOT_STIRRED",
    "DI0676_GRANDMA_DURING_MK_INVASION",
    "DI0677_TIMED_HIT_HINT",
    "DI0678_EMPTY",
    "DI0679_EMPTY",
    "DI0680_THANK_YOU",
    "DI0681_EMPTY",
    "DI0682_EMPTY",
    "DI0683_EMPTY",
    "DI0684_EMPTY",
    "DI0685_EMPTY",
    "DI0686_EMPTY",
    "DI0687_HOW_CAN_YOU_SHOP_AT_A_TIME_LIKE_THIS",
    "DI0688_EMPTY",
    "DI0689_EMPTY",
    "DI0690_GUEST_ROOM_BEFORE_SAMUS",
    "DI0691_EMPTY",
    "DI0692_THANKS",
    "DI0693_JUMPING_KID_DURING_OCCUPATION",
    "DI0694_JUMPING_KID_DURING_OCCUPATION_2",
    "DI0695_WHAT_DID_YOU_FIND",
    "DI0696_EMPTY",
    "DI0697_WORRIED_ABOUT_BROTHER",
    "DI0698_EMPTY",
    "DI0699_EMPTY",
    "DI0700_EMPTY",
    "DI0701_EMPTY",
    "DI0702_GIVE_EM_HECK",
    "DI0703_EMPTY",
    "DI0704_EMPTY",
    "DI0705_WORRIED_ABOUT_SON",
    "DI0706_EMPTY",
    "DI0707_EMPTY",
    "DI0708_EMPTY",
    "DI0709_EMPTY",
    "DI0710_EMPTY",
    "DI0711_EMPTY",
    "DI0712_EMPTY",
    "DI0713_EMPTY",
    "DI0714_EMPTY",
    "DI0715_EMPTY",
    "DI0716_EMPTY",
    "DI0717_EMPTY",
    "DI0718_EMPTY",
    "DI0719_EMPTY",
    "DI0720_EMPTY",
    "DI0721_EMPTY",
    "DI0722_EMPTY",
    "DI0723_EMPTY",
    "DI0724_EMPTY",
    "DI0725_EMPTY",
    "DI0726_EMPTY",
    "DI0727_THANKS_FOR_SAVING_BROTHER",
    "DI0728_EMPTY",
    "DI0729_THINGS_IN_KITCHEN",
    "DI0730_EMPTY",
    "DI0731_EMPTY",
    "DI0732_EMPTY",
    "DI0733_EMPTY",
    "DI0734_EMPTY",
    "DI0735_BOWSETTE_COSTUME",
    "DI0736_EMPTY",
    "DI0737_EMPTY",
    "DI0738_EMPTY",
    "DI0739_EMPTY",
    "DI0740_EMPTY",
    "DI0741_EMPTY",
    "DI0742_EMPTY",
    "DI0743_EMPTY",
    "DI0744_EMPTY",
    "DI0745_EMPTY",
    "DI0746_EMPTY",
    "DI0747_EMPTY",
    "DI0748_EMPTY",
    "DI0749_EMPTY",
    "DI0750_EMPTY",
    "DI0751_EMPTY",
    "DI0752_EMPTY",
    "DI0753_EMPTY",
    "DI0754_EMPTY",
    "DI0755_EMPTY",
    "DI0756_EMPTY",
    "DI0757_EMPTY",
    "DI0758_EMPTY",
    "DI0759_EMPTY",
    "DI0760_EMPTY",
    "DI0761_EMPTY",
    "DI0762_EMPTY",
    "DI0763_EMPTY",
    "DI0764_EMPTY",
    "DI0765_EMPTY",
    "DI0766_ROSE_TOWN_INNKEEPER",
    "DI0767_ROSE_TOWN_INN_CONFIRM",
    "DI0768_ROSE_TOWN_INN_DECLINE",
    "DI0769_EMPTY",
    "DI0770_EMPTY",
    "DI0771_EMPTY",
    "DI0772_EMPTY",
    "DI0773_EMPTY",
    "DI0774_EMPTY",
    "DI0775_EMPTY",
    "DI0776_ROSE_TOWN_NEXT_MORNING",
    "DI0777_ROSE_TOWN_NEXT_MORNING_CONFIRM",
    "DI0778_ROSE_TOWN_NEXT_MORNING_DECLINE",
    "DI0779_GAZ",
    "DI0780_EMPTY",
    "DI0781_EMPTY",
    "DI0782_EMPTY",
    "DI0783_EMPTY",
    "DI0784_EMPTY",
    "DI0785_OUCH",
    "DI0786_BE_QUIET",
    "DI0787_ARROW_DEMO",
    "DI0788_SOME_JERK_IN_THE_FOREST",
    "DI0789_WATER_PUMP_OCCUPIED",
    "DI0790_WIFE_OF_FROZEN_TOAD",
    "DI0791_EMPTY",
    "DI0792_DUPLICATE",
    "DI0793_DUPLICATE",
    "DI0794_EMPTY",
    "DI0795_EMPTY",
    "DI0796_EMPTY",
    "DI0797_LEAVE_NO_STONE_UNTURNED",
    "DI0798_DUPLICATE",
    "DI0799_DUPLICATE",
    "DI0800_FOREST_SECRET_HINT",
    "DI0801_REVISIT_HINT",
    "DI0802_DUPLICATE",
    "DI0803_NO_ADVICE",
    "DI0804_EMPTY",
    "DI0805_EMPTY",
    "DI0806_EMPTY",
    "DI0807_EMPTY",
    "DI0808_EMPTY",
    "DI0809_VOLCANO_FIRST_ROOM_HINT",
    "DI0810_EMPTY",
    "DI0811_EMPTY",
    "DI0812_DEBUG_NPC",
    "DI0813_CANT_MOVE",
    "DI0814_CANT_CHOP_WOOD",
    "DI0815_JUST_YOU_WAIT",
    "DI0816_TOLD_NOT_TO_GO_OUTSIDE",
    "DI0817_GRANDPA_PUMPING_WATER",
    "DI0818_KIDS_ARE_SAFE_INDOORS",
    "DI0819_EMPTY",
    "DI0820_EMPTY",
    "DI0821_KID_NOT_FROZEN",
    "DI0822_GOOMBA_THUMPIN_START",
    "DI0823_EMPTY",
    "DI0824_EMPTY",
    "DI0825_EMPTY",
    "DI0826_EMPTY",
    "DI0827_EMPTY",
    "DI0828_EMPTY",
    "DI0829_EMPTY",
    "DI0830_EMPTY",
    "DI0831_EMPTY",
    "DI0832_EMPTY",
    "DI0833_GOOMBA_THUMPIN_SCORE",
    "DI0834_DUPLICATE",
    "DI0835_DUPLICATE",
    "DI0836_GOOMBA_THUMPIN_TIP",
    "DI0837_GOOMBA_THUMPIN_PRIZE",
    "DI0838_GOOMBA_THUMPIN_DURING_GAME",
    "DI0839_EMPTY",
    "DI0840_GOOMBA_THUMPIN_NO_DICE",
    "DI0841_GOOMBA_THUMPIN_PITY_MECHANIC",
    "DI0842_EMPTY",
    "DI0843_EMPTY",
    "DI0844_EMPTY",
    "DI0845_EMPTY",
    "DI0846_EMPTY",
    "DI0847_EMPTY",
    "DI0848_EMPTY",
    "DI0849_EMPTY",
    "DI0850_EMPTY",
    "DI0851_EMPTY",
    "DI0852_EMPTY",
    "DI0853_EMPTY",
    "DI0854_EMPTY",
    "DI0855_EMPTY",
    "DI0856_EMPTY",
    "DI0857_EMPTY",
    "DI0858_HIDDEN_NPCS_HINT",
    "DI0859_FINALLY_HOME",
    "DI0860_CANT_BELIEVE_WE_HAD_ARROWS",
    "DI0861_GARDENER_HIDDEN_ITEM_HINT",
    "DI0862_PROUD_OF_GRANDSONS",
    "DI0863_STOPPED_RAINING_ARROWS",
    "DI0864_CAN_FINALLY_RELAX",
    "DI0865_PHEW_MADE_IT_ON_TIME",
    "DI0866_X_POINTS",
    "DI0867_ILL_CARRY_THAT",
    "DI0868_EMPTY",
    "DI0869_SHOP_TYPING_HINT",
    "DI0870_THREE_INVISIBLE_ITEMS_HINT",
    "DI0871_EMPTY",
    "DI0872_EMPTY",
    "DI0873_EMPTY",
    "DI0874_GARDENER_UNLOCK_HINT",
    "DI0875_MIDAS_CAVE_HINT",
    "DI0876_TALK_TO_NPCS_HINT",
    "DI0877_EMPTY",
    "DI0878_EMPTY",
    "DI0879_OUT_OF_CASH_LEARN_TO_STASH",
    "DI0880_EMPTY",
    "DI0881_EMPTY",
    "DI0882_EMPTY",
    "DI0883_EMPTY",
    "DI0884_EMPTY",
    "DI0885_EMPTY",
    "DI0886_EMPTY",
    "DI0887_EMPTY",
    "DI0888_EMPTY",
    "DI0889_WALLET_THREAT",
    "DI0890_DUPLICATE",
    "DI0891_YOSHI_LOSES",
    "DI0892_DUPLICATE",
    "DI0893_YOSHI_LOST",
    "DI0894_YOSHI_LOST",
    "DI0895_GOAL",
    "DI0896_EMPTY",
    "DI0897_DUPLICATE",
    "DI0898_EMPTY",
    "DI0899_EMPTY",
    "DI0900_YOSHI_AFTER_YOU_ENABLE_HIM",
    "DI0901_YOSHI_RACE_HINT",
    "DI0902_COOKIE_MANAGER_BEFORE_BEATING_BOSHI",
    "DI0903_YOSHI_GOTTA_GO_FAST",
    "DI0904_BABY_YOSHI_HINT",
    "DI0905_EMPTY",
    "DI0906_BOSHI_BEFORE_YOU_BEAT_HIM",
    "DI0907_EMPTY",
    "DI0908_EMPTY",
    "DI0909_THAT_CANT_HAPPEN_TWICE",
    "DI0910_EMPTY",
    "DI0911_DUPLICATE",
    "DI0912_EMPTY",
    "DI0913_EMPTY",
    "DI0914_EMPTY",
    "DI0915_EMPTY",
    "DI0916_EMPTY",
    "DI0917_EMPTY",
    "DI0918_EMPTY",
    "DI0919_EMPTY",
    "DI0920_FOUND_A_COOKIE",
    "DI0921_BABY_YOSHI_HINT",
    "DI0922_EMPTY",
    "DI0923_SEE_YOU_AROUND",
    "DI0924_EMPTY",
    "DI0925_EMPTY",
    "DI0926_EMPTY",
    "DI0927_EMPTY",
    "DI0928_EMPTY",
    "DI0929_EMPTY",
    "DI0930_EMPTY",
    "DI0931_EMPTY",
    "DI0932_EMPTY",
    "DI0933_EMPTY",
    "DI0934_EMPTY",
    "DI0935_DUPLICATE",
    "DI0936_DUPLICATE",
    "DI0937_DUPLICATE",
    "DI0938_TAKE_MY_COOKIES",
    "DI0939_EMPTY",
    "DI0940_EMPTY",
    "DI0941_EMPTY",
    "DI0942_NEED_COOKIES_TO_RACE",
    "DI0943_GOT_X_COOKIES",
    "DI0944_YOSHI_ILL_TRY_MY_BEST",
    "DI0945_EMPTY",
    "DI0946_LETS_RACE_AGAIN_SOMETIME",
    "DI0947_EMPTY",
    "DI0948_EMPTY",
    "DI0949_RACE_START",
    "DI0950_TOO_MANY_COOKIES",
    "DI0951_ATE_EXCESS_COOKIES",
    "DI0952_DUPLICATE",
    "DI0953_WILL_EAT_EXCESS_COOKIES",
    "DI0954_EMPTY",
    "DI0955_EMPTY",
    "DI0956_EMPTY",
    "DI0957_EMPTY",
    "DI0958_DUPLICATE",
    "DI0959_EMPTY",
    "DI0960_EMPTY",
    "DI0961_EMPTY",
    "DI0962_EMPTY",
    "DI0963_EMPTY",
    "DI0964_EMPTY",
    "DI0965_DUPLICATE",
    "DI0966_EMPTY",
    "DI0967_ARE_YOU_LEAVING_MARRYMORE_HOTEL",
    "DI0968_DUPLICATE",
    "DI0969_MAKE_YOURSELF_AT_HOME",
    "DI0970_ENJOY_YOUR_STAY",
    "DI0971_DUPLICATE",
    "DI0972_DUPLICATE",
    "DI0973_DUPLICATE",
    "DI0974_ENJOY_YOUR_STAY",
    "DI0975_EMPTY_NEW_PAGE",
    "DI0976_DUPLICATE",
    "DI0977_EMPTY",
    "DI0978_EMPTY",
    "DI0979_INACTIVE_BELLHOP",
    "DI0980_EMPTY",
    "DI0981_EMPTY",
    "DI0982_DUPLICATE",
    "DI0983_DUPLICATE",
    "DI0984_DUPLICATE",
    "DI0985_DUPLICATE",
    "DI0986_TIP_PROMPT",
    "DI0987_CANT_AFFORD_TIP",
    "DI0988_THANKS_FOR_TIP",
    "DI0989_EMPTY",
    "DI0990_STAY_LONGER_IN_SUITE_INTRO",
    "DI0991_STAY_LONGER_IN_SUITE_PROMPT",
    "DI0992_GOOD_MORNING_FROM_BELLHOP",
    "DI0993_EMPTY",
    "DI0994_EMPTY",
    "DI0995_BELLHOP_GIFT",
    "DI0996_DROP_BY_AGAIN",
    "DI0997_CAPS_LOCK_HONORIFIC",
    "DI0998_THANK_YOU_VERY_MUCH",
    "DI0999_EMPTY",
    "DI1000_EMPTY",
    "DI1001_YOURE_BROKE_NEED_TO_WORK_REMAINING",
    "DI1002_DUPLICATE",
    "DI1003_THEY_TOOK_ALL_COINS",
    "DI1004_BREAK_EVERY_BONE_IN_YOUR_BODY",
    "DI1005_PLAYER_ESCORTS_GUEST",
    "DI1006_BELLHOP_WHILE_PLAYER_EMPLOYED",
    "DI1007_PLAYER_ESCORTS_GUEST",
    "DI1008_CALM_DOWN",
    "DI1009_TAKE_CARE_OF_THESE_THINGS",
    "DI1010_PLAYER_ESCORTS_GUEST",
    "DI1011_EMPTY",
    "DI1012_EMPTY",
    "DI1013_EMPTY",
    "DI1014_SEE_GUEST_OUT",
    "DI1015_EMPTY",
    "DI1016_THANKS_A_LOT",
    "DI1017_EMPTY",
    "DI1018_EMPTY",
    "DI1019_NOT_OFF_THE_HOOK",
    "DI1020_FINISHED_WORKING_AT_MARRYMORE",
    "DI1021_MARRYMORE_INNKEEPER_TELLS_YOU_TO_GO_BEHIND_COUNTER",
    "DI1022_HERE_YOU_GO",
    "DI1023_DEBUG_MENU",
    "DI1024_DEBUG_MENU",
    "DI1025_DEBUG_MENU",
    "DI1026_DEBUG_MENU",
    "DI1027_DEBUG_MENU",
    "DI1028_DEBUG_MENU",
    "DI1029_DEBUG_MENU",
    "DI1030_DEBUG_MENU",
    "DI1031_DEBUG_MENU",
    "DI1032_DEBUG_MENU",
    "DI1033_DEBUG_MENU",
    "DI1034_DEBUG_MENU",
    "DI1035_DEBUG_MENU",
    "DI1036_MIDAS_RIVER_TRADE_TUTORIAL",
    "DI1037_DUPLICATE",
    "DI1038_MIDAS_EXCHANGE",
    "DI1039_MIDAS_EXCHANGE",
    "DI1040_MIDAS_EXCHANGE",
    "DI1041_MIDAS_EXCHANGE",
    "DI1042_MIDAS_EXCHANGE",
    "DI1043_MIDAS_EXCHANGE",
    "DI1044_MIDAS_EXCHANGE",
    "DI1045_MIDAS_EXCHANGE",
    "DI1046_MIDAS_EXCHANGE",
    "DI1047_MIDAS_EXCHANGE",
    "DI1048_MIDAS_EXCHANGE",
    "DI1049_FOUND_A_FROG_COIN",
    "DI1050_I_WISH_YOU_LUCK_ON_YOUR_QUEST",
    "DI1051_MOLEVILLE_CLOSED",
    "DI1052_PIPE_VAULT_HINT",
    "DI1053_EMPTY",
    "DI1054_SUNKEN_SHIP_HINT",
    "DI1055_EMPTY",
    "DI1056_EMPTY",
    "DI1057_EMPTY",
    "DI1058_EMPTY",
    "DI1059_EMPTY",
    "DI1060_EMPTY",
    "DI1061_EMPTY",
    "DI1062_EMPTY",
    "DI1063_EMPTY",
    "DI1064_EMPTY",
    "DI1065_EMPTY",
    "DI1066_EMPTY",
    "DI1067_EMPTY",
    "DI1068_EMPTY",
    "DI1069_EMPTY",
    "DI1070_EMPTY",
    "DI1071_EMPTY",
    "DI1072_EMPTY",
    "DI1073_EMPTY",
    "DI1074_EMPTY",
    "DI1075_MIDAS_EXCHANGE",
    "DI1076_MIDAS_EXCHANGE",
    "DI1077_MIDAS_EXCHANGE",
    "DI1078_MIDAS_EXCHANGE",
    "DI1079_MIDAS_EXCHANGE",
    "DI1080_MIDAS_EXCHANGE",
    "DI1081_MIDAS_EXCHANGE",
    "DI1082_MIDAS_EXCHANGE",
    "DI1083_EMPTY",
    "DI1084_EMPTY",
    "DI1085_EMPTY",
    "DI1086_MIDAS_EXCHANGE",
    "DI1087_MIDAS_EXCHANGE",
    "DI1088_MOLEVILLE_INN",
    "DI1089_MOLEVILLE_INN",
    "DI1090_MOLEVILLE_INN_NO_COINS",
    "DI1091_MOLEVILLE_INN_TOADOFSKY_HINT",
    "DI1092_EMPTY",
    "DI1093_EMPTY",
    "DI1094_EMPTY",
    "DI1095_MOLEVILLE_NPC_BEFORE_CLEAR",
    "DI1096_MOLEVILLE_BOMB_HINT",
    "DI1097_MOLEVILLE_BOMB_HINT",
    "DI1098_MOLEVILLE_CUTSCENE",
    "DI1099_MOLEVILLE_CUTSCENE",
    "DI1100_MINECART_SCORE",
    "DI1101_MINECART_HIGH_SCORE",
    "DI1102_MINECART_DID_NOT_SET_PB",
    "DI1103_MINECART_SET_PB",
    "DI1104_MA_MOLE_KIDS_HURRY_HOME",
    "DI1105_MUSTY_FEARS_EXPLANATION",
    "DI1106_INVISIBLE_ITEMS_CONFIRMED_PLACED",
    "DI1107_RESERVED_FOR_BIGBOOFLAG_HINT",
    "DI1108_RESERVED_FOR_DRYBONESFLAG_HINT",
    "DI1109_RESERVED_FOR_GREAPERFLAG_HINT",
    "DI1110_PIPE_VAULT_CLOSED",
    "DI1111_EMPTY",
    "DI1112_EMPTY",
    "DI1113_EMPTY",
    "DI1114_EMPTY",
    "DI1115_EMPTY",
    "DI1116_WON_AFTER_WAGER",
    "DI1117_MA_MOLE",
    "DI1118_PA_MOLE",
    "DI1119_DYNA",
    "DI1120_EMPTY",
    "DI1121_EMPTY",
    "DI1122_EMPTY",
    "DI1123_MINECART_HINT",
    "DI1124_PURTEND_STORE",
    "DI1125_MINECART_SHORTCUT",
    "DI1126_MINECART_PAYMENT",
    "DI1127_MINECART_CONFIRM",
    "DI1128_EMPTY",
    "DI1129_MINECART_NO_COIN",
    "DI1130_WAGER_PROMPT",
    "DI1131_WAGER_CHOICE",
    "DI1132_MINECART_PAYMENT_CONFIRM",
    "DI1133_WAGER_EXPLANATION",
    "DI1134_MINECART_ALREADY_PAID",
    "DI1135_TRY_TO_SNEAK_INTO_MINECART",
    "DI1136_TOUCH_MINECART",
    "DI1137_MINECART_RECORD_STATEMENT",
    "DI1138_EMPTY",
    "DI1139_FIREWORKS_HINT",
    "DI1140_TOWER_DESCRIPTION",
    "DI1141_EMPTY",
    "DI1142_MOLEVILLE_BLUES_HINT",
    "DI1143_BEAN_VALLEY_HINT",
    "DI1144_CASINO_HINT",
    "DI1145_LANDS_END_SEWER_HINT",
    "DI1146_WISH_I_HAD_CARBO_COOKIE",
    "DI1147_CARBO_COOKIE_PROMPT",
    "DI1148_CARBO_COOKIE_DECLINE",
    "DI1149_BUCKET_GIRL_LEAVES",
    "DI1150_BUCKET_GIRL_GRANT",
    "DI1151_THANKS_HONORIFIC",
    "DI1152_EMPTY",
    "DI1153_PURTEND_STORE_SOLD_OUT",
    "DI1154_PURTEND_STORE_THANKS",
    "DI1155_RECEIVED_SHINY_STONE",
    "DI1156_BEAN_VALLEY_PLATFORM_HINT",
    "DI1157_LANDS_END_PLATFORM_HINT",
    "DI1158_OFFER_TO_RETURN_SHINY_STONE",
    "DI1159_ASK_TO_TRADE_COOKIE_FOR_STONE",
    "DI1160_PURTEND_STORE_DISABLED",
    "DI1161_RECEIVED_CARBO_COOKIE",
    "DI1162_EMPTY",
    "DI1163_BOOSTER_TOWER_DOOR_OPEN",
    "DI1164_FIXED_ROOF",
    "DI1165_DUPLICATE",
    "DI1166_TEMPLE_BLOCKED_PIPE_HINT",
    "DI1167_EMPTY",
    "DI1168_EMPTY",
    "DI1169_EMPTY",
    "DI1170_EMPTY",
    "DI1171_EMPTY",
    "DI1172_PA_MOLE_INSIDE_MINES_AFTER_BOMB",
    "DI1173_TROLLEY_RIDE_PAY_PROMPT",
    "DI1174_CANT_WAIT_TO_GET_OLDER",
    "DI1175_SWAP_SHOP_INSTRUCTIONS",
    "DI1176_RECEIVED_A_FROG_COIN",
    "DI1177_FOUND_A_70A7_AUTO_TERMINATE",
    "DI1178_FOUND_AN_70A7_AUTO_TERMINATE",
    "DI1179_MARIO_JOINS",
    "DI1180_MALLOW_JOINS",
    "DI1181_GENO_JOINS",
    "DI1182_BOWSER_JOINS",
    "DI1183_TOADSTOOL_JOINS",
    "DI1184_EMPTY",
    "DI1185_EMPTY",
    "DI1186_EMPTY",
    "DI1187_EMPTY",
    "DI1188_EMPTY",
    "DI1189_FLOWER_SCORE_ON_HILL",
    "DI1190_EMPTY",
    "DI1191_EMPTY",
    "DI1192_EMPTY",
    "DI1193_NO_FLOWER_HILL",
    "DI1194_EMPTY",
    "DI1195_EMPTY",
    "DI1196_EMPTY",
    "DI1197_EMPTY",
    "DI1198_HILL_COMPLETED_WHEN_EMPTY",
    "DI1199_TOAD_WARNS_YOU_TO_LEAVE_EMPTY_HILL",
    "DI1200_TOAD_TAKES_YOU_OUT_OF_HILL",
    "DI1201_WHATEVER",
    "DI1202_TOAD_TELLS_YOU_THERES_NO_FLOWERS",
    "DI1203_TOAD_TELLS_YOU_THERES_NOTHING_LEFT",
    "DI1204_EMPTY",
    "DI1205_EMPTY",
    "DI1206_EMPTY",
    "DI1207_GRATE_GUY_WARNS_YOU_ABOUT_FACTORY_TRAMPOLINE",
    "DI1208_SWAP_SHOP_ASKS_YOU_FOR_ITEMS",
    "DI1209_SWAP_SHOP_EXPLAINS_ITSELF",
    "DI1210_SWAP_SHOP_EXTENDED_EXPLANATION",
    "DI1211_SWAP_SHOP_POINTS",
    "DI1212_SWAP_SHOP_PROMPT",
    "DI1213_SWAP_SHOP_CONTROLS",
    "DI1214_SWAP_SHOP_AMOUNT_PROMPT",
    "DI1215_SWAP_SHOP_CONFIRMED_TRADE",
    "DI1216_LETS_SEE",
    "DI1217_SWAP_SHOP_OVER_100_POINTS",
    "DI1218_SWAP_SHOP_CONTROLS",
    "DI1219_RECEIVED_70A7",
    "DI1220_COME_BACK_WHEN_YOU_HAVE_ITEMS",
    "DI1221_EXIT_TRAMPOLINE_CONFIRM",
    "DI1222_SHAMAN_SALESMAN_NOT_ENOUGH_COINS",
    "DI1223_SHAMAN_SALESMAN_400_COINS",
    "DI1224_SHAMAN_SALESMAN_2ND_PROMPT",
    "DI1225_EMPTY",
    "DI1226_SHAMAN_SALESMAN_LEAVES",
    "DI1227_SHAMAN_SALESMAN_800_COINS",
    "DI1228_SHAMAN_TRAMPOLINE_SALE",
    "DI1229_SHAMAN_TRAMPOLINE_SALE_NOT_ENOUGH_MONEY",
    "DI1230_TEMPLE_BOSS_FORTUNE",
    "DI1231_EMPTY",
    "DI1232_DONT_TAKE_MY_BUCKET",
    "DI1233_MONSTRO_TADPOLE_POND_HINT",
    "DI1234_MONSTRO_MOUSE_TEMPLE_HINT",
    "DI1235_BELOME_STATUE_KEY_HINT",
    "DI1236_BELOME_STATUE_KEY_PROMPT",
    "DI1237_BELOME_STATUE_MAYBE_UNUSED",
    "DI1238_TEMPLE_TREASURY_FORTUNE",
    "DI1239_FORTUNE_SHAMAN_NOT_ENOUGH_COINS",
    "DI1240_FORTUNE_SHAMAN_PROMPT",
    "DI1241_FORTUNE_SHAMAN_INSTRUCTIONS",
    "DI1242_UNUSED_DEFAULT_FORTUNE",
    "DI1243_FORTUNE_1",
    "DI1244_FORTUNE_2",
    "DI1245_FORTUNE_3",
    "DI1246_FORTUNE_4",
    "DI1247_FORTUNE_5",
    "DI1248_FORTUNE_6",
    "DI1249_FORTUNE_PREAMBLE",
    "DI1250_BOOSTER_PASS_SECRET_HINT",
    "DI1251_GIVE_UP_PROMPT",
    "DI1252_DUPLICATE",
    "DI1253_GOOD_LUCK_ON_STAR_PIECE_QUEST",
    "DI1254_FIREWORKS_HINT",
    "DI1255_EMPTY",
    "DI1256_DUPLICATE",
    "DI1257_DUPLICATE",
    "DI1258_DUPLICATE",
    "DI1259_DUPLICATE",
    "DI1260_DUPLICATE",
    "DI1261_DUPLICATE",
    "DI1262_EMPTY",
    "DI1263_TROOPA_CLIFF_TIME",
    "DI1264_EMPTY",
    "DI1265_EMPTY",
    "DI1266_EMPTY",
    "DI1267_EMPTY",
    "DI1268_EMPTY",
    "DI1269_EMPTY",
    "DI1270_EMPTY",
    "DI1271_EMPTY",
    "DI1272_EMPTY",
    "DI1273_EMPTY",
    "DI1274_WHIRLPOOL_INSTRUCTIONS",
    "DI1275_JUMP_ON_LANDS_END_MOUSE",
    "DI1276_GARDENER_UNLOCK_HINT",
    "DI1277_DEAD_END_SHY_AWAY",
    "DI1278_EMPTY",
    "DI1279_EMPTY",
    "DI1280_EMPTY",
    "DI1281_EMPTY",
    "DI1282_EMPTY",
    "DI1283_EMPTY",
    "DI1284_DUPLICATE",
    "DI1285_EMPTY",
    "DI1286_FIREWORKS_GUY_THANKS",
    "DI1287_DUPLICATE",
    "DI1288_FIREWORKS_GUY_MYSTERY_ITEM",
    "DI1289_FIREWORKS_GUY_FIREWORKS",
    "DI1290_EMPTY",
    "DI1291_EMPTY",
    "DI1292_EMPTY",
    "DI1293_FIREWORKS_GUY_INSUFFICIENT_COINS",
    "DI1294_GOT_FIREWORKS",
    "DI1295_PURTEND_STORE_PROMPT_TO_TRADE_FIREWORKS",
    "DI1296_PURTEND_STORE_NEED_FIREWORKS",
    "DI1297_CANT_SELL_MORE_THAN_ONE_FIREWORKS",
    "DI1298_TEMPLE_FINAL_FORTUNE_INSTRUCTIONS",
    "DI1299_SKY_BRIDGE_PROMPT",
    "DI1300_DUPLICATE",
    "DI1301_PAUSE",
    "DI1302_SKY_BRIDGE_TUTORIAL_PROMPT",
    "DI1303_SKY_BRIDGE_TUTORIAL",
    "DI1304_SKY_BRIDGE_LEVEL_SELECT",
    "DI1305_SKY_BRIDGE_5_COIN_PAY",
    "DI1306_SKY_BRIDGE_INSUFFICIENT_COINS",
    "DI1307_SKY_BRIDGE_DOUBLE_PROMPT",
    "DI1308_SKY_BRIDGE_CONGRATS",
    "DI1309_EMPTY",
    "DI1310_RECEIVED_X_FROG_COINS",
    "DI1311_RECEIVED_X_COINS",
    "DI1312_EMPTY",
    "DI1313_ELEVATOR_SHAMAN",
    "DI1314_SKY_BRIDGE_GOOD_LUCK",
    "DI1315_MIDAS_RIVER_CLOSED",
    "DI1316_GOT_X_TRIES",
    "DI1317_GOT_X_CHANCES",
    "DI1318_ONLY_GOT_X_CHANCES_LEFT",
    "DI1319_LAST_CHANCE",
    "DI1320_2_POINTS",
    "DI1321_DUPLICATE",
    "DI1322_DUPLICATE",
    "DI1323_DUPLICATE",
    "DI1324_DUPLICATE",
    "DI1325_DUPLICATE",
    "DI1326_DUPLICATE",
    "DI1327_DUPLICATE",
    "DI1328_DUPLICATE",
    "DI1329_10_POINTS",
    "DI1330_30_POINTS",
    "DI1331_4_POINTS",
    "DI1332_12_POINTS",
    "DI1333_30_POINTS",
    "DI1334_2_POINTS",
    "DI1335_2_POINTS",
    "DI1336_15_POINTS",
    "DI1337_20_POINTS",
    "DI1338_40_POINTS",
    "DI1339_50_POINTS",
    "DI1340_50_POINTS",
    "DI1341_EMPTY_AUTO",
    "DI1342_25_POINTS",
    "DI1343_9_POINTS",
    "DI1344_DEBUG_MENU",
    "DI1345_DUPLICATE",
    "DI1346_DUPLICATE",
    "DI1347_DUPLICATE",
    "DI1348_DUPLICATE",
    "DI1349_DUPLICATE",
    "DI1350_DUPLICATE",
    "DI1351_DUPLICATE",
    "DI1352_DUPLICATE",
    "DI1353_DUPLICATE",
    "DI1354_DUPLICATE",
    "DI1355_DUPLICATE",
    "DI1356_DUPLICATE",
    "DI1357_DUPLICATE",
    "DI1358_DUPLICATE",
    "DI1359_DUPLICATE",
    "DI1360_DUPLICATE",
    "DI1361_DUPLICATE",
    "DI1362_DUPLICATE",
    "DI1363_DUPLICATE",
    "DI1364_DUPLICATE",
    "DI1365_DUPLICATE",
    "DI1366_DUPLICATE",
    "DI1367_DUPLICATE",
    "DI1368_DUPLICATE",
    "DI1369_DUPLICATE",
    "DI1370_DUPLICATE",
    "DI1371_DUPLICATE",
    "DI1372_DUPLICATE",
    "DI1373_DUPLICATE",
    "DI1374_DUPLICATE",
    "DI1375_DUPLICATE",
    "DI1376_DUPLICATE",
    "DI1377_DUPLICATE",
    "DI1378_DUPLICATE",
    "DI1379_DUPLICATE",
    "DI1380_DUPLICATE",
    "DI1381_DUPLICATE",
    "DI1382_DUPLICATE",
    "DI1383_DUPLICATE",
    "DI1384_DUPLICATE",
    "DI1385_DUPLICATE",
    "DI1386_DUPLICATE",
    "DI1387_DUPLICATE",
    "DI1388_DUPLICATE",
    "DI1389_DUPLICATE",
    "DI1390_DUPLICATE",
    "DI1391_DUPLICATE",
    "DI1392_DUPLICATE",
    "DI1393_DUPLICATE",
    "DI1394_DUPLICATE",
    "DI1395_DUPLICATE",
    "DI1396_DUPLICATE",
    "DI1397_DUPLICATE",
    "DI1398_DUPLICATE",
    "DI1399_DUPLICATE",
    "DI1400_DUPLICATE",
    "DI1401_DUPLICATE",
    "DI1402_DUPLICATE",
    "DI1403_DUPLICATE",
    "DI1404_DUPLICATE",
    "DI1405_DUPLICATE",
    "DI1406_DUPLICATE",
    "DI1407_DUPLICATE",
    "DI1408_DUPLICATE",
    "DI1409_DUPLICATE",
    "DI1410_DUPLICATE",
    "DI1411_DUPLICATE",
    "DI1412_DUPLICATE",
    "DI1413_DUPLICATE",
    "DI1414_DUPLICATE",
    "DI1415_DUPLICATE",
    "DI1416_DUPLICATE",
    "DI1417_DUPLICATE",
    "DI1418_DUPLICATE",
    "DI1419_DUPLICATE",
    "DI1420_DUPLICATE",
    "DI1421_DUPLICATE",
    "DI1422_DUPLICATE",
    "DI1423_DUPLICATE",
    "DI1424_DUPLICATE",
    "DI1425_DUPLICATE",
    "DI1426_DUPLICATE",
    "DI1427_DUPLICATE",
    "DI1428_DUPLICATE",
    "DI1429_DUPLICATE",
    "DI1430_DUPLICATE",
    "DI1431_DUPLICATE",
    "DI1432_DUPLICATE",
    "DI1433_DUPLICATE",
    "DI1434_DUPLICATE",
    "DI1435_DUPLICATE",
    "DI1436_DUPLICATE",
    "DI1437_DUPLICATE",
    "DI1438_DUPLICATE",
    "DI1439_DUPLICATE",
    "DI1440_DUPLICATE",
    "DI1441_DUPLICATE",
    "DI1442_DUPLICATE",
    "DI1443_DUPLICATE",
    "DI1444_DUPLICATE",
    "DI1445_DUPLICATE",
    "DI1446_DUPLICATE",
    "DI1447_DUPLICATE",
    "DI1448_DUPLICATE",
    "DI1449_DUPLICATE",
    "DI1450_DUPLICATE",
    "DI1451_DUPLICATE",
    "DI1452_DUPLICATE",
    "DI1453_DUPLICATE",
    "DI1454_DUPLICATE",
    "DI1455_DUPLICATE",
    "DI1456_DUPLICATE",
    "DI1457_DUPLICATE",
    "DI1458_DUPLICATE",
    "DI1459_DUPLICATE",
    "DI1460_DUPLICATE",
    "DI1461_DUPLICATE",
    "DI1462_DUPLICATE",
    "DI1463_DUPLICATE",
    "DI1464_DUPLICATE",
    "DI1465_DUPLICATE",
    "DI1466_DUPLICATE",
    "DI1467_DUPLICATE",
    "DI1468_DUPLICATE",
    "DI1469_DUPLICATE",
    "DI1470_DUPLICATE",
    "DI1471_DUPLICATE",
    "DI1472_DUPLICATE",
    "DI1473_DUPLICATE",
    "DI1474_DUPLICATE",
    "DI1475_DUPLICATE",
    "DI1476_DUPLICATE",
    "DI1477_DUPLICATE",
    "DI1478_DUPLICATE",
    "DI1479_DUPLICATE",
    "DI1480_DUPLICATE",
    "DI1481_DUPLICATE",
    "DI1482_DUPLICATE",
    "DI1483_DUPLICATE",
    "DI1484_DUPLICATE",
    "DI1485_DUPLICATE",
    "DI1486_DUPLICATE",
    "DI1487_DUPLICATE",
    "DI1488_DUPLICATE",
    "DI1489_DUPLICATE",
    "DI1490_DUPLICATE",
    "DI1491_DUPLICATE",
    "DI1492_DUPLICATE",
    "DI1493_DUPLICATE",
    "DI1494_DUPLICATE",
    "DI1495_DUPLICATE",
    "DI1496_DUPLICATE",
    "DI1497_DUPLICATE",
    "DI1498_DUPLICATE",
    "DI1499_DUPLICATE",
    "DI1500_DUPLICATE",
    "DI1501_DUPLICATE",
    "DI1502_DUPLICATE",
    "DI1503_DUPLICATE",
    "DI1504_DUPLICATE",
    "DI1505_DUPLICATE",
    "DI1506_DUPLICATE",
    "DI1507_DUPLICATE",
    "DI1508_DUPLICATE",
    "DI1509_DUPLICATE",
    "DI1510_DUPLICATE",
    "DI1511_DUPLICATE",
    "DI1512_DUPLICATE",
    "DI1513_DUPLICATE",
    "DI1514_DUPLICATE",
    "DI1515_DUPLICATE",
    "DI1516_DUPLICATE",
    "DI1517_DUPLICATE",
    "DI1518_DUPLICATE",
    "DI1519_DUPLICATE",
    "DI1520_DUPLICATE",
    "DI1521_DUPLICATE",
    "DI1522_DUPLICATE",
    "DI1523_DUPLICATE",
    "DI1524_DUPLICATE",
    "DI1525_DUPLICATE",
    "DI1526_DUPLICATE",
    "DI1527_DUPLICATE",
    "DI1528_DUPLICATE",
    "DI1529_DUPLICATE",
    "DI1530_DUPLICATE",
    "DI1531_DUPLICATE",
    "DI1532_DUPLICATE",
    "DI1533_DUPLICATE",
    "DI1534_DUPLICATE",
    "DI1535_DUPLICATE",
    "DI1536_DUPLICATE",
    "DI1537_DUPLICATE",
    "DI1538_DUPLICATE",
    "DI1539_DUPLICATE",
    "DI1540_DUPLICATE",
    "DI1541_DEBUG_MENU",
    "DI1542_DEBUG_MENU",
    "DI1543_DEBUG_MENU",
    "DI1544_DEBUG_MENU",
    "DI1545_DUPLICATE",
    "DI1546_DUPLICATE",
    "DI1547_DUPLICATE",
    "DI1548_DUPLICATE",
    "DI1549_DEBUG_MENU",
    "DI1550_DEBUG_MENU",
    "DI1551_DEBUG_MENU",
    "DI1552_DUPLICATE",
    "DI1553_DEBUG_MENU",
    "DI1554_DUPLICATE",
    "DI1555_DUPLICATE",
    "DI1556_DUPLICATE",
    "DI1557_DUPLICATE",
    "DI1558_DUPLICATE",
    "DI1559_DUPLICATE",
    "DI1560_DUPLICATE",
    "DI1561_DUPLICATE",
    "DI1562_DUPLICATE",
    "DI1563_DUPLICATE",
    "DI1564_DUPLICATE",
    "DI1565_DEBUG_MENU",
    "DI1566_DUPLICATE",
    "DI1567_DEBUG_MENU",
    "DI1568_DUPLICATE",
    "DI1569_DUPLICATE",
    "DI1570_DUPLICATE",
    "DI1571_DUPLICATE",
    "DI1572_DEBUG_MENU",
    "DI1573_DUPLICATE",
    "DI1574_DEBUG_MENU",
    "DI1575_DUPLICATE",
    "DI1576_DEBUG_MENU",
    "DI1577_FLIPPED_CHEST_HINT",
    "DI1578_DUPLICATE",
    "DI1579_DUPLICATE",
    "DI1580_DUPLICATE",
    "DI1581_DUPLICATE",
    "DI1582_EMPTY",
    "DI1583_EMPTY",
    "DI1584_EMPTY",
    "DI1585_WATER_DRAINED",
    "DI1586_GOT_A_70A7_AWAIT_TERMINATE",
    "DI1587_EMPTY",
    "DI1588_EMPTY",
    "DI1589_EMPTY",
    "DI1590_EMPTY",
    "DI1591_EMPTY",
    "DI1592_EMPTY",
    "DI1593_EMPTY",
    "DI1594_EMPTY",
    "DI1595_ROSE_WAY_PLATFORM_TIP",
    "DI1596_DUPLICATE",
    "DI1597_DUPLICATE",
    "DI1598_DUPLICATE",
    "DI1599_DUPLICATE",
    "DI1600_EMPTY",
    "DI1601_EMPTY",
    "DI1602_EMPTY",
    "DI1603_EMPTY",
    "DI1604_EMPTY",
    "DI1605_EMPTY",
    "DI1606_EMPTY",
    "DI1607_MOLEVILLE_BLUES_START",
    "DI1608_MOLEVILLE_BLUES_1",
    "DI1609_MOLEVILLE_BLUES_2",
    "DI1610_MOLEVILLE_BLUES_3",
    "DI1611_MOLEVILLE_BLUES_4",
    "DI1612_MOLEVILLE_BLUES_5",
    "DI1613_MOLEVILLE_BLUES_6",
    "DI1614_MOLEVILLE_BLUES_7",
    "DI1615_MOLEVILLE_BLUES_8",
    "DI1616_EMPTY",
    "DI1617_EMPTY",
    "DI1618_EMPTY",
    "DI1619_EMPTY",
    "DI1620_EMPTY",
    "DI1621_EMPTY",
    "DI1622_EMPTY",
    "DI1623_EMPTY",
    "DI1624_EMPTY",
    "DI1625_EMPTY",
    "DI1626_EMPTY",
    "DI1627_EMPTY",
    "DI1628_EMPTY",
    "DI1629_EMPTY",
    "DI1630_EMPTY",
    "DI1631_MOUNTAIN_ENTRANCE_GUYS",
    "DI1632_PA_MOLE_NEEDS_BOMB",
    "DI1633_EMPTY",
    "DI1634_EMPTY",
    "DI1635_EMPTY",
    "DI1636_EMPTY",
    "DI1637_EMPTY",
    "DI1638_PA_MOLE_STUCK_AFTER_BOMB",
    "DI1639_EMPTY",
    "DI1640_EMPTY",
    "DI1641_EMPTY",
    "DI1642_EMPTY",
    "DI1643_EMPTY",
    "DI1644_EMPTY",
    "DI1645_EMPTY",
    "DI1646_PA_MOLE_JUMP_ON_HEAD",
    "DI1647_EMPTY",
    "DI1648_EMPTY",
    "DI1649_EMPTY",
    "DI1650_MINECART_INSTRUCTIONS",
    "DI1651_MINECART_INSTRUCTIONS_EXTENDED",
    "DI1652_PA_MOLE_AFTER_MINES_CLEARED",
    "DI1653_EMPTY",
    "DI1654_EMPTY",
    "DI1655_EMPTY",
    "DI1656_SLEEPING_DRY_BONES",
    "DI1657_3D_MAZE_OVERLAY",
    "DI1658_3D_MAZE_GIVE_UP_PROMPT",
    "DI1659_SHIP_PASSWORD_INSTRUCTIONS",
    "DI1660_SHIP_PASSWORD_COMPLETE",
    "DI1661_BLUE_GUY_IN_MINES",
    "DI1662_DUPLICATE",
    "DI1663_DUPLICATE",
    "DI1664_TROOPA_PUZZLE_HINT",
    "DI1665_TRAMPOLINE_PUZZLE_HINT",
    "DI1666_MAZE_PUZZLE_HINT",
    "DI1667_SNAKE_PUZZLE_HINT",
    "DI1668_CANNONBALL_PUZZLE_HINT",
    "DI1669_BARREL_PUZZLE_HINT",
    "DI1670_EMPTY",
    "DI1671_DUPLICATE",
    "DI1672_DUPLICATE",
    "DI1673_SHIP_ENTRANCE_NOTE",
    "DI1674_SHIP_SAVEROOM_NOTE",
    "DI1675_SHIP_GREAPER_1_NOTE",
    "DI1676_SHIP_GREAPER_2_NOTE",
    "DI1677_EMPTY",
    "DI1678_DUPLICATE",
    "DI1679_DUPLICATE",
    "DI1680_DUPLICATE",
    "DI1681_EMPTY",
    "DI1682_EMPTY",
    "DI1683_EMPTY",
    "DI1684_EMPTY",
    "DI1685_EMPTY",
    "DI1686_SHAMAN_PASSWORD_WRONG",
    "DI1687_SHAMAN_PASSWORD_RIGHT",
    "DI1688_PASSWORD_ENTRY_INSTRUCTIONS",
    "DI1689_EMPTY",
    "DI1690_SEA_SHOPKEEPER_HINT",
    "DI1691_SHAMAN_PASSWORD_PROGRESS",
    "DI1692_EMPTY",
    "DI1693_EMPTY",
    "DI1694_FINAL_SHIP_HENCHMEN_DEFEATED",
    "DI1695_FINAL_SHIP_HENCHMEN_AFTER_BOSS_DEFEATED",
    "DI1696_PASSWORD_BOX_1_1",
    "DI1697_PASSWORD_BOX_1_2",
    "DI1698_PASSWORD_BOX_1_3",
    "DI1699_PASSWORD_BOX_1_4",
    "DI1700_PASSWORD_BOX_1_5",
    "DI1701_PASSWORD_LETTER_1_1",
    "DI1702_PASSWORD_LETTER_1_2",
    "DI1703_PASSWORD_LETTER_1_3",
    "DI1704_PASSWORD_LETTER_1_4",
    "DI1705_PASSWORD_LETTER_1_5",
    "DI1706_MY_PASSWORD_IS",
    "DI1707_EMPTY",
    "DI1708_PASSWORD_BOX_2_1",
    "DI1709_PASSWORD_BOX_2_2",
    "DI1710_PASSWORD_BOX_2_3",
    "DI1711_PASSWORD_BOX_2_4",
    "DI1712_PASSWORD_BOX_2_5",
    "DI1713_PASSWORD_LETTER_2_1",
    "DI1714_PASSWORD_LETTER_2_2",
    "DI1715_PASSWORD_LETTER_2_3",
    "DI1716_PASSWORD_LETTER_2_4",
    "DI1717_PASSWORD_LETTER_2_5",
    "DI1718_PASSWORD_BOX_3_1",
    "DI1719_DUPLICATE",
    "DI1720_DUPLICATE",
    "DI1721_PASSWORD_BOX_3_2",
    "DI1722_PASSWORD_BOX_3_3",
    "DI1723_PASSWORD_BOX_3_4",
    "DI1724_PASSWORD_BOX_3_5",
    "DI1725_PASSWORD_LETTER_3_1",
    "DI1726_PASSWORD_LETTER_3_2",
    "DI1727_PASSWORD_LETTER_3_3",
    "DI1728_PASSWORD_LETTER_3_4",
    "DI1729_PASSWORD_LETTER_3_5",
    "DI1730_PASSWORD_BOX_4_1",
    "DI1731_DUPLICATE",
    "DI1732_DUPLICATE",
    "DI1733_PASSWORD_BOX_4_2",
    "DI1734_PASSWORD_BOX_4_3",
    "DI1735_PASSWORD_BOX_4_4",
    "DI1736_PASSWORD_BOX_4_5",
    "DI1737_PASSWORD_LETTER_4_1",
    "DI1738_PASSWORD_LETTER_4_2",
    "DI1739_PASSWORD_LETTER_4_3",
    "DI1740_PASSWORD_LETTER_4_4",
    "DI1741_PASSWORD_LETTER_4_5",
    "DI1742_PASSWORD_BOX_5_1",
    "DI1743_DUPLICATE",
    "DI1744_DUPLICATE",
    "DI1745_PASSWORD_BOX_5_2",
    "DI1746_PASSWORD_BOX_5_3",
    "DI1747_PASSWORD_BOX_5_4",
    "DI1748_PASSWORD_BOX_5_5",
    "DI1749_PASSWORD_LETTER_5_1",
    "DI1750_PASSWORD_LETTER_5_2",
    "DI1751_PASSWORD_LETTER_5_3",
    "DI1752_PASSWORD_LETTER_5_4",
    "DI1753_PASSWORD_LETTER_5_5",
    "DI1754_PASSWORD_BOX_6_1",
    "DI1755_DUPLICATE",
    "DI1756_DUPLICATE",
    "DI1757_PASSWORD_BOX_6_2",
    "DI1758_PASSWORD_BOX_6_3",
    "DI1759_PASSWORD_BOX_6_4",
    "DI1760_PASSWORD_BOX_6_5",
    "DI1761_PASSWORD_LETTER_6_1",
    "DI1762_PASSWORD_LETTER_6_2",
    "DI1763_PASSWORD_LETTER_6_3",
    "DI1764_PASSWORD_LETTER_6_4",
    "DI1765_PASSWORD_LETTER_6_5",
    "DI1766_EMPTY",
    "DI1767_DUPLICATE",
    "DI1768_DUPLICATE",
    "DI1769_EMPTY",
    "DI1770_EMPTY",
    "DI1771_EMPTY",
    "DI1772_EMPTY",
    "DI1773_EMPTY",
    "DI1774_EMPTY",
    "DI1775_EMPTY",
    "DI1776_EMPTY",
    "DI1777_EMPTY",
    "DI1778_SHIP_BOSS_AFTER_DEFEAT_BEFORE_LEAVING",
    "DI1779_SHIP_BOSS_AFTER_DEFEAT_MUCH_LATER",
    "DI1780_DUPLICATE",
    "DI1781_SHIP_BOSS_JUMP_ON_HEAD",
    "DI1782_SHIP_BOSS_DRINK",
    "DI1783_DUPLICATE",
    "DI1784_SHIP_BOSS_SIDEKICK_IN_ROOM_2",
    "DI1785_SHIP_BOSS_SIDEKICK_IN_ROOM_1",
    "DI1786_LETTER_FROM_SHIP_BOSS",
    "DI1787_DUPLICATE",
    "DI1788_EMPTY",
    "DI1789_EMPTY",
    "DI1790_EMPTY",
    "DI1791_EMPTY",
    "DI1792_SHIP_BOSS_SIDEKICK_IN_ROOM_3",
    "DI1793_SHIP_BOSS_SIDEKICK_IN_ROOM_4",
    "DI1794_EMPTY",
    "DI1795_DUPLICATE",
    "DI1796_DUPLICATE",
    "DI1797_DUPLICATE",
    "DI1798_DUPLICATE",
    "DI1799_DUPLICATE",
    "DI1800_DUPLICATE",
    "DI1801_DUPLICATE",
    "DI1802_DUPLICATE",
    "DI1803_DUPLICATE",
    "DI1804_DUPLICATE",
    "DI1805_DUPLICATE",
    "DI1806_DUPLICATE",
    "DI1807_DUPLICATE",
    "DI1808_DUPLICATE",
    "DI1809_EMPTY",
    "DI1810_EMPTY",
    "DI1811_EMPTY",
    "DI1812_EMPTY",
    "DI1813_EMPTY",
    "DI1814_DUPLICATE",
    "DI1815_EMPTY",
    "DI1816_EMPTY",
    "DI1817_EMPTY",
    "DI1818_EMPTY",
    "DI1819_EMPTY",
    "DI1820_EMPTY",
    "DI1821_DUPLICATE",
    "DI1822_DUPLICATE",
    "DI1823_DUPLICATE",
    "DI1824_DUPLICATE",
    "DI1825_EMPTY",
    "DI1826_EMPTY",
    "DI1827_EMPTY",
    "DI1828_EMPTY",
    "DI1829_EMPTY",
    "DI1830_EMPTY",
    "DI1831_EMPTY",
    "DI1832_EMPTY",
    "DI1833_EMPTY",
    "DI1834_DUPLICATE",
    "DI1835_DUPLICATE",
    "DI1836_DUPLICATE",
    "DI1837_DUPLICATE",
    "DI1838_DUPLICATE",
    "DI1839_DUPLICATE",
    "DI1840_EMPTY",
    "DI1841_EMPTY",
    "DI1842_QUIZ_QUESTION_1",
    "DI1843_QUIZ_QUESTION_2",
    "DI1844_QUIZ_QUESTION_3",
    "DI1845_QUIZ_QUESTION_4",
    "DI1846_QUIZ_QUESTION_5",
    "DI1847_QUIZ_QUESTION_6",
    "DI1848_QUIZ_QUESTION_7",
    "DI1849_QUIZ_QUESTION_8",
    "DI1850_QUIZ_QUESTION_9",
    "DI1851_QUIZ_QUESTION_10",
    "DI1852_QUIZ_QUESTION_11",
    "DI1853_QUIZ_QUESTION_12",
    "DI1854_QUIZ_QUESTION_13",
    "DI1855_QUIZ_QUESTION_14",
    "DI1856_QUIZ_QUESTION_15",
    "DI1857_QUIZ_QUESTION_16",
    "DI1858_QUIZ_QUESTION_17",
    "DI1859_QUIZ_QUESTION_18",
    "DI1860_QUIZ_QUESTION_19",
    "DI1861_QUIZ_QUESTION_20",
    "DI1862_QUIZ_QUESTION_21",
    "DI1863_QUIZ_QUESTION_22",
    "DI1864_QUIZ_QUESTION_23",
    "DI1865_QUIZ_QUESTION_24",
    "DI1866_QUIZ_QUESTION_25",
    "DI1867_QUIZ_QUESTION_26",
    "DI1868_QUIZ_QUESTION_27",
    "DI1869_QUIZ_QUESTION_28",
    "DI1870_QUIZ_QUESTION_29",
    "DI1871_QUIZ_QUESTION_30",
    "DI1872_QUIZ_QUESTION_31",
    "DI1873_QUIZ_QUESTION_32",
    "DI1874_QUIZ_QUESTION_33",
    "DI1875_QUIZ_QUESTION_34",
    "DI1876_QUIZ_QUESTION_35",
    "DI1877_QUIZ_QUESTION_36",
    "DI1878_QUIZ_QUESTION_37",
    "DI1879_QUIZ_QUESTION_38",
    "DI1880_QUIZ_QUESTION_39",
    "DI1881_QUIZ_QUESTION_40",
    "DI1882_QUIZ_PASSED",
    "DI1883_DUPLICATE",
    "DI1884_DUPLICATE",
    "DI1885_DUPLICATE",
    "DI1886_DUPLICATE",
    "DI1887_QUIZ_FAILED",
    "DI1888_BARREL_COUNT_1_START",
    "DI1889_EMPTY",
    "DI1890_EMPTY",
    "DI1891_X_SECONDS_LEFT",
    "DI1892_PROMPT_FOR_BARREL_ANSWER",
    "DI1893_DUPLICATE",
    "DI1894_EMPTY",
    "DI1895_EMPTY",
    "DI1896_BARREL_COUNT_2_START",
    "DI1897_EMPTY",
    "DI1898_EMPTY",
    "DI1899_DUPLICATE",
    "DI1900_DUPLICATE",
    "DI1901_DUPLICATE",
    "DI1902_DUPLICATE",
    "DI1903_DUPLICATE",
    "DI1904_DUPLICATE",
    "DI1905_EMPTY",
    "DI1906_COIN_GAME_LOSE",
    "DI1907_DUPLICATE",
    "DI1908_EMPTY",
    "DI1909_EMPTY",
    "DI1910_EMPTY",
    "DI1911_MINIGAME_WIN",
    "DI1912_EMPTY",
    "DI1913_EMPTY",
    "DI1914_EMPTY",
    "DI1915_MINIGAME_LOSE",
    "DI1916_EMPTY",
    "DI1917_DUPLICATE",
    "DI1918_DUPLICATE",
    "DI1919_DUPLICATE",
    "DI1920_DUPLICATE",
    "DI1921_BOO",
    "DI1922_GOO",
    "DI1923_BONES",
    "DI1924_KIPP",
    "DI1925_EMPTY_AUTO_TERMINATE",
    "DI1926_MARATHON_3RD_PLACE",
    "DI1927_MARATHON_2ND_PLACE",
    "DI1928_MARATHON_1ST_PLACE",
    "DI1929_MARATHON_1ST_PLACE",
    "DI1930_MARATHON_1ST_PLACE",
    "DI1931_MARATHON_4TH_PLACE",
    "DI1932_MARATHON_PROMPT_TO_ENTER",
    "DI1933_MARATHON_PHASE_2_BEGIN",
    "DI1934_MARATHON_CONFIRM_PLACEMENT",
    "DI1935_MARATHON_CONFIRM_ORDER",
    "DI1936_MARATHON_CONFIRM_ORDER",
    "DI1937_MARATHON_CONFIRM_ORDER",
    "DI1938_EMPTY",
    "DI1939_MARATHON_FAIL",
    "DI1940_MARATHON_SUCCESS",
    "DI1941_NEED_ROOM_KEY",
    "DI1942_DUPLICATE",
    "DI1943_DUPLICATE",
    "DI1944_DUPLICATE",
    "DI1945_NEED_ELDER_KEY",
    "DI1946_EMPTY",
    "DI1947_EMPTY",
    "DI1948_EMPTY",
    "DI1949_EMPTY",
    "DI1950_PERISCOPE_1",
    "DI1951_DUPLICATE",
    "DI1952_DUPLICATE",
    "DI1953_PERISCOPE_2",
    "DI1954_PERISCOPE_3",
    "DI1955_PERISCOPE_4",
    "DI1956_PERISCOPE_5",
    "DI1957_PERISCOPE_6",
    "DI1958_PERISCOPE_7",
    "DI1959_PERISCOPE_PARTIAL",
    "DI1960_DUPLICATE",
    "DI1961_DUPLICATE",
    "DI1962_DUPLICATE",
    "DI1963_DUPLICATE",
    "DI1964_DUPLICATE",
    "DI1965_DUPLICATE",
    "DI1966_DUPLICATE",
    "DI1967_DUPLICATE",
    "DI1968_DUPLICATE",
    "DI1969_DUPLICATE",
    "DI1970_DUPLICATE",
    "DI1971_DUPLICATE",
    "DI1972_DUPLICATE",
    "DI1973_DUPLICATE",
    "DI1974_DUPLICATE",
    "DI1975_DUPLICATE",
    "DI1976_DUPLICATE",
    "DI1977_DUPLICATE",
    "DI1978_DUPLICATE",
    "DI1979_DUPLICATE",
    "DI1980_DUPLICATE",
    "DI1981_DUPLICATE",
    "DI1982_DUPLICATE",
    "DI1983_DUPLICATE",
    "DI1984_DUPLICATE",
    "DI1985_DUPLICATE",
    "DI1986_DUPLICATE",
    "DI1987_DUPLICATE",
    "DI1988_DUPLICATE",
    "DI1989_DUPLICATE",
    "DI1990_DUPLICATE",
    "DI1991_DUPLICATE",
    "DI1992_DUPLICATE",
    "DI1993_DUPLICATE",
    "DI1994_DUPLICATE",
    "DI1995_DUPLICATE",
    "DI1996_DUPLICATE",
    "DI1997_DUPLICATE",
    "DI1998_DUPLICATE",
    "DI1999_DUPLICATE",
    "DI2000_DUPLICATE",
    "DI2001_DUPLICATE",
    "DI2002_DUPLICATE",
    "DI2003_DUPLICATE",
    "DI2004_DUPLICATE",
    "DI2005_DUPLICATE",
    "DI2006_DUPLICATE",
    "DI2007_DUPLICATE",
    "DI2008_DUPLICATE",
    "DI2009_DUPLICATE",
    "DI2010_DUPLICATE",
    "DI2011_DUPLICATE",
    "DI2012_DUPLICATE",
    "DI2013_DUPLICATE",
    "DI2014_DUPLICATE",
    "DI2015_DUPLICATE",
    "DI2016_DUPLICATE",
    "DI2017_DUPLICATE",
    "DI2018_DUPLICATE",
    "DI2019_DUPLICATE",
    "DI2020_DUPLICATE",
    "DI2021_DUPLICATE",
    "DI2022_DUPLICATE",
    "DI2023_DUPLICATE",
    "DI2024_DUPLICATE",
    "DI2025_DUPLICATE",
    "DI2026_DUPLICATE",
    "DI2027_DUPLICATE",
    "DI2028_DUPLICATE",
    "DI2029_DUPLICATE",
    "DI2030_DUPLICATE",
    "DI2031_DUPLICATE",
    "DI2032_DUPLICATE",
    "DI2033_DUPLICATE",
    "DI2034_DUPLICATE",
    "DI2035_DUPLICATE",
    "DI2036_DUPLICATE",
    "DI2037_DUPLICATE",
    "DI2038_DUPLICATE",
    "DI2039_DUPLICATE",
    "DI2040_DUPLICATE",
    "DI2041_DUPLICATE",
    "DI2042_DUPLICATE",
    "DI2043_DUPLICATE",
    "DI2044_DUPLICATE",
    "DI2045_DUPLICATE",
    "DI2046_DUPLICATE",
    "DI2047_DUPLICATE",
    "DI2048_HOTEL_GUEST_LEAVING",
    "DI2049_NO_SUPER_JUMPING",
    "DI2050_EMPTY",
    "DI2051_EMPTY",
    "DI2052_EMPTY",
    "DI2053_EMPTY",
    "DI2054_PROMPT_TO_SELL_BRIGHT_CARD",
    "DI2055_HOTEL_TIP_HINT",
    "DI2056_HOTEL_TIP_HINT",
    "DI2057_BRIGHT_CARD_SALE_HINT",
    "DI2058_EMPTY",
    "DI2059_EMPTY",
    "DI2060_EMPTY",
    "DI2061_HEAD_CHEF",
    "DI2062_APPRENTICE_CHEF",
    "DI2063_MARRYMORE_LOCKED_DOOR",
    "DI2064_EMPTY",
    "DI2065_EMPTY",
    "DI2066_EMPTY",
    "DI2067_EMPTY",
    "DI2068_EMPTY",
    "DI2069_EMPTY",
    "DI2070_EMPTY",
    "DI2071_EMPTY",
    "DI2072_EMPTY",
    "DI2073_EMPTY",
    "DI2074_EMPTY",
    "DI2075_EMPTY",
    "DI2076_EMPTY",
    "DI2077_BRIGHT_CARD_BUYER",
    "DI2078_EMPTY",
    "DI2079_EMPTY",
    "DI2080_EMPTY",
    "DI2081_EMPTY",
    "DI2082_EMPTY",
    "DI2083_EMPTY",
    "DI2084_EMPTY",
    "DI2085_EMPTY",
    "DI2086_EMPTY",
    "DI2087_EMPTY",
    "DI2088_EMPTY",
    "DI2089_EMPTY",
    "DI2090_EMPTY",
    "DI2091_EMPTY",
    "DI2092_EMPTY",
    "DI2093_EMPTY",
    "DI2094_EMPTY",
    "DI2095_GOT_BROOCH",
    "DI2096_GOT_SHOES",
    "DI2097_GOT_RING",
    "DI2098_GOT_CROWN",
    "DI2099_EMPTY",
    "DI2100_EMPTY",
    "DI2101_EMPTY",
    "DI2102_EMPTY",
    "DI2103_EMPTY",
    "DI2104_EMPTY",
    "DI2105_SIGNAL_RING_STAR_PIECE_HINT",
    "DI2106_EMPTY",
    "DI2107_MARRYMORE_TOADOFSKY_HINT",
    "DI2108_BRIGHT_CARD_HAGGLE",
    "DI2109_RAZ_OUTSIDE",
    "DI2110_RAINI_OUTSIDE",
    "DI2111_BELLHOP_IN_CHAPEL",
    "DI2112_RAZ_OCCUPIED",
    "DI2113_RAINI_OCCUPIED",
    "DI2114_MARRYMORE_BOSS_NAMES",
    "DI2115_MARRYMORE_SHITPOST",
    "DI2116_UNUSED",
    "DI2117_MARRYMORE_SHITPOST",
    "DI2118_MARRYMORE_SHITPOST",
    "DI2119_MARRYMORE_SHITPOST",
    "DI2120_SHAKING_TOAD",
    "DI2121_MARRYMORE_FIELD_NPC",
    "DI2122_EMPTY",
    "DI2123_EMPTY",
    "DI2124_EMPTY",
    "DI2125_EMPTY",
    "DI2126_EMPTY",
    "DI2127_EMPTY",
    "DI2128_EMPTY",
    "DI2129_EMPTY",
    "DI2130_EMPTY",
    "DI2131_EMPTY",
    "DI2132_EMPTY",
    "DI2133_EMPTY",
    "DI2134_EMPTY",
    "DI2135_EMPTY",
    "DI2136_EMPTY",
    "DI2137_EMPTY",
    "DI2138_EMPTY",
    "DI2139_EMPTY",
    "DI2140_EMPTY",
    "DI2141_EMPTY",
    "DI2142_EMPTY",
    "DI2143_EMPTY",
    "DI2144_EMPTY",
    "DI2145_EMPTY",
    "DI2146_EMPTY",
    "DI2147_EMPTY",
    "DI2148_EMPTY",
    "DI2149_EMPTY",
    "DI2150_EMPTY",
    "DI2151_EMPTY",
    "DI2152_EMPTY",
    "DI2153_EMPTY",
    "DI2154_EMPTY",
    "DI2155_EMPTY",
    "DI2156_EMPTY",
    "DI2157_ROOM_SERVICE_HINT",
    "DI2158_MARRYMORE_FIELD_NPC",
    "DI2159_MARRYMORE_FIELD_NPC",
    "DI2160_MARRYMORE_FIELD_NPC",
    "DI2161_EMPTY",
    "DI2162_EMPTY",
    "DI2163_MARRYMORE_PHOTO_NPC",
    "DI2164_MARRYMORE_PHOTO",
    "DI2165_MARRYMORE_PHOTO",
    "DI2166_EMPTY",
    "DI2167_EMPTY",
    "DI2168_EMPTY",
    "DI2169_EMPTY",
    "DI2170_EMPTY",
    "DI2171_DUPLICATE",
    "DI2172_CHAPEL_NPC",
    "DI2173_EMPTY",
    "DI2174_EMPTY",
    "DI2175_EMPTY",
    "DI2176_EMPTY",
    "DI2177_I_DO",
    "DI2178_CHAPEL_NPC",
    "DI2179_CHAPEL_NPC",
    "DI2180_CHAPEL_NPC",
    "DI2181_EMPTY",
    "DI2182_CHAPEL_NPC",
    "DI2183_TOWER_KNIFE_GUY_REMINDER",
    "DI2184_JUMP_ON_ORGAN",
    "DI2185_EMPTY",
    "DI2186_EMPTY",
    "DI2187_EMPTY",
    "DI2188_EMPTY",
    "DI2189_EMPTY",
    "DI2190_EMPTY",
    "DI2191_EMPTY",
    "DI2192_EMPTY",
    "DI2193_MARRYMORE_PHOTO",
    "DI2194_MARRYMORE_PHOTO",
    "DI2195_SUITE_PRIZE_HINT",
    "DI2196_HOTEL_TIP_HINT",
    "DI2197_MARRYMORE_PHOTO",
    "DI2198_MARRYMORE_PHOTO",
    "DI2199_MARRYMORE_PHOTO",
    "DI2200_MARRYMORE_PHOTO",
    "DI2201_EMPTY",
    "DI2202_MARRYMORE_PHOTO",
    "DI2203_EMPTY",
    "DI2204_EMPTY",
    "DI2205_EMPTY",
    "DI2206_EMPTY",
    "DI2207_EMPTY",
    "DI2208_EMPTY",
    "DI2209_EMPTY",
    "DI2210_EMPTY",
    "DI2211_EMPTY",
    "DI2212_EMPTY",
    "DI2213_EMPTY",
    "DI2214_EMPTY",
    "DI2215_EMPTY",
    "DI2216_EMPTY",
    "DI2217_EMPTY",
    "DI2218_EMPTY",
    "DI2219_EMPTY",
    "DI2220_EMPTY",
    "DI2221_EMPTY",
    "DI2222_EMPTY",
    "DI2223_EMPTY",
    "DI2224_TOAD_GUARD",
    "DI2225_EMPTY",
    "DI2226_EMPTY",
    "DI2227_EMPTY",
    "DI2228_EMPTY",
    "DI2229_EMPTY",
    "DI2230_TOAD_GUARD",
    "DI2231_WALLET_GUY_LATER_REWARD",
    "DI2232_EMPTY",
    "DI2233_EMPTY",
    "DI2234_EMPTY",
    "DI2235_NO_ADVICE",
    "DI2236_EMPTY",
    "DI2237_EMPTY",
    "DI2238_EMPTY",
    "DI2239_EMPTY",
    "DI2240_EMPTY",
    "DI2241_EMPTY",
    "DI2242_TROOPA_CLIFF_HINT",
    "DI2243_EMPTY",
    "DI2244_EMPTY",
    "DI2245_EMPTY",
    "DI2246_EMPTY",
    "DI2247_EMPTY",
    "DI2248_EMPTY",
    "DI2249_EMPTY",
    "DI2250_EMPTY",
    "DI2251_EMPTY",
    "DI2252_EMPTY",
    "DI2253_EMPTY",
    "DI2254_EMPTY",
    "DI2255_MARRYMORE_SHITPOST",
    "DI2256_BANDITS_WAY_OPEN",
    "DI2257_FOREST_OPEN",
    "DI2258_PIPE_VAULT_OPEN",
    "DI2259_BOOSTER_TOWER_OPEN",
    "DI2260_MARRYMORE_OPEN",
    "DI2261_SEA_OPEN",
    "DI2262_SEASIDE_TOWN_OPEN",
    "DI2263_TEMPLE_OPEN",
    "DI2264_KEEP_OPEN",
    "DI2265_GATE_OPEN",
    "DI2266_EMPTY",
    "DI2267_MONSTRO_OPEN",
    "DI2268_VOLCANO_OPEN",
    "DI2269_MINES_OPEN",
    "DI2270_EMPTY",
    "DI2271_EMPTY",
    "DI2272_EMPTY",
    "DI2273_EMPTY",
    "DI2274_EMPTY",
    "DI2275_EMPTY",
    "DI2276_EMPTY",
    "DI2277_EMPTY",
    "DI2278_EMPTY",
    "DI2279_EMPTY",
    "DI2280_EMPTY",
    "DI2281_EMPTY",
    "DI2282_EMPTY",
    "DI2283_EMPTY",
    "DI2284_EMPTY",
    "DI2285_EMPTY",
    "DI2286_EMPTY",
    "DI2287_EMPTY",
    "DI2288_EMPTY",
    "DI2289_EMPTY",
    "DI2290_EMPTY",
    "DI2291_EMPTY",
    "DI2292_EMPTY",
    "DI2293_EMPTY",
    "DI2294_EMPTY",
    "DI2295_EMPTY",
    "DI2296_EMPTY",
    "DI2297_EMPTY",
    "DI2298_TOAD",
    "DI2299_EMPTY",
    "DI2300_TOAD_GUARD",
    "DI2301_EMPTY",
    "DI2302_EMPTY",
    "DI2303_EMPTY",
    "DI2304_EMPTY",
    "DI2305_EMPTY",
    "DI2306_EMPTY",
    "DI2307_BRIGHT_CARD_HAGGLE",
    "DI2308_BRIGHT_CARD_HAGGLE",
    "DI2309_EMPTY",
    "DI2310_EMPTY",
    "DI2311_EMPTY",
    "DI2312_EMPTY",
    "DI2313_EMPTY",
    "DI2314_EMPTY",
    "DI2315_EMPTY",
    "DI2316_EMPTY",
    "DI2317_EMPTY",
    "DI2318_TOAD_GUARD",
    "DI2319_DUPLICATE",
    "DI2320_TOADSTOOL_ROOM_HINT",
    "DI2321_EMPTY",
    "DI2322_EMPTY",
    "DI2323_EMPTY",
    "DI2324_EMPTY",
    "DI2325_EMPTY",
    "DI2326_EMPTY",
    "DI2327_MARRYMORE_NPC",
    "DI2328_RAZ_RAINI_NOTE",
    "DI2329_BRIGHT_CARD_BUY_BACK_PROMPT",
    "DI2330_EMPTY",
    "DI2331_MARRYMORE_COMPOSER",
    "DI2332_MARRYMORE_NPC",
    "DI2333_MARRYMORE_NPC",
    "DI2334_BRIGHT_CARD_BUY_BACK",
    "DI2335_BRIGHT_CARD_DECLINE_BUY_BACK",
    "DI2336_EMPTY",
    "DI2337_YOSHI_CHECKING_MAILBOX",
    "DI2338_CHECK_MAILBOX",
    "DI2339_EMPTY",
    "DI2340_EMPTY",
    "DI2341_COOKIE_KEEPER",
    "DI2342_RETRIEVE_COOKIES",
    "DI2343_COOKIE_COUNTER",
    "DI2344_COOKIE_COUNTER_NEW_PAGE",
    "DI2345_COOKIE_KEEPER_CHAT",
    "DI2346_COOKIE_KEEPER_CONFIRMATION",
    "DI2347_YOSHI_SEE_YA",
    "DI2348_COOKIE_KEEPER_CONFIRMATION",
    "DI2349_HAVE_NO_COOKIES",
    "DI2350_CANT_STORE_THAT_MANY",
    "DI2351_NO_MORE_COOKIES_TO_STORE",
    "DI2352_NO_MORE_COOKIES_TO_RETRIEVE",
    "DI2353_TOOK_OUT_REMAINDER_OF_COOKIES",
    "DI2354_TOO_MANY_ITEMS_TO_GET_COOKIES",
    "DI2355_CANT_STORE_OVER_200",
    "DI2356_RACE_BOSHI_CASUAL",
    "DI2357_BOSHI_ODDS",
    "DI2358_BOSHI_ODDS",
    "DI2359_COOKIE_BET_PROMPT",
    "DI2360_BOSHI_CHAT",
    "DI2361_BOSHI_STARTS_RACE",
    "DI2362_STORE_EXTRA_COOKIES_AFTER_WINNING",
    "DI2363_CANT_RACE_WITHOUT_COOKIES",
    "DI2364_EMPTY",
    "DI2365_PROMPT_TO_FEED_BABY_YOSHI",
    "DI2366_HOW_MANY_COOKIES_TO_FEED_BABY",
    "DI2367_EMPTY",
    "DI2368_EMPTY",
    "DI2369_STORE_MORE_COOKIES",
    "DI2370_NEED_TO_STORE_MORE_THAN_5",
    "DI2371_HOW_MANY_TO_STORE",
    "DI2372_PROMPT_TO_FEED_BABY_YOSHI",
    "DI2373_EMPTY",
    "DI2374_EMPTY",
    "DI2375_FAT_YOSHI_RESPONSE",
    "DI2376_EMPTY",
    "DI2377_EMPTY",
    "DI2378_EMPTY",
    "DI2379_EMPTY",
    "DI2380_LITTLE_SHORT",
    "DI2381_EMPTY",
    "DI2382_EMPTY",
    "DI2383_BOSHI_START_RACE",
    "DI2384_REFILLED_CHEST_HINT",
    "DI2385_NIMBUS_BOSS_2_IS_STILL_THERE",
    "DI2386_NIMBUS_NPC",
    "DI2387_NIMBUS_NPC",
    "DI2388_FERTILIZER_LOCATION_HINT",
    "DI2389_TALK_TO_NPCS_AGAIN_HINT",
    "DI2390_NIMBUS_NPC",
    "DI2391_EMPTY",
    "DI2392_EMPTY",
    "DI2393_EMPTY",
    "DI2394_EMPTY",
    "DI2395_EMPTY",
    "DI2396_EMPTY",
    "DI2397_EMPTY",
    "DI2398_EMPTY",
    "DI2399_EMPTY",
    "DI2400_EMPTY",
    "DI2401_EMPTY",
    "DI2402_EMPTY",
    "DI2403_EMPTY",
    "DI2404_EMPTY",
    "DI2405_EMPTY",
    "DI2406_EMPTY",
    "DI2407_EMPTY",
    "DI2408_EMPTY",
    "DI2409_DREAM_CUSHION_HINT",
    "DI2410_CASTLE_KEY_HINT",
    "DI2411_TALK_TO_NPCS_AGAIN_HINT",
    "DI2412_GARRO_HINT",
    "DI2413_DREAM_CUSHION_HINT",
    "DI2414_GIANT_EGG_HINT",
    "DI2415_TALK_TO_CASTLE_NPCS_HINT",
    "DI2416_NIMBUS_NPC",
    "DI2417_FERTILIZER_LOCATION_HINT",
    "DI2418_GARRO_HINT",
    "DI2419_EMPTY",
    "DI2420_EMPTY",
    "DI2421_EMPTY",
    "DI2422_EMPTY",
    "DI2423_EMPTY",
    "DI2424_EMPTY",
    "DI2425_EMPTY",
    "DI2426_EMPTY",
    "DI2427_EMPTY",
    "DI2428_EMPTY",
    "DI2429_EMPTY",
    "DI2430_EMPTY",
    "DI2431_EMPTY",
    "DI2432_EMPTY",
    "DI2433_EMPTY",
    "DI2434_EMPTY",
    "DI2435_EMPTY",
    "DI2436_EMPTY",
    "DI2437_EMPTY",
    "DI2438_EMPTY",
    "DI2439_EMPTY",
    "DI2440_EMPTY",
    "DI2441_EMPTY",
    "DI2442_DUPLICATE",
    "DI2443_EMPTY",
    "DI2444_EMPTY",
    "DI2445_EMPTY",
    "DI2446_EMPTY",
    "DI2447_EMPTY",
    "DI2448_EMPTY",
    "DI2449_EMPTY",
    "DI2450_EMPTY",
    "DI2451_EMPTY",
    "DI2452_EMPTY",
    "DI2453_EMPTY",
    "DI2454_EMPTY",
    "DI2455_EMPTY",
    "DI2456_EMPTY",
    "DI2457_EMPTY",
    "DI2458_EMPTY",
    "DI2459_EMPTY",
    "DI2460_EMPTY",
    "DI2461_EMPTY",
    "DI2462_EMPTY",
    "DI2463_EMPTY",
    "DI2464_EMPTY",
    "DI2465_EMPTY",
    "DI2466_EMPTY",
    "DI2467_GARRO_HINT",
    "DI2468_BRIGHT_CARD_BUYER",
    "DI2469_BRIGHT_CARD_BUYER",
    "DI2470_MARRYMORE_HOTEL_MENU",
    "DI2471_MARRYMORE_HOTEL_ROOM_CHOICE_1ST_TIME",
    "DI2472_CHOSE_SUITE_1ST_TIME",
    "DI2473_STAYED_X_TIMES_IN_SUITE",
    "DI2474_NIMBUS_NPC",
    "DI2475_CANT_AFFORD_MARRYMORE_HOTEL",
    "DI2476_EMPTY",
    "DI2477_MARRYMORE_SUITE_PRIZE_GRANT_REPEAT",
    "DI2478_LOST_ALL_COINS_AND_FROG_COINS",
    "DI2479_100_COINS_FOR_EVERY_EXTRA_DAY",
    "DI2480_CANT_AFFORD_HOTEL_DEBT",
    "DI2481_EMPTY",
    "DI2482_EMPTY",
    "DI2483_EMPTY",
    "DI2484_EMPTY",
    "DI2485_EMPTY",
    "DI2486_EMPTY",
    "DI2487_EMPTY",
    "DI2488_EMPTY",
    "DI2489_EMPTY",
    "DI2490_EMPTY",
    "DI2491_EMPTY",
    "DI2492_EMPTY",
    "DI2493_EMPTY",
    "DI2494_EMPTY",
    "DI2495_EMPTY",
    "DI2496_WHERES_THE_CROWN",
    "DI2497_EMPTY",
    "DI2498_EMPTY",
    "DI2499_EMPTY",
    "DI2500_EMPTY",
    "DI2501_EMPTY",
    "DI2502_EMPTY",
    "DI2503_NEED_X_MORE_ITEMS_MARRYMORE",
    "DI2504_DUPLICATE",
    "DI2505_EMPTY",
    "DI2506_CASINO_SECRET_HINT",
    "DI2507_EMPTY",
    "DI2508_MARRYMORE_HOTEL_ROOM_CHOICE",
    "DI2509_100_COINS_FOR_EVERY_EXTRA_DAY",
    "DI2510_WON_COOKIES_IN_EXCESS",
    "DI2511_EMPTY",
    "DI2512_EMPTY",
    "DI2513_EMPTY",
    "DI2514_EMPTY",
    "DI2515_EMPTY",
    "DI2516_EMPTY",
    "DI2517_EMPTY",
    "DI2518_EMPTY",
    "DI2519_EMPTY",
    "DI2520_EMPTY",
    "DI2521_EMPTY",
    "DI2522_EMPTY",
    "DI2523_EMPTY",
    "DI2524_EMPTY",
    "DI2525_EMPTY",
    "DI2526_EMPTY",
    "DI2527_DUPLICATE",
    "DI2528_DUPLICATE",
    "DI2529_EMPTY",
    "DI2530_EMPTY",
    "DI2531_EMPTY",
    "DI2532_EMPTY",
    "DI2533_CASINO_LEAFLET",
    "DI2534_CASINO_LEAFLET",
    "DI2535_EMPTY",
    "DI2536_EMPTY",
    "DI2537_EMPTY",
    "DI2538_MARRYMORE_INNKEEPER_WHILE_WORKING",
    "DI2539_EMPTY",
    "DI2540_DUPLICATE",
    "DI2541_GOOMBA_THUMPIN_PROMPT",
    "DI2542_GOOMBA_THUMPIN_RULES_PROMPT",
    "DI2543_GOOMBA_THUMPIN_RULES",
    "DI2544_EMPTY",
    "DI2545_EMPTY",
    "DI2546_EMPTY",
    "DI2547_EMPTY",
    "DI2548_EMPTY",
    "DI2549_EMPTY",
    "DI2550_WHICH_HAND",
    "DI2551_EMPTY",
    "DI2552_EMPTY",
    "DI2553_EMPTY",
    "DI2554_EMPTY",
    "DI2555_EMPTY",
    "DI2556_EMPTY",
    "DI2557_EMPTY",
    "DI2558_EMPTY",
    "DI2559_EMPTY",
    "DI2560_TOWER_HENCHMAN_1",
    "DI2561_PORTRAIT_1",
    "DI2562_PORTRAIT_2",
    "DI2563_PORTRAIT_3",
    "DI2564_PORTRAIT_4",
    "DI2565_PORTRAIT_5",
    "DI2566_PORTRAIT_6",
    "DI2567_EMPTY",
    "DI2568_EMPTY",
    "DI2569_EMPTY",
    "DI2570_EMPTY",
    "DI2571_TOWER_AWAITING_SPOUSE",
    "DI2572_TOWER_HENCHMAN_2",
    "DI2573_EMPTY",
    "DI2574_EMPTY",
    "DI2575_DUPLICATE",
    "DI2576_VOLCANO_INN",
    "DI2577_EMPTY",
    "DI2578_VOLCANO_INN_INSUFFICIENT_COINS",
    "DI2579_EMPTY",
    "DI2580_EMPTY",
    "DI2581_EMPTY",
    "DI2582_TOADOFSKY_UNUSED",
    "DI2583_EMPTY",
    "DI2584_DUPLICATE",
    "DI2585_DUPLICATE",
    "DI2586_DUPLICATE",
    "DI2587_DUPLICATE",
    "DI2588_DUPLICATE",
    "DI2589_DUPLICATE",
    "DI2590_DUPLICATE",
    "DI2591_DUPLICATE",
    "DI2592_DUPLICATE",
    "DI2593_DUPLICATE",
    "DI2594_DUPLICATE",
    "DI2595_DUPLICATE",
    "DI2596_DUPLICATE",
    "DI2597_DUPLICATE",
    "DI2598_DUPLICATE",
    "DI2599_DUPLICATE",
    "DI2600_DUPLICATE",
    "DI2601_DUPLICATE",
    "DI2602_DUPLICATE",
    "DI2603_DUPLICATE",
    "DI2604_DUPLICATE",
    "DI2605_DUPLICATE",
    "DI2606_DUPLICATE",
    "DI2607_DUPLICATE",
    "DI2608_DUPLICATE",
    "DI2609_DUPLICATE",
    "DI2610_DUPLICATE",
    "DI2611_DUPLICATE",
    "DI2612_DUPLICATE",
    "DI2613_DUPLICATE",
    "DI2614_DUPLICATE",
    "DI2615_DUPLICATE",
    "DI2616_DUPLICATE",
    "DI2617_DUPLICATE",
    "DI2618_DUPLICATE",
    "DI2619_DUPLICATE",
    "DI2620_DUPLICATE",
    "DI2621_DUPLICATE",
    "DI2622_DUPLICATE",
    "DI2623_DUPLICATE",
    "DI2624_DUPLICATE",
    "DI2625_EMPTY",
    "DI2626_EMPTY",
    "DI2627_SUPERJUMP_RECORD",
    "DI2628_SUPERJUMP_CHALLENGE",
    "DI2629_SUPER_JUMP_PRIZE_1",
    "DI2630_EMPTY",
    "DI2631_SUPER_JUMP_PRIZE_2",
    "DI2632_DOG_OUT_OF_PRIZES",
    "DI2633_EMPTY",
    "DI2634_EMPTY",
    "DI2635_EMPTY",
    "DI2636_MIMICS_HINT",
    "DI2637_EMPTY",
    "DI2638_DUPLICATE",
    "DI2639_DUPLICATE",
    "DI2640_DUPLICATE",
    "DI2641_DUPLICATE",
    "DI2642_DUPLICATE",
    "DI2643_DUPLICATE",
    "DI2644_DUPLICATE",
    "DI2645_DUPLICATE",
    "DI2646_DUPLICATE",
    "DI2647_DUPLICATE",
    "DI2648_DUPLICATE",
    "DI2649_DUPLICATE",
    "DI2650_DUPLICATE",
    "DI2651_DUPLICATE",
    "DI2652_DUPLICATE",
    "DI2653_DUPLICATE",
    "DI2654_DUPLICATE",
    "DI2655_EMPTY",
    "DI2656_EMPTY",
    "DI2657_EMPTY",
    "DI2658_EMPTY",
    "DI2659_EMPTY",
    "DI2660_TADPOLE_PROMPTS_YOU_TO_FIND_2ND_SONG",
    "DI2661_EMPTY",
    "DI2662_TADPOLE_PROMPTS_YOU_TO_FIND_3RD_SONG",
    "DI2663_TADPOLE_FAVOURITE_SONG",
    "DI2664_TADPOLE_SONG_1_HINT",
    "DI2665_TADPOLE_SONG_2_HINT",
    "DI2666_EMPTY",
    "DI2667_EMPTY",
    "DI2668_TADPOLE_SONG_3_HINT",
    "DI2669_EMPTY",
    "DI2670_EMPTY",
    "DI2671_EMPTY",
    "DI2672_EMPTY",
    "DI2673_TADPOLE_SONG_3_HINT_END",
    "DI2674_TADPOLE_AFTER_FINAL_SONG",
    "DI2675_EMPTY",
    "DI2676_EMPTY",
    "DI2677_DUPLICATE",
    "DI2678_DUPLICATE",
    "DI2679_DUPLICATE",
    "DI2680_EMPTY",
    "DI2681_EMPTY",
    "DI2682_EMPTY",
    "DI2683_EMPTY",
    "DI2684_EMPTY",
    "DI2685_EMPTY",
    "DI2686_EMPTY",
    "DI2687_EMPTY",
    "DI2688_EMPTY",
    "DI2689_DUPLICATE",
    "DI2690_EMPTY",
    "DI2691_EMPTY",
    "DI2692_EMPTY",
    "DI2693_EMPTY",
    "DI2694_EMPTY",
    "DI2695_EMPTY",
    "DI2696_EMPTY",
    "DI2697_EMPTY",
    "DI2698_EMPTY",
    "DI2699_EMPTY",
    "DI2700_EMPTY",
    "DI2701_EMPTY",
    "DI2702_EMPTY",
    "DI2703_EMPTY",
    "DI2704_EMPTY",
    "DI2705_EMPTY",
    "DI2706_EMPTY",
    "DI2707_EMPTY",
    "DI2708_EMPTY",
    "DI2709_EMPTY",
    "DI2710_EMPTY",
    "DI2711_EMPTY",
    "DI2712_EMPTY",
    "DI2713_EMPTY",
    "DI2714_EMPTY",
    "DI2715_EMPTY",
    "DI2716_DUPLICATE",
    "DI2717_SONGS_FINISHED",
    "DI2718_SONG_1_SCROLL_HINT",
    "DI2719_MUSIC_TUTORIAL_PROMPT",
    "DI2720_MUSIC_TUTORIAL",
    "DI2721_MUSIC_TUTORIAL_DECLINE",
    "DI2722_EMPTY",
    "DI2723_EMPTY",
    "DI2724_EMPTY",
    "DI2725_SONG_SIMILARITY_0",
    "DI2726_SONG_SIMILARITY_1",
    "DI2727_SONG_SIMILARITY_2",
    "DI2728_SONG_SIMILARITY_3",
    "DI2729_SONG_SIMILARITY_4",
    "DI2730_FROGFUCIUS_OFFER_HINT",
    "DI2731_FROGFUCIUS_MARIOS_PAD_HINT",
    "DI2732_FROGFUCIUS_BANDITS_WAY_HINT",
    "DI2733_FROGFUCIUS_MUSHROOM_KINGDOM_HINT",
    "DI2734_FROGFUCIUS_LANDS_END_GROTTO_HINT",
    "DI2735_FROGFUCIUS_MELODY_BAY_HINT",
    "DI2736_FROGFUCIUS_ROSE_TOWN_HINT",
    "DI2737_FROGFUCIUS_YOSTER_ISLE_HINT",
    "DI2738_FROGFUCIUS_MOLEVILLE_TOWN_HINT",
    "DI2739_FROGFUCIUS_MINE_HINT",
    "DI2740_FROGFUCIUS_TOWER_HINT",
    "DI2741_FROGFUCIUS_SEASIDE_HINT",
    "DI2742_FROGFUCIUS_MONSTRO_HINT",
    "DI2743_FROGFUCIUS_BEAN_VALLEY_HINT",
    "DI2744_FROGFUCIUS_NIMBUS_TOWN_HINT",
    "DI2745_FROGFUCIUS_NIMBUS_CASTLE_HINT",
    "DI2746_FROGFUCIUS_MUSHROOM_WAY_HINT",
    "DI2747_FROGFUCIUS_SHIP_HINT",
    "DI2748_FROGFUCIUS_SEWER_HINT",
    "DI2749_FROGFUCIUS_FOREST_HINT",
    "DI2750_FROGFUCIUS_MARRYMORE_HINT",
    "DI2751_FROGFUCIUS_LANDS_END_HINT",
    "DI2752_FROGFUCIUS_TEMPLE_HINT",
    "DI2753_FROGFUCIUS_BOOSTER_HILL_HINT",
    "DI2754_FROGFUCIUS_VOLCANO_HINT",
    "DI2755_FROGFUCIUS_BOWSERS_KEEP_HINT",
    "DI2756_FROGFUCIUS_FACTORY_HINT",
    "DI2757_FROGFUCIUS_CASINO_HINT",
    "DI2758_FROGFUCIUS_DEFAULT_STUFF",
    "DI2759_FROGFUCIUS_CRICKET_JAM_WITHOUT_PIE",
    "DI2760_FROGFUCIUS_MIDAS_HINT",
    "DI2761_FROGFUCIUS_ROSE_WAY_HINT",
    "DI2762_FROGFUCIUS_PIPE_VAULT_HINT",
    "DI2763_FROGFUCIUS_BOOSTER_PASS_HINT",
    "DI2764_FROGFUCIUS_STAR_HILL_HINT",
    "DI2765_FROGFUCIUS_MARRYMORE_HOTEL_HINT",
    "DI2766_FROGFUCIUS_FROG_DISCIPLE_HINT",
    "DI2767_FROGFUCIUS_SEA_HINT",
    "DI2768_FROGFUCIUS_BEANSTALK_HINT",
    "DI2769_FROGFUCIUS_SUPER_JUMP_HINT",
    "DI2770_FROGFUCIUS_KEEP_OBSTACLE_PRIZE_HINT",
    "DI2771_EMPTY",
    "DI2772_EMPTY",
    "DI2773_EMPTY",
    "DI2774_DUPLICATE",
    "DI2775_DUPLICATE",
    "DI2776_DUPLICATE",
    "DI2777_DUPLICATE",
    "DI2778_DUPLICATE",
    "DI2779_EMPTY",
    "DI2780_EMPTY",
    "DI2781_EMPTY",
    "DI2782_EMPTY",
    "DI2783_EMPTY",
    "DI2784_EMPTY",
    "DI2785_DUPLICATE",
    "DI2786_EMPTY",
    "DI2787_EMPTY",
    "DI2788_EMPTY",
    "DI2789_EMPTY",
    "DI2790_EMPTY",
    "DI2791_EMPTY",
    "DI2792_EMPTY",
    "DI2793_EMPTY",
    "DI2794_EMPTY",
    "DI2795_EMPTY",
    "DI2796_EMPTY",
    "DI2797_EMPTY",
    "DI2798_EMPTY",
    "DI2799_EMPTY",
    "DI2800_EMPTY",
    "DI2801_NEED_THE_KEY",
    "DI2802_NEED_THE_SHED_KEY",
    "DI2803_EMPTY",
    "DI2804_EMPTY",
    "DI2805_EMPTY",
    "DI2806_DUPLICATE",
    "DI2807_EMPTY",
    "DI2808_EMPTY",
    "DI2809_EMPTY",
    "DI2810_EMPTY",
    "DI2811_ITS_LOCKED",
    "DI2812_TOP_OF_TOWER_WITH_FAST_TRAVEL_DISABLED",
    "DI2813_TOP_OF_TOWER_WITH_FAST_TRAVEL_DISABLED",
    "DI2814_EMPTY",
    "DI2815_EMPTY",
    "DI2816_EMPTY",
    "DI2817_EMPTY",
    "DI2818_EMPTY",
    "DI2819_EMPTY",
    "DI2820_EMPTY",
    "DI2821_PORTRAIT_GAME_INSTRUCTION",
    "DI2822_PORTRAIT_GAME_COMPLETE",
    "DI2823_EMPTY",
    "DI2824_EMPTY",
    "DI2825_EMPTY",
    "DI2826_EMPTY",
    "DI2827_EMPTY",
    "DI2828_EMPTY",
    "DI2829_EMPTY",
    "DI2830_SEASIDE_BOSS_WELCOMES_YOU",
    "DI2831_DUPLICATE",
    "DI2832_OCCUPIED_SEASIDE_INNKEEPER",
    "DI2833_EMPTY",
    "DI2834_OCCUPIED_SEASIDE_HENCHMAN_HINT_TO_LEFT_BUILDING",
    "DI2835_EMPTY",
    "DI2836_OCCUPIED_SEASIDE_HENCHMAN_WHIRLPOOL",
    "DI2837_OCCUPIED_SEASIDE_HENCHMAN_SEA_MAY_BE_LOCKED",
    "DI2838_OCCUPIED_SEASIDE_HENCHMAN_BOSS_NAME",
    "DI2839_OCCUPIED_SEASIDE_HENCHMAN_AVOID_SHED",
    "DI2840_EMPTY",
    "DI2841_OCCUPIED_SEASIDE_HENCHMAN_SHIP_CHEST_HINT",
    "DI2842_OCCUPIED_SEASIDE_HENCHMAN_SHIP_CHEST_HINT",
    "DI2843_OCCUPIED_SEASIDE_HENCHMAN_SHIP_CHEST_HINT",
    "DI2844_OCCUPIED_SEASIDE_HENCHMAN_SHIP_CHEST_HINT",
    "DI2845_OCCUPIED_SEASIDE_HENCHMAN_CUSTOMER",
    "DI2846_EMPTY",
    "DI2847_OCCUPIED_SEASIDE_HENCHMAN_SHED_GUARD",
    "DI2848_OCCUPIED_SEASIDE_HENCHMAN_SHED_GUARD",
    "DI2849_OCCUPIED_SEASIDE_WINDOW",
    "DI2850_EMPTY",
    "DI2851_EMPTY",
    "DI2852_EMPTY",
    "DI2853_EMPTY",
    "DI2854_EMPTY",
    "DI2855_EMPTY",
    "DI2856_EMPTY",
    "DI2857_EMPTY",
    "DI2858_EMPTY",
    "DI2859_EMPTY",
    "DI2860_EMPTY",
    "DI2861_EMPTY",
    "DI2862_EMPTY",
    "DI2863_EMPTY",
    "DI2864_EMPTY",
    "DI2865_EMPTY",
    "DI2866_ITS_LOCKED",
    "DI2867_DUPLICATE",
    "DI2868_EMPTY",
    "DI2869_EMPTY",
    "DI2870_EMPTY",
    "DI2871_EMPTY",
    "DI2872_EMPTY",
    "DI2873_EMPTY",
    "DI2874_EMPTY",
    "DI2875_EMPTY",
    "DI2876_EMPTY",
    "DI2877_EMPTY",
    "DI2878_EMPTY",
    "DI2879_EMPTY",
    "DI2880_EMPTY",
    "DI2881_EMPTY",
    "DI2882_DUPLICATE",
    "DI2883_EMPTY",
    "DI2884_EMPTY",
    "DI2885_EMPTY",
    "DI2886_EMPTY",
    "DI2887_EMPTY",
    "DI2888_DR_TOPPER_PROMPT_TO_QUIT_BUTTON_PUZZLE",
    "DI2889_EMPTY",
    "DI2890_EMPTY",
    "DI2891_EMPTY",
    "DI2892_EMPTY",
    "DI2893_EMPTY",
    "DI2894_DUPLICATE",
    "DI2895_EMPTY",
    "DI2896_EMPTY",
    "DI2897_EMPTY",
    "DI2898_EMPTY",
    "DI2899_EMPTY",
    "DI2900_DUPLICATE",
    "DI2901_EMPTY",
    "DI2902_TREASURE_SELLER_ALL_ITEMS_UNLOCKED",
    "DI2903_EMPTY",
    "DI2904_EMPTY",
    "DI2905_TREASURE_SELLER_3RD_UNLOCK_HINT",
    "DI2906_EMPTY",
    "DI2907_TREASURE_SELLER_SOLD_OUT",
    "DI2908_TREASURE_SELLER_ITEM_2",
    "DI2909_TREASURE_SELLER_ALL_IVE_GOT_FOR_NOW",
    "DI2910_TREASURE_SELLER_INSUFFICIENT_COINS",
    "DI2911_TREASURE_SELLER_ITEM_1",
    "DI2912_TREASURE_SELLER_SUCCESSFUL_SALE",
    "DI2913_TREASURE_SELLER_TEMPORARILY_SOLD_OUT",
    "DI2914_TREASURE_SELLER_ITEM_3",
    "DI2915_TREASURE_SELLER_2ND_UNLOCK_HINT",
    "DI2916_SEASIDE_INNKEEPER",
    "DI2917_SEASIDE_INNKEEPER_DECLINE",
    "DI2918_SEASIDE_INNKEEPER_INSUFFICIENT_COINS",
    "DI2919_EMPTY",
    "DI2920_EMPTY",
    "DI2921_EMPTY",
    "DI2922_EMPTY",
    "DI2923_SEASIDE_ELDER_WELCOME",
    "DI2924_EMPTY",
    "DI2925_EMPTY",
    "DI2926_FROG_DISCIPLE_TOO_MANY_ITEMS",
    "DI2927_FROG_DISCIPLE_OUT_OF_ITEMS",
    "DI2928_MUSHROOM_BOY_INTRO",
    "DI2929_MUSHROOM_BOY_PROMPT",
    "DI2930_MUSHROOM_BOY_CONFIRM",
    "DI2931_MUSHROOM_BOY_NO_PRIZE",
    "DI2932_BERRY_MUSHROOM",
    "DI2933_RIPPIN_MUSHROOM",
    "DI2934_FLOWER_MUSHROOM",
    "DI2935_MUSHROOM_BOY_GOODBYE",
    "DI2936_NO_MUSHROOMS",
    "DI2937_RECEIVED_MAPLE_SYRUP",
    "DI2938_RECEIVED_ROCK_CANDY",
    "DI2939_RECEIVED_FLOWER_TAB",
    "DI2940_EMPTY",
    "DI2941_EMPTY",
    "DI2942_EMPTY",
    "DI2943_EMPTY",
    "DI2944_EMPTY",
    "DI2945_EMPTY",
    "DI2946_EMPTY",
    "DI2947_EMPTY",
    "DI2948_EMPTY",
    "DI2949_EMPTY",
    "DI2950_TROOPA_CLIFF_AD",
    "DI2951_DUPLICATE",
    "DI2952_DUPLICATE",
    "DI2953_DUPLICATE",
    "DI2954_DUPLICATE",
    "DI2955_DUPLICATE",
    "DI2956_DUPLICATE",
    "DI2957_DUPLICATE",
    "DI2958_EMPTY",
    "DI2959_EMPTY",
    "DI2960_EMPTY",
    "DI2961_EMPTY",
    "DI2962_EMPTY",
    "DI2963_THWOMP_MAXED",
    "DI2964_EMPTY",
    "DI2965_EMPTY",
    "DI2966_EMPTY",
    "DI2967_EMPTY",
    "DI2968_EMPTY",
    "DI2969_EMPTY",
    "DI2970_EMPTY",
    "DI2971_EMPTY",
    "DI2972_EMPTY",
    "DI2973_MONSTROMAMA",
    "DI2974_EMPTY",
    "DI2975_EMPTY",
    "DI2976_EMPTY",
    "DI2977_EMPTY",
    "DI2978_EMPTY",
    "DI2979_EMPTY",
    "DI2980_EMPTY",
    "DI2981_EMPTY",
    "DI2982_EMPTY",
    "DI2983_EMPTY",
    "DI2984_EMPTY",
    "DI2985_EMPTY",
    "DI2986_EMPTY",
    "DI2987_FAN_SETTING",
    "DI2988_EMPTY",
    "DI2989_EMPTY",
    "DI2990_EMPTY",
    "DI2991_EMPTY",
    "DI2992_EMPTY",
    "DI2993_EMPTY",
    "DI2994_EMPTY",
    "DI2995_EMPTY",
    "DI2996_EMPTY",
    "DI2997_EMPTY",
    "DI2998_EMPTY",
    "DI2999_EMPTY",
    "DI3000_EMPTY",
    "DI3001_EMPTY",
    "DI3002_EMPTY",
    "DI3003_EMPTY",
    "DI3004_MUSTY_FEARS_NO_HUNT",
    "DI3005_EMPTY",
    "DI3006_EMPTY",
    "DI3007_EMPTY",
    "DI3008_EMPTY",
    "DI3009_EMPTY",
    "DI3010_EMPTY",
    "DI3011_EMPTY",
    "DI3012_EMPTY",
    "DI3013_EMPTY",
    "DI3014_DUPLICATE",
    "DI3015_DUPLICATE",
    "DI3016_DUPLICATE",
    "DI3017_EMPTY",
    "DI3018_EMPTY",
    "DI3019_EMPTY",
    "DI3020_EMPTY",
    "DI3021_EMPTY",
    "DI3022_EMPTY",
    "DI3023_EMPTY",
    "DI3024_EMPTY",
    "DI3025_EMPTY",
    "DI3026_EMPTY",
    "DI3027_EMPTY",
    "DI3028_DUPLICATE",
    "DI3029_EMPTY",
    "DI3030_EMPTY",
    "DI3031_EMPTY",
    "DI3032_EMPTY",
    "DI3033_EMPTY",
    "DI3034_EMPTY",
    "DI3035_EMPTY",
    "DI3036_EMPTY",
    "DI3037_EMPTY",
    "DI3038_EMPTY",
    "DI3039_EMPTY",
    "DI3040_EMPTY",
    "DI3041_EMPTY",
    "DI3042_DUPLICATE",
    "DI3043_EMPTY",
    "DI3044_DOJO_BOSS_1_AFTER_DEFEAT",
    "DI3045_EMPTY",
    "DI3046_EMPTY",
    "DI3047_EMPTY",
    "DI3048_EMPTY",
    "DI3049_EMPTY",
    "DI3050_EMPTY",
    "DI3051_EMPTY",
    "DI3052_EMPTY",
    "DI3053_EMPTY",
    "DI3054_EMPTY",
    "DI3055_DUPLICATE",
    "DI3056_DUPLICATE",
    "DI3057_MONSTRO_SUPERBOSS_PROMPT",
    "DI3058_EMPTY",
    "DI3059_EMPTY",
    "DI3060_EMPTY",
    "DI3061_EMPTY",
    "DI3062_TOADOFSKY_FINAL_SONG",
    "DI3063_TOADOFSKY_RECOMPOSE_FINAL_SONG_PROMPT",
    "DI3064_TOADOFSKY_HEAR_IT_AGAIN",
    "DI3065_TOADOFSKY_HOW_TO_RECOMPOSE",
    "DI3066_DUPLICATE",
    "DI3067_DUPLICATE",
    "DI3068_DUPLICATE",
    "DI3069_DUPLICATE",
    "DI3070_DUPLICATE",
    "DI3071_DUPLICATE",
    "DI3072_TOWER_HENCHMAN_3_WINDOW",
    "DI3073_TOWER_HENCHMAN_3",
    "DI3074_GOT_BEETLEMANIA",
    "DI3075_GARDENER_CUTSCENE",
    "DI3076_GARDENER_CUTSCENE",
    "DI3077_GOT_BEETLEMANIA",
    "DI3078_EMPTY",
    "DI3079_GOT_A_STAR_PIECE",
    "DI3080_EMPTY",
    "DI3081_EMPTY",
    "DI3082_SHITPOST",
    "DI3083_EMPTY",
    "DI3084_EMPTY",
    "DI3085_GARDENER_CUTSCENE",
    "DI3086_EMPTY",
    "DI3087_EMPTY",
    "DI3088_EMPTY",
    "DI3089_EMPTY",
    "DI3090_EMPTY",
    "DI3091_EMPTY",
    "DI3092_SNIFIT_4",
    "DI3093_SNIFIT_5",
    "DI3094_SNIFIT_6",
    "DI3095_SNIFIT_7",
    "DI3096_APPRENTICE_REJECTED",
    "DI3097_APPRENTICE_REJECTED",
    "DI3098_GARDENER_CUTSCENE",
    "DI3099_GARDENER_CUTSCENE",
    "DI3100_GARDENER_CUTSCENE",
    "DI3101_GARDENER_CUTSCENE",
    "DI3102_GARDENER_CUTSCENE",
    "DI3103_GARDENER_CUTSCENE",
    "DI3104_EMPTY",
    "DI3105_WISH_1",
    "DI3106_WISH_2",
    "DI3107_WISH_3",
    "DI3108_WISH_4",
    "DI3109_WISH_5",
    "DI3110_WISH_6",
    "DI3111_WISH_7",
    "DI3112_WISH_8",
    "DI3113_UNUSED_WISH",
    "DI3114_UNUSED_WISH",
    "DI3115_WISH_9",
    "DI3116_WISH_10",
    "DI3117_EMPTY",
    "DI3118_EMPTY",
    "DI3119_EMPTY",
    "DI3120_MALLOW_WISH_CUTSCENE",
    "DI3121_MALLOW_WISH_CUTSCENE",
    "DI3122_MALLOW_WISH_CUTSCENE",
    "DI3123_MALLOW_WISH_CUTSCENE",
    "DI3124_MALLOW_WISH_CUTSCENE",
    "DI3125_MALLOW_WISH_CUTSCENE",
    "DI3126_MALLOW_WISH_CUTSCENE",
    "DI3127_EMPTY",
    "DI3128_EMPTY",
    "DI3129_EMPTY",
    "DI3130_EMPTY",
    "DI3131_EMPTY",
    "DI3132_EMPTY",
    "DI3133_EMPTY",
    "DI3134_EMPTY",
    "DI3135_EMPTY",
    "DI3136_EMPTY",
    "DI3137_EMPTY",
    "DI3138_EMPTY",
    "DI3139_EMPTY",
    "DI3140_EMPTY",
    "DI3141_EMPTY",
    "DI3142_EMPTY",
    "DI3143_EMPTY",
    "DI3144_EMPTY",
    "DI3145_EMPTY",
    "DI3146_EMPTY",
    "DI3147_EMPTY",
    "DI3148_EMPTY",
    "DI3149_EMPTY",
    "DI3150_EMPTY",
    "DI3151_EMPTY",
    "DI3152_EMPTY",
    "DI3153_EMPTY",
    "DI3154_BOOSTER_PASS_OPENED",
    "DI3155_EMPTY",
    "DI3156_BOOSTER_PASS_BUSH",
    "DI3157_EMPTY",
    "DI3158_MARRYMORE_BELL_SHOPS_DISABLED",
    "DI3159_SHOP_DISABLED",
    "DI3160_EMPTY",
    "DI3161_EMPTY",
    "DI3162_EMPTY",
    "DI3163_EMPTY",
    "DI3164_EMPTY",
    "DI3165_EMPTY",
    "DI3166_EMPTY",
    "DI3167_EMPTY",
    "DI3168_EMPTY",
    "DI3169_EMPTY",
    "DI3170_EMPTY",
    "DI3171_EMPTY",
    "DI3172_EMPTY",
    "DI3173_EMPTY",
    "DI3174_EMPTY",
    "DI3175_EMPTY",
    "DI3176_EMPTY",
    "DI3177_EMPTY",
    "DI3178_EMPTY",
    "DI3179_EMPTY",
    "DI3180_EMPTY",
    "DI3181_EMPTY",
    "DI3182_EMPTY",
    "DI3183_EMPTY",
    "DI3184_EMPTY",
    "DI3185_EMPTY",
    "DI3186_EMPTY",
    "DI3187_EMPTY",
    "DI3188_EMPTY",
    "DI3189_EMPTY",
    "DI3190_EMPTY",
    "DI3191_EMPTY",
    "DI3192_EMPTY",
    "DI3193_EMPTY",
    "DI3194_EMPTY",
    "DI3195_EMPTY",
    "DI3196_EMPTY",
    "DI3197_EMPTY",
    "DI3198_EMPTY",
    "DI3199_EMPTY",
    "DI3200_EMPTY",
    "DI3201_EMPTY",
    "DI3202_EMPTY",
    "DI3203_EMPTY",
    "DI3204_EMPTY",
    "DI3205_EMPTY",
    "DI3206_EMPTY",
    "DI3207_EMPTY",
    "DI3208_EMPTY",
    "DI3209_EMPTY",
    "DI3210_EMPTY",
    "DI3211_EMPTY",
    "DI3212_EMPTY",
    "DI3213_PICKED_UP_A_70A7",
    "DI3214_GARDENER_CUTSCENE",
    "DI3215_GARDENER_CUTSCENE",
    "DI3216_GARDENER_CUTSCENE",
    "DI3217_GARDENER_CUTSCENE",
    "DI3218_GARDENER_CUTSCENE",
    "DI3219_GARDENER_CUTSCENE",
    "DI3220_GARDENER_CUTSCENE",
    "DI3221_GARDENER_CUTSCENE",
    "DI3222_GARDENER_CUTSCENE",
    "DI3223_GARDENER_CUTSCENE",
    "DI3224_GARDENER_CUTSCENE",
    "DI3225_GARDENER_CUTSCENE",
    "DI3226_GARDENER_CUTSCENE",
    "DI3227_GARDENER_CUTSCENE",
    "DI3228_GARDENER_CUTSCENE",
    "DI3229_GARDENER_CUTSCENE",
    "DI3230_GARDENER_CUTSCENE",
    "DI3231_EMPTY",
    "DI3232_EMPTY",
    "DI3233_EMPTY",
    "DI3234_EMPTY",
    "DI3235_EMPTY",
    "DI3236_EMPTY",
    "DI3237_EMPTY",
    "DI3238_EMPTY",
    "DI3239_EMPTY",
    "DI3240_EMPTY",
    "DI3241_EMPTY",
    "DI3242_EMPTY",
    "DI3243_EMPTY",
    "DI3244_EMPTY",
    "DI3245_EMPTY",
    "DI3246_EMPTY",
    "DI3247_EMPTY",
    "DI3248_EMPTY",
    "DI3249_EMPTY",
    "DI3250_EMPTY",
    "DI3251_EMPTY",
    "DI3252_EMPTY",
    "DI3253_EMPTY",
    "DI3254_EMPTY",
    "DI3255_EMPTY",
    "DI3256_EMPTY",
    "DI3257_EMPTY",
    "DI3258_EMPTY",
    "DI3259_EMPTY",
    "DI3260_EMPTY",
    "DI3261_EMPTY",
    "DI3262_EMPTY",
    "DI3263_EMPTY",
    "DI3264_EMPTY",
    "DI3265_EMPTY",
    "DI3266_EMPTY",
    "DI3267_EMPTY",
    "DI3268_EMPTY",
    "DI3269_EMPTY",
    "DI3270_EMPTY",
    "DI3271_EMPTY",
    "DI3272_EMPTY",
    "DI3273_EMPTY",
    "DI3274_EMPTY",
    "DI3275_CONVERTED_WISH",
    "DI3276_BLACKJACK",
    "DI3277_BLACKJACK",
    "DI3278_BLACKJACK",
    "DI3279_BLACKJACK",
    "DI3280_BLACKJACK",
    "DI3281_BLACKJACK",
    "DI3282_BLACKJACK",
    "DI3283_BLACKJACK",
    "DI3284_BLACKJACK",
    "DI3285_BLACKJACK",
    "DI3286_BLACKJACK",
    "DI3287_BLACKJACK",
    "DI3288_BLACKJACK",
    "DI3289_BLACKJACK",
    "DI3290_BLACKJACK",
    "DI3291_BLACKJACK",
    "DI3292_BLACKJACK",
    "DI3293_BLACKJACK",
    "DI3294_BLACKJACK",
    "DI3295_EMPTY",
    "DI3296_BLACKJACK",
    "DI3297_BLACKJACK",
    "DI3298_BOUNCER_REJECT",
    "DI3299_BOUNCER_REJECT",
    "DI3300_BOUNCER_ALLOW",
    "DI3301_BOUNCER_LEAVE",
    "DI3302_EMPTY",
    "DI3303_EMPTY",
    "DI3304_AWAIT_LEFT_OR_RIGHT",
    "DI3305_EMPTY",
    "DI3306_EMPTY",
    "DI3307_EMPTY",
    "DI3308_LOOK_THE_OTHER_WAY_PRIZE",
    "DI3309_EMPTY",
    "DI3310_LOOK_THE_OTHER_WAY_RETRY",
    "DI3311_EMPTY",
    "DI3312_CASINO_SLOTS",
    "DI3313_EMPTY",
    "DI3314_CASINO_SLOTS",
    "DI3315_CASINO_SLOTS",
    "DI3316_CASINO_SLOTS",
    "DI3317_CASINO_SLOTS",
    "DI3318_EMPTY",
    "DI3319_CASINO_SLOTS",
    "DI3320_EMPTY",
    "DI3321_YOU_MISSED",
    "DI3322_STAR_HILL_TUTORIAL",
    "DI3323_TO_MARRYMORE",
    "DI3324_TO_STAR_HILL",
    "DI3325_WISH_11",
    "DI3326_WISH_12",
    "DI3327_CONVERTED_WISH",
    "DI3328_NEED_SHINY_STONE",
    "DI3329_DUPLICATE",
    "DI3330_DUPLICATE",
    "DI3331_DUPLICATE",
    "DI3332_DUPLICATE",
    "DI3333_DUPLICATE",
    "DI3334_DUPLICATE",
    "DI3335_DUPLICATE",
    "DI3336_EMPTY",
    "DI3337_EMPTY",
    "DI3338_MONSTRO_SUPERBOSS_HINT",
    "DI3339_EMPTY",
    "DI3340_EMPTY",
    "DI3341_EMPTY",
    "DI3342_EMPTY",
    "DI3343_EMPTY",
    "DI3344_EMPTY",
    "DI3345_EMPTY",
    "DI3346_EMPTY",
    "DI3347_EMPTY",
    "DI3348_EMPTY",
    "DI3349_EMPTY",
    "DI3350_EMPTY",
    "DI3351_EMPTY",
    "DI3352_DOJO_BOSS_1_FULLY_DEFEATED",
    "DI3353_DOJO_BOSS_2_FULLY_DEFEATED",
    "DI3354_EMPTY",
    "DI3355_EMPTY",
    "DI3356_MONSTRO_PIRANHA_PLANT_AFTER_DEFEAT",
    "DI3357_EMPTY",
    "DI3358_DUPLICATE",
    "DI3359_DUPLICATE",
    "DI3360_DUPLICATE",
    "DI3361_EMPTY",
    "DI3362_DUPLICATE",
    "DI3363_DUPLICATE",
    "DI3364_DUPLICATE",
    "DI3365_DUPLICATE",
    "DI3366_DUPLICATE",
    "DI3367_DUPLICATE",
    "DI3368_DUPLICATE",
    "DI3369_DUPLICATE",
    "DI3370_DUPLICATE",
    "DI3371_DUPLICATE",
    "DI3372_DUPLICATE",
    "DI3373_DUPLICATE",
    "DI3374_DUPLICATE",
    "DI3375_DUPLICATE",
    "DI3376_DUPLICATE",
    "DI3377_DUPLICATE",
    "DI3378_DUPLICATE",
    "DI3379_DUPLICATE",
    "DI3380_DUPLICATE",
    "DI3381_DUPLICATE",
    "DI3382_EMPTY",
    "DI3383_EMPTY",
    "DI3384_EMPTY",
    "DI3385_EMPTY",
    "DI3386_EMPTY",
    "DI3387_EMPTY",
    "DI3388_EMPTY",
    "DI3389_EMPTY",
    "DI3390_EMPTY",
    "DI3391_EMPTY",
    "DI3392_EMPTY",
    "DI3393_EMPTY",
    "DI3394_EMPTY",
    "DI3395_EMPTY",
    "DI3396_EMPTY",
    "DI3397_EMPTY",
    "DI3398_EMPTY",
    "DI3399_EMPTY",
    "DI3400_EMPTY",
    "DI3401_EMPTY",
    "DI3402_EMPTY",
    "DI3403_EMPTY",
    "DI3404_DUPLICATE",
    "DI3405_DUPLICATE",
    "DI3406_DUPLICATE",
    "DI3407_DUPLICATE",
    "DI3408_DUPLICATE",
    "DI3409_EMPTY",
    "DI3410_EMPTY",
    "DI3411_EMPTY",
    "DI3412_EMPTY",
    "DI3413_EMPTY",
    "DI3414_EMPTY",
    "DI3415_EMPTY",
    "DI3416_EMPTY",
    "DI3417_EMPTY",
    "DI3418_EMPTY",
    "DI3419_EMPTY",
    "DI3420_NIMBUS_BOSS_SWEET_TALKED_BY_TOWER_BOSS",
    "DI3421_DUPLICATE",
    "DI3422_DUPLICATE",
    "DI3423_DUPLICATE",
    "DI3424_DUPLICATE",
    "DI3425_NIMBUS_BOSS_SWEET_TALKED_BY_TOWER_BOSS",
    "DI3426_EMPTY",
    "DI3427_EMPTY",
    "DI3428_DUPLICATE",
    "DI3429_DUPLICATE",
    "DI3430_DUPLICATE",
    "DI3431_DUPLICATE",
    "DI3432_DUPLICATE",
    "DI3433_DUPLICATE",
    "DI3434_DUPLICATE",
    "DI3435_DUPLICATE",
    "DI3436_DUPLICATE",
    "DI3437_DUPLICATE",
    "DI3438_DUPLICATE",
    "DI3439_DUPLICATE",
    "DI3440_DUPLICATE",
    "DI3441_EMPTY",
    "DI3442_EMPTY",
    "DI3443_EMPTY",
    "DI3444_EMPTY",
    "DI3445_DUPLICATE",
    "DI3446_DUPLICATE",
    "DI3447_DUPLICATE",
    "DI3448_DUPLICATE",
    "DI3449_DUPLICATE",
    "DI3450_DUPLICATE",
    "DI3451_DUPLICATE",
    "DI3452_DUPLICATE",
    "DI3453_DUPLICATE",
    "DI3454_DUPLICATE",
    "DI3455_DUPLICATE",
    "DI3456_DUPLICATE",
    "DI3457_DUPLICATE",
    "DI3458_DUPLICATE",
    "DI3459_DUPLICATE",
    "DI3460_DUPLICATE",
    "DI3461_DUPLICATE",
    "DI3462_DUPLICATE",
    "DI3463_DUPLICATE",
    "DI3464_DUPLICATE",
    "DI3465_DUPLICATE",
    "DI3466_DUPLICATE",
    "DI3467_DUPLICATE",
    "DI3468_DUPLICATE",
    "DI3469_DUPLICATE",
    "DI3470_DUPLICATE",
    "DI3471_DUPLICATE",
    "DI3472_DUPLICATE",
    "DI3473_DUPLICATE",
    "DI3474_DUPLICATE",
    "DI3475_DUPLICATE",
    "DI3476_DUPLICATE",
    "DI3477_DUPLICATE",
    "DI3478_DUPLICATE",
    "DI3479_DUPLICATE",
    "DI3480_DUPLICATE",
    "DI3481_DUPLICATE",
    "DI3482_DUPLICATE",
    "DI3483_DUPLICATE",
    "DI3484_DUPLICATE",
    "DI3485_DUPLICATE",
    "DI3486_DUPLICATE",
    "DI3487_DUPLICATE",
    "DI3488_DUPLICATE",
    "DI3489_DUPLICATE",
    "DI3490_DUPLICATE",
    "DI3491_DUPLICATE",
    "DI3492_DUPLICATE",
    "DI3493_DUPLICATE",
    "DI3494_DUPLICATE",
    "DI3495_DUPLICATE",
    "DI3496_DUPLICATE",
    "DI3497_DUPLICATE",
    "DI3498_DUPLICATE",
    "DI3499_DUPLICATE",
    "DI3500_DUPLICATE",
    "DI3501_DUPLICATE",
    "DI3502_DUPLICATE",
    "DI3503_DUPLICATE",
    "DI3504_DUPLICATE",
    "DI3505_DUPLICATE",
    "DI3506_DUPLICATE",
    "DI3507_DUPLICATE",
    "DI3508_DUPLICATE",
    "DI3509_DUPLICATE",
    "DI3510_DUPLICATE",
    "DI3511_DUPLICATE",
    "DI3512_DUPLICATE",
    "DI3513_DUPLICATE",
    "DI3514_DUPLICATE",
    "DI3515_DUPLICATE",
    "DI3516_DUPLICATE",
    "DI3517_DUPLICATE",
    "DI3518_DUPLICATE",
    "DI3519_DUPLICATE",
    "DI3520_DUPLICATE",
    "DI3521_DUPLICATE",
    "DI3522_DUPLICATE",
    "DI3523_DUPLICATE",
    "DI3524_DUPLICATE",
    "DI3525_DUPLICATE",
    "DI3526_DUPLICATE",
    "DI3527_DUPLICATE",
    "DI3528_DUPLICATE",
    "DI3529_DUPLICATE",
    "DI3530_DUPLICATE",
    "DI3531_DUPLICATE",
    "DI3532_DUPLICATE",
    "DI3533_DUPLICATE",
    "DI3534_DUPLICATE",
    "DI3535_DUPLICATE",
    "DI3536_DUPLICATE",
    "DI3537_DUPLICATE",
    "DI3538_DUPLICATE",
    "DI3539_DUPLICATE",
    "DI3540_DUPLICATE",
    "DI3541_DUPLICATE",
    "DI3542_DUPLICATE",
    "DI3543_DUPLICATE",
    "DI3544_DUPLICATE",
    "DI3545_DUPLICATE",
    "DI3546_DUPLICATE",
    "DI3547_DUPLICATE",
    "DI3548_DUPLICATE",
    "DI3549_DUPLICATE",
    "DI3550_DUPLICATE",
    "DI3551_DUPLICATE",
    "DI3552_DUPLICATE",
    "DI3553_DUPLICATE",
    "DI3554_DUPLICATE",
    "DI3555_DUPLICATE",
    "DI3556_DUPLICATE",
    "DI3557_DUPLICATE",
    "DI3558_DUPLICATE",
    "DI3559_DUPLICATE",
    "DI3560_DUPLICATE",
    "DI3561_DUPLICATE",
    "DI3562_DUPLICATE",
    "DI3563_DUPLICATE",
    "DI3564_DUPLICATE",
    "DI3565_DUPLICATE",
    "DI3566_DUPLICATE",
    "DI3567_DUPLICATE",
    "DI3568_DUPLICATE",
    "DI3569_DUPLICATE",
    "DI3570_DUPLICATE",
    "DI3571_DUPLICATE",
    "DI3572_DUPLICATE",
    "DI3573_DUPLICATE",
    "DI3574_DUPLICATE",
    "DI3575_DUPLICATE",
    "DI3576_DUPLICATE",
    "DI3577_DUPLICATE",
    "DI3578_DUPLICATE",
    "DI3579_DUPLICATE",
    "DI3580_DUPLICATE",
    "DI3581_DUPLICATE",
    "DI3582_DUPLICATE",
    "DI3583_DUPLICATE",
    "DI3584_DUPLICATE",
    "DI3585_EMPTY",
    "DI3586_EMPTY",
    "DI3587_EMPTY",
    "DI3588_CASTLE_PONR_WARNING",
    "DI3589_TOWER_CREVICE_HINT",
    "DI3590_DUPE_BOSSES_HINT",
    "DI3591_NIMBUS_NPC",
    "DI3592_NIMBUS_HIDDEN_TREASURE_HINT",
    "DI3593_GIANT_EGG_HINT",
    "DI3594_REFILLED_NIMBUS_CHEST_HINT",
    "DI3595_NIMBUS_NPC",
    "DI3596_NIMBUS_NPC",
    "DI3597_VOLCANO_FIRST_ROOM_HINT",
    "DI3598_NIMBUS_NPC",
    "DI3599_EMPTY",
    "DI3600_WAIT_ITS_LOCKED",
    "DI3601_EMPTY",
    "DI3602_EMPTY",
    "DI3603_EMPTY",
    "DI3604_EMPTY",
    "DI3605_EMPTY",
    "DI3606_EMPTY",
    "DI3607_EMPTY",
    "DI3608_EMPTY",
    "DI3609_EMPTY",
    "DI3610_EMPTY",
    "DI3611_EMPTY",
    "DI3612_EMPTY",
    "DI3613_EMPTY",
    "DI3614_EMPTY",
    "DI3615_EMPTY",
    "DI3616_EMPTY",
    "DI3617_EMPTY",
    "DI3618_EMPTY",
    "DI3619_EMPTY",
    "DI3620_EMPTY",
    "DI3621_EMPTY",
    "DI3622_EMPTY",
    "DI3623_EMPTY",
    "DI3624_EMPTY",
    "DI3625_EMPTY",
    "DI3626_EMPTY",
    "DI3627_EMPTY",
    "DI3628_EMPTY",
    "DI3629_EMPTY",
    "DI3630_EMPTY",
    "DI3631_EMPTY",
    "DI3632_EMPTY",
    "DI3633_EMPTY",
    "DI3634_EMPTY",
    "DI3635_EMPTY",
    "DI3636_EMPTY",
    "DI3637_EMPTY",
    "DI3638_EMPTY",
    "DI3639_EMPTY",
    "DI3640_EMPTY",
    "DI3641_EMPTY",
    "DI3642_DUPLICATE",
    "DI3643_EMPTY",
    "DI3644_EMPTY",
    "DI3645_EMPTY",
    "DI3646_EMPTY",
    "DI3647_EMPTY",
    "DI3648_NEED_CASTLE_KEY_1",
    "DI3649_EMPTY",
    "DI3650_EMPTY",
    "DI3651_EMPTY",
    "DI3652_EMPTY",
    "DI3653_EMPTY",
    "DI3654_EMPTY",
    "DI3655_EMPTY",
    "DI3656_EMPTY",
    "DI3657_EMPTY",
    "DI3658_EMPTY",
    "DI3659_EMPTY",
    "DI3660_EMPTY",
    "DI3661_NIMBUS_KEY_EXPLANATION",
    "DI3662_EMPTY",
    "DI3663_NIMBUS_NPC",
    "DI3664_EMPTY",
    "DI3665_EMPTY",
    "DI3666_BEANSTALK_CHEST_HINT",
    "DI3667_CELLAR_HINT",
    "DI3668_EMPTY",
    "DI3669_EMPTY",
    "DI3670_EMPTY",
    "DI3671_EMPTY",
    "DI3672_EMPTY",
    "DI3673_EMPTY",
    "DI3674_EMPTY",
    "DI3675_EMPTY",
    "DI3676_EMPTY",
    "DI3677_VOLCANO_WARNING",
    "DI3678_EMPTY",
    "DI3679_EMPTY",
    "DI3680_EMPTY",
    "DI3681_EMPTY",
    "DI3682_EMPTY",
    "DI3683_EMPTY",
    "DI3684_EMPTY",
    "DI3685_EMPTY",
    "DI3686_EMPTY",
    "DI3687_EMPTY",
    "DI3688_EMPTY",
    "DI3689_EMPTY",
    "DI3690_EMPTY",
    "DI3691_EMPTY",
    "DI3692_EMPTY",
    "DI3693_EMPTY",
    "DI3694_EMPTY",
    "DI3695_EMPTY",
    "DI3696_EMPTY",
    "DI3697_EMPTY",
    "DI3698_EMPTY",
    "DI3699_EMPTY",
    "DI3700_EMPTY",
    "DI3701_EMPTY",
    "DI3702_EMPTY",
    "DI3703_EMPTY",
    "DI3704_EMPTY",
    "DI3705_EMPTY",
    "DI3706_EMPTY",
    "DI3707_EMPTY",
    "DI3708_EMPTY",
    "DI3709_HOT_SPRING_GUARD_AFTER_LIBERATION",
    "DI3710_DUPLICATE",
    "DI3711_EMPTY",
    "DI3712_EMPTY",
    "DI3713_EMPTY",
    "DI3714_EMPTY",
    "DI3715_EMPTY",
    "DI3716_EMPTY",
    "DI3717_EMPTY",
    "DI3718_KING_NIMBUS",
    "DI3719_QUEEN_NIMBUS",
    "DI3720_EMPTY",
    "DI3721_HOT_SPRING_GUARD_OCCUPIED",
    "DI3722_NO_ROYAL_BUS",
    "DI3723_EMPTY",
    "DI3724_EMPTY",
    "DI3725_KEEP_ACCESS_HINT",
    "DI3726_KEEP_ACCESS_HINT",
    "DI3727_EMPTY",
    "DI3728_DUPLICATE",
    "DI3729_NIMBUS_INNKEEPER",
    "DI3730_DREAM_CUSHION_PROMPT",
    "DI3731_NIMBUS_INN_INSUFFICIENT_COINS",
    "DI3732_GAMEBOY_KID",
    "DI3733_GAMEBOY_KID",
    "DI3734_EMPTY",
    "DI3735_EMPTY",
    "DI3736_EMPTY",
    "DI3737_EMPTY",
    "DI3738_GAMEBOY_KID_SELL_PROMPT",
    "DI3739_EMPTY",
    "DI3740_GAMEBOY_KID_INSUFFICIENT_COINS",
    "DI3741_DUPLICATE",
    "DI3742_GAMEBOY_KID_TUTORIAL_PROMPT",
    "DI3743_EMPTY",
    "DI3744_BEETLEMANIA_TUTORIAL",
    "DI3745_EMPTY",
    "DI3746_RARE_FROG_COIN_HINT",
    "DI3747_TALK_TO_NPCS_AGAIN_HINT",
    "DI3748_EMPTY",
    "DI3749_EMPTY",
    "DI3750_EMPTY",
    "DI3751_EMPTY",
    "DI3752_EMPTY",
    "DI3753_EMPTY",
    "DI3754_EMPTY",
    "DI3755_EMPTY",
    "DI3756_EMPTY",
    "DI3757_EMPTY",
    "DI3758_EMPTY",
    "DI3759_DUPLICATE",
    "DI3760_NIMBUS_NPC",
    "DI3761_EMPTY",
    "DI3762_EMPTY",
    "DI3763_EMPTY",
    "DI3764_NIMBUS_NPC",
    "DI3765_NIMBUS_EGG_HINT",
    "DI3766_NIMBUS_INNKEEPER_AFTER_DREAM_CUSHION",
    "DI3767_DUPLICATE",
    "DI3768_NIMBUS_INNKEEPER_AFTER_DREAM_CUSHION",
    "DI3769_NIMBUS_INNKEEPER_AFTER_DREAM_CUSHION",
    "DI3770_NIMBUS_INNKEEPER_AFTER_DREAM_CUSHION",
    "DI3771_NIMBUS_INNKEEPER_AFTER_DREAM_CUSHION",
    "DI3772_EMPTY",
    "DI3773_EMPTY",
    "DI3774_NIMBUS_INN_INSUFFICIENT_COINS",
    "DI3775_EMPTY",
    "DI3776_EMPTY",
    "DI3777_EMPTY",
    "DI3778_EMPTY",
    "DI3779_EMPTY",
    "DI3780_EMPTY",
    "DI3781_EMPTY",
    "DI3782_EMPTY",
    "DI3783_EMPTY",
    "DI3784_EMPTY",
    "DI3785_EMPTY",
    "DI3786_EMPTY",
    "DI3787_DODO_MINIGAME_HINT",
    "DI3788_EMPTY",
    "DI3789_EMPTY",
    "DI3790_EMPTY",
    "DI3791_EMPTY",
    "DI3792_EMPTY",
    "DI3793_EMPTY",
    "DI3794_EMPTY",
    "DI3795_EMPTY",
    "DI3796_EMPTY",
    "DI3797_EMPTY",
    "DI3798_EMPTY",
    "DI3799_EMPTY",
    "DI3800_EMPTY",
    "DI3801_EMPTY",
    "DI3802_EMPTY",
    "DI3803_DREAM_GAZ",
    "DI3804_DREAM_YOSHI",
    "DI3805_DREAM_CHANCELLOR",
    "DI3806_DREAM_JUMPING_KID",
    "DI3807_DREAM",
    "DI3808_DREAM",
    "DI3809_EMPTY",
    "DI3810_EMPTY",
    "DI3811_EMPTY",
    "DI3812_EMPTY",
    "DI3813_EMPTY",
    "DI3814_EMPTY",
    "DI3815_EMPTY",
    "DI3816_EMPTY",
    "DI3817_EMPTY",
    "DI3818_EMPTY",
    "DI3819_FOUND_A_70A7",
    "DI3820_EMPTY",
    "DI3821_DUPLICATE",
    "DI3822_DUPLICATE",
    "DI3823_DUPLICATE",
    "DI3824_DUPLICATE",
    "DI3825_EMPTY",
    "DI3826_EMPTY",
    "DI3827_VINE_TUTORIAL",
    "DI3828_DUPLICATE",
    "DI3829_DUPLICATE",
    "DI3830_DUPLICATE",
    "DI3831_DUPLICATE",
    "DI3832_DUPLICATE",
    "DI3833_DUPLICATE",
    "DI3834_DUPLICATE",
    "DI3835_DUPLICATE",
    "DI3836_DUPLICATE",
    "DI3837_DUPLICATE",
    "DI3838_DUPLICATE",
    "DI3839_DUPLICATE",
    "DI3840_DUPLICATE",
    "DI3841_MARRYMORE_ROBE",
    "DI3842_DUPLICATE",
    "DI3843_DUPLICATE",
    "DI3844_DUPLICATE",
    "DI3845_DUPLICATE",
    "DI3846_LINK",
    "DI3847_ROOM_SERVICE_MENU",
    "DI3848_EMPTY",
    "DI3849_EMPTY",
    "DI3850_EMPTY",
    "DI3851_EMPTY",
    "DI3852_BOUGHT_A_70A7",
    "DI3853_ROOM_SERVICE_INSUFFICIENT_COINS",
    "DI3854_EMPTY",
    "DI3855_EMPTY",
    "DI3856_EMPTY",
    "DI3857_EMPTY",
    "DI3858_EMPTY",
    "DI3859_EMPTY",
    "DI3860_EMPTY",
    "DI3861_EMPTY",
    "DI3862_EMPTY",
    "DI3863_EMPTY",
    "DI3864_EMPTY",
    "DI3865_EMPTY",
    "DI3866_EMPTY",
    "DI3867_EMPTY",
    "DI3868_EMPTY",
    "DI3869_EMPTY",
    "DI3870_EMPTY",
    "DI3871_EMPTY",
    "DI3872_EMPTY",
    "DI3873_EMPTY",
    "DI3874_EMPTY",
    "DI3875_EMPTY",
    "DI3876_DUPLICATE",
    "DI3877_DUPLICATE",
    "DI3878_DUPLICATE",
    "DI3879_DUPLICATE",
    "DI3880_DUPLICATE",
    "DI3881_DUPLICATE",
    "DI3882_DUPLICATE",
    "DI3883_DUPLICATE",
    "DI3884_DUPLICATE",
    "DI3885_DUPLICATE",
    "DI3886_DUPLICATE",
    "DI3887_DUPLICATE",
    "DI3888_DUPLICATE",
    "DI3889_EMPTY",
    "DI3890_EMPTY",
    "DI3891_EMPTY",
    "DI3892_EMPTY",
    "DI3893_EMPTY",
    "DI3894_EMPTY",
    "DI3895_EMPTY",
    "DI3896_EMPTY",
    "DI3897_EMPTY",
    "DI3898_EMPTY",
    "DI3899_EMPTY",
    "DI3900_DUPLICATE",
    "DI3901_DUPLICATE",
    "DI3902_DUPLICATE",
    "DI3903_DUPLICATE",
    "DI3904_DUPLICATE",
    "DI3905_DUPLICATE",
    "DI3906_DUPLICATE",
    "DI3907_DUPLICATE",
    "DI3908_EMPTY",
    "DI3909_EMPTY",
    "DI3910_EMPTY",
    "DI3911_GUEST_ROOM_GUARD_AFTER_SAMUS",
    "DI3912_DUPLICATE",
    "DI3913_DUPLICATE",
    "DI3914_DUPLICATE",
    "DI3915_DUPLICATE",
    "DI3916_DUPLICATE",
    "DI3917_DUPLICATE",
    "DI3918_DUPLICATE",
    "DI3919_DUPLICATE",
    "DI3920_SAMUS",
    "DI3921_VICTORY",
    "DI3922_DUPLICATE",
    "DI3923_DUPLICATE",
    "DI3924_DUPLICATE",
    "DI3925_DUPLICATE",
    "DI3926_DUPLICATE",
    "DI3927_DUPLICATE",
    "DI3928_DUPLICATE",
    "DI3929_DUPLICATE",
    "DI3930_DUPLICATE",
    "DI3931_DUPLICATE",
    "DI3932_DUPLICATE",
    "DI3933_DUPLICATE",
    "DI3934_DUPLICATE",
    "DI3935_DUPLICATE",
    "DI3936_DUPLICATE",
    "DI3937_DUPLICATE",
    "DI3938_DUPLICATE",
    "DI3939_DUPLICATE",
    "DI3940_DUPLICATE",
    "DI3941_DUPLICATE",
    "DI3942_DUPLICATE",
    "DI3943_DUPLICATE",
    "DI3944_DUPLICATE",
    "DI3945_DUPLICATE",
    "DI3946_DUPLICATE",
    "DI3947_DUPLICATE",
    "DI3948_DUPLICATE",
    "DI3949_DUPLICATE",
    "DI3950_DUPLICATE",
    "DI3951_DUPLICATE",
    "DI3952_DUPLICATE",
    "DI3953_DUPLICATE",
    "DI3954_DUPLICATE",
    "DI3955_DUPLICATE",
    "DI3956_DUPLICATE",
    "DI3957_DUPLICATE",
    "DI3958_DUPLICATE",
    "DI3959_DUPLICATE",
    "DI3960_DUPLICATE",
    "DI3961_DUPLICATE",
    "DI3962_DUPLICATE",
    "DI3963_DUPLICATE",
    "DI3964_DUPLICATE",
    "DI3965_DUPLICATE",
    "DI3966_DUPLICATE",
    "DI3967_DUPLICATE",
    "DI3968_DUPLICATE",
    "DI3969_DUPLICATE",
    "DI3970_DUPLICATE",
    "DI3971_DUPLICATE",
    "DI3972_DUPLICATE",
    "DI3973_DUPLICATE",
    "DI3974_DUPLICATE",
    "DI3975_DUPLICATE",
    "DI3976_DUPLICATE",
    "DI3977_DUPLICATE",
    "DI3978_DUPLICATE",
    "DI3979_DUPLICATE",
    "DI3980_DUPLICATE",
    "DI3981_DUPLICATE",
    "DI3982_DUPLICATE",
    "DI3983_DUPLICATE",
    "DI3984_DUPLICATE",
    "DI3985_DUPLICATE",
    "DI3986_DUPLICATE",
    "DI3987_DUPLICATE",
    "DI3988_DUPLICATE",
    "DI3989_DUPLICATE",
    "DI3990_DUPLICATE",
    "DI3991_DUPLICATE",
    "DI3992_DUPLICATE",
    "DI3993_DUPLICATE",
    "DI3994_DUPLICATE",
    "DI3995_DUPLICATE",
    "DI3996_DUPLICATE",
    "DI3997_DUPLICATE",
    "DI3998_DUPLICATE",
    "DI3999_DUPLICATE",
    "DI4000_DUPLICATE",
    "DI4001_DUPLICATE",
    "DI4002_DUPLICATE",
    "DI4003_DUPLICATE",
    "DI4004_DUPLICATE",
    "DI4005_DUPLICATE",
    "DI4006_DUPLICATE",
    "DI4007_DUPLICATE",
    "DI4008_DUPLICATE",
    "DI4009_DUPLICATE",
    "DI4010_DUPLICATE",
    "DI4011_DUPLICATE",
    "DI4012_DUPLICATE",
    "DI4013_DUPLICATE",
    "DI4014_DUPLICATE",
    "DI4015_DUPLICATE",
    "DI4016_DUPLICATE",
    "DI4017_DUPLICATE",
    "DI4018_DUPLICATE",
    "DI4019_DUPLICATE",
    "DI4020_DUPLICATE",
    "DI4021_DUPLICATE",
    "DI4022_DUPLICATE",
    "DI4023_DUPLICATE",
    "DI4024_DUPLICATE",
    "DI4025_DUPLICATE",
    "DI4026_DUPLICATE",
    "DI4027_DUPLICATE",
    "DI4028_DUPLICATE",
    "DI4029_DUPLICATE",
    "DI4030_DUPLICATE",
    "DI4031_DUPLICATE",
    "DI4032_DUPLICATE",
    "DI4033_DUPLICATE",
    "DI4034_DUPLICATE",
    "DI4035_DUPLICATE",
    "DI4036_DUPLICATE",
    "DI4037_DUPLICATE",
    "DI4038_DUPLICATE",
    "DI4039_DUPLICATE",
    "DI4040_DUPLICATE",
    "DI4041_DUPLICATE",
    "DI4042_DUPLICATE",
    "DI4043_DUPLICATE",
    "DI4044_DUPLICATE",
    "DI4045_DUPLICATE",
    "DI4046_DUPLICATE",
    "DI4047_DUPLICATE",
    "DI4048_DUPLICATE",
    "DI4049_DUPLICATE",
    "DI4050_DUPLICATE",
    "DI4051_DUPLICATE",
    "DI4052_DUPLICATE",
    "DI4053_DUPLICATE",
    "DI4054_DUPLICATE",
    "DI4055_DUPLICATE",
    "DI4056_DUPLICATE",
    "DI4057_DUPLICATE",
    "DI4058_DUPLICATE",
    "DI4059_DUPLICATE",
    "DI4060_DUPLICATE",
    "DI4061_DUPLICATE",
    "DI4062_DUPLICATE",
    "DI4063_DUPLICATE",
    "DI4064_DUPLICATE",
    "DI4065_DUPLICATE",
    "DI4066_DUPLICATE",
    "DI4067_DUPLICATE",
    "DI4068_DUPLICATE",
    "DI4069_DUPLICATE",
    "DI4070_DUPLICATE",
    "DI4071_DUPLICATE",
    "DI4072_DUPLICATE",
    "DI4073_DUPLICATE",
    "DI4074_DUPLICATE",
    "DI4075_DUPLICATE",
    "DI4076_DUPLICATE",
    "DI4077_DUPLICATE",
    "DI4078_DUPLICATE",
    "DI4079_DUPLICATE",
    "DI4080_DUPLICATE",
    "DI4081_DEFEATED",
    "DI4082_RUN_AWAY",
    "DI4083_EMPTY_AUTO_TERMINATE",
    "DI4084_DUPLICATE",
    "DI4085_DUPLICATE",
    "DI4086_DUPLICATE",
    "DI4087_DUPLICATE",
    "DI4088_DUPLICATE",
    "DI4089_DUPLICATE",
    "DI4090_DUPLICATE",
    "DI4091_DUPLICATE",
    "DI4092_DUPLICATE",
    "DI4093_DUPLICATE",
    "DI4094_DUPLICATE",
    "DI4095_DUPLICATE",
]

DIRECTIONS = [
    "EAST",
    "SOUTHEAST",
    "SOUTH",
    "SOUTHWEST",
    "WEST",
    "NORTHWEST",
    "NORTH",
    "NORTHEAST",
]

PACK_IDS = [
    "PACK000_SNIFIT_FIGHT",
    "PACK001_BOBOMB_HENCHMEN",
    "PACK002_SPIKEYS_AND_TROOPAS",
    "PACK003_SPIKEYS_AND_FROGS",
    "PACK004_JUST_TROOPAS",
    "PACK005_TROOPAS_WITH_FROGS_OR_GOOMBAS",
    "PACK006_JUST_GOOMBAS",
    "PACK007_GOOMBAS_WITH_FROGS_OR_SPIKEYS",
    "PACK008_K9S_WITH_SPIKEYS",
    "PACK009_K9S_WITH_SPIKEYS_OR_FROGS",
    "PACK010_REGULAR_SHYSTERS_BIASED_2",
    "PACK011_REGULAR_SHYSTERS_BIASED_3",
    "PACK012_RATFUNKS_WITH_SHADOW_OR_HOBGOBLIN",
    "PACK013_RATFUNKS_ALWAYS_WITH_ONE_OTHER_MONSTER",
    "PACK014_BIGBOO_ALWAYS_WITH_ONE_OTHER_MONSTER_1",
    "PACK015_BIGBOO_ALWAYS_WITH_ONE_OTHER_MONSTER_2",
    "PACK016_MULTIPLE_GOBYS_BIASED_2",
    "PACK017_MULTIPLE_GOBYS_BIASED_3",
    "PACK018_CROOKS_WITH_SHYGUY_OR_SNAPDRAGON",
    "PACK019_CROOKS_ALWAYS_WITH_OTHER_MONSTERS",
    "PACK020_SHYGUYS_WITH_STARSLAP_OR_SNAPDRAGON",
    "PACK021_SHYGUY_STARSLAP_SNAPDRAGON_CROOK_ARACHNE",
    "PACK022_STARSLAP_ALWAYS_WITH_OTHER_MONSTERS",
    "PACK023_STARSLAPS_SOMETIMES_WITH_OTHER_MONSTERS",
    "PACK024_WIGGLERS_WITH_AMANITA",
    "PACK025_WIGGLERS_WITH_GUERRILLA_OR_AMANITA",
    "PACK026_AMANITAS_WITH_BUZZER_OR_OCTOLOT",
    "PACK027_AMANITAS_ALWAYS_WITH_OTHER_MONSTERS",
    "PACK028_BUZZERS_ALWAYS_WITH_OTHER_MONSTERS",
    "PACK029_BUZZERS_WITH_AMANITA",
    "PACK030_SPARKY_WITH_SHYRANGER",
    "PACK031_MULTIPLE_SPARKY_WITH_SHYRANGER",
    "PACK032_APPRENTICE_HENCHMAN_FIGHT",
    "PACK033_UNUSED",
    "PACK034_PIRANHA_WITH_SHYRANGER",
    "PACK035_MULTIPLE_PIRANHA_WITH_SHYRANGER",
    "PACK036_BOBOMB_WITH_CLUSTER",
    "PACK037_BOBOMB_WITH_CLUSTER_SOMETIMES_ENIGMA",
    "PACK038_SPARKY_WITH_ALWAYS_OTHER_ENEMIES_1",
    "PACK039_SPARKY_WITH_ALWAYS_OTHER_ENEMIES_2",
    "PACK040_MAGMITES_WITH_SPARKY_BOBOMB_OR_CLUSTER",
    "PACK041_MAGMITES_ALWAYS_WITH_OTHER_MONSTERS",
    "PACK042_LAKITU_WITH_SPIKESTER_ARTICHOKER",
    "PACK043_LAKITU_USUALLY_WITH_ARTICHOKER",
    "PACK044_SPIKESTER_WITH_OTHER_ENEMIES",
    "PACK045_MULTIPLE_SPIKESTER_WITH_OTHER_ENEMIES",
    "PACK046_SPOOKUM_WITH_OTHER_MONSTERS",
    "PACK047_MULTIPLE_SPOOKUM_WITH_OTHER_MONSTERS",
    "PACK048_ROBOMB_WITH_REMOCON",
    "PACK049_ROBOMB_WITH_REMOCON_OR_ORBUSER",
    "PACK050_CHOMP_WITH_OTHER_MONSTERS_1",
    "PACK051_CHOMP_WITH_OTHER_MONSTERS_2",
    "PACK052_BLASTERS_AND_SPOOKUMS_1",
    "PACK053_BLASTERS_AND_SPOOKUMS_2",
    "PACK054_TORTES",
    "PACK055_MULTIPLE_TORTES",
    "PACK056_MUKU_PULSAR_GECKO",
    "PACK057_MUKU_PULSAR_GECKO_MULTI",
    "PACK058_SACKIT_WITH_OTHER_MONSTERS",
    "PACK059_SACKIT_ALWAYS_WITH_OTHER_MONSTERS",
    "PACK060_GECKO_PACK_1",
    "PACK061_GECKO_PACK_2",
    "PACK062_ZEOSTAR_WITH_BLOOBER_OR_LEUKO",
    "PACK063_ZEOSTAR_ALWAYS_WITH_OTHER_MONSTERS",
    "PACK064_BLOOBER_PACK_1",
    "PACK065_BLOOBER_PACK_2",
    "PACK066_KIPPER_PACK_1",
    "PACK067_KIPPER_PACK_2",
    "PACK068_BANDANA_REDS_1",
    "PACK069_BANDANA_REDS_2",
    "PACK070_BANDANA_BLUES",
    "PACK071_BANDANA_RED_HENCHMEN",
    "PACK072_DRYBONES_WITH_GREAPER_REACHER",
    "PACK073_DRYBONES_ALWAYS_WITH_OTHER_MONSTERS",
    "PACK074_ALLEYRAT_PACK_1",
    "PACK075_ALLEYRAT_PACK_2",
    "PACK076_GREAPER_WITH_REACHER_STRAWHEAD",
    "PACK077_GREAPER_ALWAYS_WITH_OTHER_MONSTERS",
    "PACK078_DRILLBIT_PACK_1",
    "PACK079_DRILLBIT_PACK_2",
    "PACK080_STINGER_ALWAYS_WITH_OTHER_MONSTERS",
    "PACK081_STINGER_WITH_OCTOVADER_OR_FINKFLOWER",
    "PACK082_CHOW_PACK_1",
    "PACK083_CHOW_PACK_2",
    "PACK084_CHOMPCHOMP_PACK_1",
    "PACK085_CHOMPCHOMP_PACK_2",
    "PACK086_SHYAWAY_WITH_KRIFFID_OR_RIBBITE",
    "PACK087_SHYAWAY_ALWAYS_WITH_OTHER_MONSTERS",
    "PACK088_CHEWY_WITH_SHYAWAY_OR_SPINTHRA",
    "PACK089_CHEWY_ALWAYS_WITH_OTHER_MONSTERS",
    "PACK090_GECKIT_PACK_1",
    "PACK091_GECKIT_PACK_2",
    "PACK092_BIRDY_PACK_1",
    "PACK093_BIRDY_PACK_2",
    "PACK094_BLUEBIRD_PACK_1",
    "PACK095_BLUEBIRD_PACK_2",
    "PACK096_PINWHEEL_WITH_MUCKLE",
    "PACK097_PINWHEEL_ALWAYS_WITH_OTHER_MONSTERS",
    "PACK098_SHAMAN_WITH_ORBISON_JAWFUL",
    "PACK099_SHAMAN_ALWAYS_WITH_OTHER_MONSTERS",
    "PACK100_SLINGSHY_PACK_1",
    "PACK101_SLINGSHY_PACK_2",
    "PACK102_MAGMUS_WITH_ARMOREDANT_OERLIKON",
    "PACK103_MAGMUS_ALWAYS_WITH_OTHER_MONSTERS",
    "PACK104_OERLIKON_PACK_1",
    "PACK105_OERLIKON_PACK_2",
    "PACK106_PYROSPHERE_WITH_CHAINEDKONG_CORKPEDITE",
    "PACK107_PYROSPHERE_ALWAYS_WITH_OTHER_MONSTERS",
    "PACK108_VOMER_PACK_1",
    "PACK109_VOMER_PACK_2",
    "PACK110_TERRACOTTA_PACK_1",
    "PACK111_TERRACOTTA_PACK_2",
    "PACK112_MALAKOOPA_PACK_1",
    "PACK113_MALAKOOPA_PACK_2",
    "PACK114_GUGOOMBA_PACK_1",
    "PACK115_GUGOOMBA_PACK_2",
    "PACK116_BIGBERTHA_PACK_1",
    "PACK117_BIGBERTHA_PACK_2",
    "PACK118_MAGIKOOPA_INTRO",
    "PACK119_MAGIKOOPA_UNUSED",
    "PACK120_NINJA_PACK_1",
    "PACK121_NINJA_PACK_2",
    "PACK122_SPRINGER_PACK_1",
    "PACK123_SPRINGER_PACK_2",
    "PACK124_MADMALLET_PACK_1",
    "PACK125_MADMALLET_PACK_2",
    "PACK126_POUNDER_PACK_1",
    "PACK127_POUNDER_PACK_2",
    "PACK128_POUNDETTE_PACK_1",
    "PACK129_POUNDETTE_PACK_2",
    "PACK130_AMEBOIDS",
    "PACK131_AMEBOIDS_DUPE",
    "PACK132_GLUMREAPER_WITH_HIPPOPO_DOPPEL",
    "PACK133_GLUMREAPER_ALWAYS_WITH_OTHER_MONSTERS",
    "PACK134_LILBOO_PACK_1",
    "PACK135_LILBOO_PACK_2",
    "PACK136_JABITS_HAMMERS_PACK_1",
    "PACK137_JABITS_HAMMERS_PACK_2",
    "PACK138_RATFUNKS_ONLY",
    "PACK139_ARTICHOKERS_ONLY",
    "PACK140_PUNCHINELLO_STATIC",
    "PACK141_CROOK_HENCHMEN_ONLY",
    "PACK142_SNIFIT_ONLY",
    "PACK143_TOWER_FIREBALLS",
    "PACK144_STUMPET_ENCOUNTER",
    "PACK145_CORKPEDITE_ENCOUNTER",
    "PACK146_CLERK_STATIC",
    "PACK147_MANAGER_STATIC",
    "PACK148_DIRECTOR_STATIC",
    "PACK149_GUNYOLK_STATIC",
    "PACK150_MAD_MALLET_FACTORY_FIGHT",
    "PACK151_APPRENTICE_FIGHT",
    "PACK152_THREE_MACHINE_SHYSTER_SUBSTITUTE",
    "PACK153_THREE_DRILLBIT_SUBSTITUTE",
    "PACK154_SINGLE_SHYGUY_HENCHMAN",
    "PACK155_MAD_MALLET_HENCHMEN",
    "PACK156_PANDORITE_FIGHT_STATIC",
    "PACK157_HIDON_FIGHT_STATIC",
    "PACK158_BOXBOY_FIGHT_STATIC",
    "PACK159_CHESTER_FIGHT_STATIC",
    "PACK160_BOWYER_AERO_HENCHMEN",
    "PACK161_BOOSTER_FIGHT_STATIC",
    "PACK162_DUMMY_BOOSTER_POSSIBLY_UNUSED",
    "PACK163_CROCO1_FIGHT_STATIC",
    "PACK164_CROCO2_FIGHT_STATIC",
    "PACK165_UNUSED",
    "PACK166_JOHNNY_FIGHT_STATIC",
    "PACK167_CALAMARI_FIGHT_STATIC",
    "PACK168_BELOME1_FIGHT_STATIC",
    "PACK169_BELOME2_FIGHT_STATIC",
    "PACK170_UNUSED",
    "PACK171_VALENTINA_FIGHT_STATIC",
    "PACK172_CZAR_FIGHT_STATIC",
    "PACK173_MEGASMILAX_FIGHT_STATIC",
    "PACK174_COUNTDOWN_FIGHT_STATIC",
    "PACK175_BIRDETTA_FIGHT_STATIC",
    "PACK176_BUNDT_FIGHT_STATIC",
    "PACK177_KGGG_FIGHT_STATIC",
    "PACK178_JINX1_FIGHT_STATIC",
    "PACK179_MACK_FIGHT_STATIC",
    "PACK180_YARIDOVICH_FIGHT_STATIC",
    "PACK181_BOWYER_FIGHT_STATIC",
    "PACK182_AXEM_FIGHT_STATIC",
    "PACK183_HAMMERBRO_FIGHT_STATIC",
    "PACK184_CLOAKER_DOMINO_FIGHT_STATIC",
    "PACK185_SMITHY1_FIGHT_STATIC",
    "PACK186_EXOR_FIGHT_STATIC",
    "PACK187_JINX2_FIGHT_STATIC",
    "PACK188_JINX3_FIGHT_STATIC",
    "PACK189_JAGGER_FIGHT_STATIC",
    "PACK190_PYROSPHERE_HENCHMEN",
    "PACK191_HEAVY_TROOPAS",
    "PACK192_UNUSED",
    "PACK193_HELIO_HENCHMEN",
    "PACK194_BODYGUARD_PACK_1",
    "PACK195_BODYGUARD_PACK_2",
    "PACK196_GENO_CLONE_HENCHMAN",
    "PACK197_BOWSER_CLONE_HENCHMAN",
    "PACK198_TOADSTOOL_CLONE_HENCHMAN",
    "PACK199_CROOKS_ONLY",
    "PACK200_MARIO_CLONE_HENCHMAN",
    "PACK201_BIRDY_HENCHMEN",
    "PACK202_MALLOW_CLONE_HENCHMAN",
    "PACK203_MACHINE_AXEM_HENCHMEN",
    "PACK204_BLOOBER_HENCHMEN",
    "PACK205_BLUEBIRD_HENCHMEN",
    "PACK206_DESERT_SHOGUNS",
    "PACK207_MOKURA_BOSS_STATIC",
    "PACK208_DODO_BOSS_STATIC",
    "PACK209_MAGIKOOPA_BOSS_STATIC",
    "PACK210_BOOMER_BOSS_STATIC",
    "PACK211_MACHINE_MACK_PACK",
    "PACK212_MACHINE_BOWYER_PACK",
    "PACK213_MACHINE_YARIDOVICH_PACK",
    "PACK214_FACTORY_MACHINE_AXEMS",
    "PACK215_SMITHY_2_PACK",
    "PACK216_CULEX_BOSS_STATIC",
    "PACK217_FIRE_CRYSTAL_HENCHMAN",
    "PACK218_WATER_CRYSTAL_HENCHMAN",
    "PACK219_EARTH_CRYSTAL_HENCHMAN",
    "PACK220_WIND_CRYSTAL_HENCHMAN",
    "PACK221_GOOMBETTE_HENCHMEN",
    "PACK222_PIRANHA_HENCHMEN",
    "PACK223_EGGBERT_HENCHMEN",
    "PACK224_OBSTACLE_TERRA_COTTA",
    "PACK225_OBSTACLE_OERLIKON",
    "PACK226_OBSTACLE_SACKIT",
    "PACK227_OBSTACLE_CHOW",
    "PACK228_OBSTACLE_ALLEYRAT",
    "PACK229_OBSTACLE_BLOOBER",
    "PACK230_OBSTACLE_STINGER",
    "PACK231_OBSTACLE_GECKIT",
    "PACK232_OBSTACLE_ROBOMB",
    "PACK233_OBSTACLE_VOMER",
    "PACK234_OBSTACLE_MAGMUS",
    "PACK235_CHESTER_DUPE",
    "PACK236_OBSTACLE_GUGOOMBA",
    "PACK237_OBSTACLE_MALAKOOPA",
    "PACK238_OBSTACLE_BIGBOO",
    "PACK239_OBSTACLE_SLINGSHY",
    "PACK240_OBSTACLE_CHEWY",
    "PACK241_OBSTACLE_KIPPER",
    "PACK242_OBSTACLE_AMANITA",
    "PACK243_OBSTACLE_GREAPER",
    "PACK244_OBSTACLE_PYROSPHERE",
    "PACK245_OBSTACLE_LAKITU",
    "PACK246_OBSTACLE_ZEOSTAR",
    "PACK247_OBSTACLE_SHAMANS",
    "PACK248_AXEM_BLACK_ALONE",
    "PACK249_AXEM_PINK_ALONE",
    "PACK250_AXEM_YELLOW_ALONE",
    "PACK251_AXEM_GREEN_ALONE",
    "PACK252_DINGALING_ALONE",
    "PACK253_SMITHY_HENCHMEN_PACK_1",
    "PACK254_SMITHY_HENCHMEN_PACK_2",
    "PACK255_SMITHY_HENCHMEN_PACK_3",
]

AREA_OBJECTS = [
    "MARIO",
    "TOADSTOOL",
    "BOWSER",
    "GENO",
    "MALLOW",
    "DUMMY_0X05",
    "DUMMY_0X06",
    "DUMMY_0X07",
    "CHARACTER_IN_SLOT_1",
    "CHARACTER_IN_SLOT_2",
    "CHARACTER_IN_SLOT_3",
    "DUMMY_0X0B",
    "SCREEN_FOCUS",
    "LAYER_1",
    "LAYER_2",
    "LAYER_3",
    "MEM_70A8",
    "MEM_70A9",
    "MEM_70AA",
    "MEM_70AB",
    "NPC_0",
    "NPC_1",
    "NPC_2",
    "NPC_3",
    "NPC_4",
    "NPC_5",
    "NPC_6",
    "NPC_7",
    "NPC_8",
    "NPC_9",
    "NPC_10",
    "NPC_11",
    "NPC_12",
    "NPC_13",
    "NPC_14",
    "NPC_15",
    "NPC_16",
    "NPC_17",
    "NPC_18",
    "NPC_19",
    "NPC_20",
    "NPC_21",
    "NPC_22",
    "NPC_23",
    "NPC_24",
    "NPC_25",
    "NPC_26",
    "NPC_27",
]

INTRO_TEXT = [
    "SUPER_MARIO",
    "PRINCESS_TOADSTOOL",
    "KING_BOWSER",
    "MALLOW",
    "GENO",
    "IN",
]

CONTROLLER_INPUTS = ["LEFT", "RIGHT", "DOWN", "UP", "X", "A", "Y", "B"]

EQSLOTS = [
    "Weapon",
    "Armor",
    "Accessory",
]
ITEMS = [
    "DummyWeapon",
    "DummyArmor",
    "DummyAccessory",
    "Empty3",
    "Empty4",
    "Hammer",
    "FroggieStick",
    "NokNokShell",
    "PunchGlove",
    "FingerShot",
    "Cymbals",
    "Chomp",
    "Masher",
    "ChompShell",
    "SuperHammer",
    "HandGun",
    "WhompGlove",
    "SlapGlove",
    "TroopaShell",
    "Parasol",
    "HurlyGloves",
    "DoublePunch",
    "RibbitStick",
    "SpikedLink",
    "MegaGlove",
    "WarFan",
    "HandCannon",
    "StickyGlove",
    "UltraHammer",
    "SuperSlap",
    "DrillClaw",
    "StarGun",
    "SonicCymbal",
    "LazyShellWeapon",
    "FryingPan",
    "LuckyHammer",
    "Spare36",
    "Shirt",
    "Pants",
    "ThickShirt",
    "ThickPants",
    "MegaShirt",
    "MegaPants",
    "WorkPants",
    "MegaCape",
    "HappyShirt",
    "HappyPants",
    "HappyCape",
    "HappyShell",
    "PolkaDress",
    "SailorShirt",
    "SailorPants",
    "SailorCape",
    "NauticaDress",
    "CourageShell",
    "FuzzyShirt",
    "FuzzyPants",
    "FuzzyCape",
    "FuzzyDress",
    "FireShirt",
    "FirePants",
    "FireCape",
    "FireShell",
    "FireDress",
    "HeroShirt",
    "PrincePants",
    "StarCape",
    "HealShell",
    "RoyalDress",
    "SuperSuit",
    "LazyShellArmor",
    "Spare71",
    "Spare72",
    "Spare73",
    "ZoomShoes",
    "SafetyBadge",
    "JumpShoes",
    "SafetyRing",
    "Amulet",
    "ScroogeRing",
    "ExpBooster",
    "AttackScarf",
    "RareScarf",
    "BtubRing",
    "AntidotePin",
    "WakeUpPin",
    "FearlessPin",
    "TrueformPin",
    "CoinTrick",
    "GhostMedal",
    "JinxBelt",
    "Feather",
    "TroopaPin",
    "SignalRing",
    "QuartzCharm",
    "Spare95",
    "Mushroom",
    "MidMushroom",
    "MaxMushroom",
    "HoneySyrup",
    "MapleSyrup",
    "RoyalSyrup",
    "PickMeUp",
    "AbleJuice",
    "Bracer",
    "Energizer",
    "YoshiAde",
    "RedEssence",
    "KerokeroCola",
    "YoshiCookie",
    "PureWater",
    "SleepyBomb",
    "BadMushroom",
    "FireBomb",
    "IceBomb",
    "FlowerTab",
    "FlowerJar",
    "FlowerBox",
    "YoshiCandy",
    "FroggieDrink",
    "MukuCookie",
    "Elixir",
    "Megalixir",
    "SeeYa",
    "TempleKey",
    "GoodieBag",
    "EarlierTimes",
    "FreshenUp",
    "RareFrogCoin",
    "Wallet",
    "CricketPie",
    "RockCandy",
    "CastleKey1",
    "DebugBomb",
    "CastleKey2",
    "BambinoBomb",
    "SheepAttack",
    "CarboCookie",
    "ShinyStone",
    "Dummy139",
    "RoomKey",
    "ElderKey",
    "ShedKey",
    "LambsLure",
    "FrightBomb",
    "MysteryEgg",
    "BeetleBox",
    "BeetleBox2",
    "LuckyJewel",
    "Dummy149",
    "SopranoCard",
    "AltoCard",
    "TenorCard",
    "Crystalline",
    "PowerBlast",
    "WiltShroom",
    "RottenMush",
    "MoldyMush",
    "Seed",
    "Fertilizer",
    "WasteBasket",
    "BigBooFlag",
    "DryBonesFlag",
    "GreaperFlag",
    "SecretGame",
    "SCrowBomb",
    "CricketJam",
    "BaneBomb",
    "DoomBomb",
    "FearBomb",
    "SleepBomb",
    "MuteBomb",
    "Fireworks",
    "Bomb",
    "BrightCard",
    "Mushroom2",
    "StarEgg",
    "Dummy177",
    "Dummy178",
    "Dummy179",
    "Dummy180",
    "Dummy181",
    "Dummy182",
    "Dummy183",
    "Dummy184",
    "Dummy185",
    "Dummy186",
    "Dummy187",
    "Dummy188",
    "Dummy189",
    "Dummy190",
    "Dummy191",
    "Dummy192",
    "Dummy193",
    "Dummy194",
    "Dummy195",
    "Dummy196",
    "Dummy197",
    "Dummy198",
    "Dummy199",
    "Dummy200",
    "Dummy201",
    "Dummy202",
    "Dummy203",
    "Dummy204",
    "Dummy205",
    "Dummy206",
    "Dummy207",
    "Dummy208",
    "Dummy209",
    "Dummy210",
    "Dummy211",
    "Dummy212",
    "Dummy213",
    "Dummy214",
    "Dummy215",
    "Dummy216",
    "Dummy217",
    "Dummy218",
    "Dummy219",
    "Dummy220",
    "Dummy221",
    "Dummy222",
    "Dummy223",
    "Dummy224",
    "Dummy225",
    "Dummy226",
    "Dummy227",
    "Dummy228",
    "Dummy229",
    "Dummy230",
    "Dummy231",
    "Dummy232",
    "Dummy233",
    "Dummy234",
    "Dummy235",
    "Dummy236",
    "Dummy237",
    "Dummy238",
    "Dummy239",
    "Dummy240",
    "Dummy241",
    "Dummy242",
    "Dummy243",
    "Dummy244",
    "Dummy245",
    "Dummy246",
    "Dummy247",
    "Dummy248",
    "Dummy249",
    "Dummy250",
    "Dummy251",
    "Dummy252",
    "Dummy253",
    "Dummy254",
    "Dummy255",
]


def get_item_class(input):
    if isinstance(input, int):
        if ITEMS[input] is None:
            raise Exception("invalid item: %r" % input)
        return ITEMS[input]
    else:
        return ITEMS[input.index]


COLOURS = ["BLACK", "BLUE", "RED", "PINK", "GREEN", "AQUA", "YELLOW", "WHITE"]

PALETTE_TYPES = [
    "NOTHING",
    None,
    None,
    None,
    None,
    None,
    "GLOW",
    None,
    None,
    None,
    None,
    None,
    "SET_TO",
    None,
    "FADE_TO",
]

SCRIPT_TYPE_EVENT = "event"
SCRIPT_TYPE_ACTION = "action"

LAYER_TYPES = [
    "LAYER_L1",
    "LAYER_L2",
    "LAYER_L3",
    "LAYER_L4",
    "NPC_SPRITES",
    "BACKGROUND",
    "HALF_INTENSITY",
    "MINUS_SUB",
]

PACKETS = [
    "P000_FLASHING_POOF_FLOWER",
    "P001_FLASHING_POOF_MUSHROOM",
    "P002_BRIEF_KEY",
    "P003_BRIEF_STAR",
    "P004_MIMIC_POOF_ON_DEFEAT",
    "P005_BRIEF_POOF_BAG",
    "P006_STATIC_SIDEWAYS_SPARKLE",
    "P007_STATIC_SIDEWAYS_SPARKLE",
    "P008_STATIC_EXPLOSION",
    "P009_STATIC_BLUE_CLOUD",
    "P010_STATIC_SMALL_FROG_COIN",
    "P011_STATIC_LEVELUP_TEXT",
    "P012_STATIC_GREY_EXPLOSION",
    "P013_STATIC_MICROBOMB",
    "P014_UNUSED",
    "P015_UNUSED",
    "P016_BIG_COIN_BEING_COLLECTED",
    "P017_SMALL_MINIGAME_COIN",
    "P018_SMALL_COIN_BEING_COLLECTED",
    "P019_FROG_COIN_BEING_COLLECTED",
    "P020_WATER_DROPLETS_USE_7016_701A",
    "P021_FLASHING_SMALL_EXPLOSION",
    "P022_RECURSIVE_SPARKLES",
    "P023_LOOPING_SINGLE_SPARKLE",
    "P024_REGULAR_SOUND_EXPLOSION",
    "P025_UNUSED",
    "P026_UNUSED",
    "P027_UNUSED",
    "P028_MUSHROOM_THROWN_SOUTHWEST",
    "P029_SPARKLE_LINE_LOOPED",
    "P030_WATER_SPLASH_DROPS_SFX",
    "P031_LEVELUP_TEXT",
    "P032_BLUE_CLOUD",
    "P033_BOMB_EXPLOSION",
    "P034_GREY_EXPLOSION_SFX",
    "P035_FLOWER_FALL",
    "P036_MUSHROOM_FALL",
    "P037_ITEM_BAG_FALL",
    "P038_MUSHROOM_FALL_DEFAULT_PRIORITY",
    "P039_UNUSED",
    "P040_UNUSED",
    "P041_UNUSED",
    "P042_UNUSED",
    "P043_UNUSED",
    "P044_UNUSED",
    "P045_TELEPORTATION_SHINE",
    "P046_UNUSED",
    "P047_BLUE_FIRE_TRAIL",
    "P048_UNUSED",
    "P049_HAMMER_SPARKS_SFX",
    "P050_WATER_BLAST_SFX",
    "P051_DRILL_BIT",
    "P052_BOMB_EXPLOSION_FASTER",
    "P053_UNUSED",
    "P054_LEVELUP_BONUS_POW",
    "P055_LEVELUP_BONUS_S",
    "P056_LEVELUP_BONUS_HP",
    "P057_UNUSED",
    "P058_UNUSED",
    "P059_UNUSED",
    "P060_UNUSED",
    "P061_UNUSED",
    "P062_UNUSED",
    "P063_UNUSED",
    "P064_COIN_SHOWER_E",
    "P065_COIN_SHOWER_SE",
    "P066_COIN_SHOWER_S",
    "P067_COIN_SHOWER_SW",
    "P068_COIN_SHOWER_W",
    "P069_COIN_SHOWER_NW",
    "P070_COIN_SHOWER_N",
    "P071_COIN_SHOWER_NE",
    "P072_COIN_SHOWER_E_DB",
    "P073_UNUSED",
    "P074_UNUSED",
    "P075_UNUSED",
    "P076_UNUSED",
    "P077_UNUSED",
    "P078_UNUSED",
    "P079_UNUSED",
    "P080_FEATHER_CHEST",
    "P081_STAR_PIECE_CHEST",
    "P082_FEATHER_FALL",
    "P083_STAR_PIECE_FALL",
    "P084_FEATHER_STATIC",
    "P085_STAR_PIECE_STATIC",
    "P086_FLOWER_STATIC",
    "P087_MUSHROOM_STATIC",
    "P088_KEY_STATIC",
    "P089_KEY_FALLING",
    "P090_BAG_STATIC",
    "P091_RING_CHEST",
    "P092_RING_FALL",
    "P093_RING_STATIC",
    "P094_BROOCH_STATIC",
    "P095_BROOCH_FALL",
    "P096_BROOCH_CHEST",
    "P097_SHOES_STATIC",
    "P098_SHOES_FALL",
    "P099_SHOES_CHEST",
    "P100_BANANA_STATIC",
    "P101_BANANA_FALL",
    "P102_BANANA_CHEST",
    "P103_CROWN_CHEST",
    "P104_CROWN_FALL",
    "P105_CROWN_STATIC",
    "P106_COIN_FALL",
    "P107_SMALL_COIN_FALL",
    "P108_FROG_COIN_FALL",
    "P109_COIN_STATIC",
    "P110_SMALL_COIN_STATIC",
    "P111_FROG_COIN_STATIC",
    "P112_BOMB_STATIC",
    "P113_BOMB_FALL",
    "P114_BOMB_CHEST",
    "P115_EGG_STATIC",
    "P116_EGG_FALLING",
    "P117_EGG_CHEST",
    "P118_COOKIE_STATIC",
    "P119_COOKIE_FALL",
    "P120_COOKIE_CHEST",
    "P121_BERRY_STATIC",
    "P122_BERRY_FALL",
    "P123_BERRY_CHEST",
    "P124_CARD_STATIC",
    "P125_CARD_FALL",
    "P126_CARD_CHEST",
    "P127_GREEN_SYRUP_STATIC",
    "P128_GREEN_SYRUP_FALL",
    "P129_GREEN_SYRUP_CHEST",
    "P130_RED_SYRUP_STATIC",
    "P131_RED_SYRUP_FALL",
    "P132_RED_SYRUP_CHEST",
    "P133_BLUE_SYRUP_STATIC",
    "P134_BLUE_SYRUP_FALL",
    "P135_BLUE_SYRUP_CHEST",
    "P136_YELLOW_SYRUP_STATIC",
    "P137_YELLOW_SYRUP_FALL",
    "P138_YELLOW_SYRUP_CHEST",
    "P139_GREEN_JUICE_STATIC",
    "P140_GREEN_JUICE_FALL",
    "P141_GREEN_JUICE_CHEST",
    "P142_RED_JUICE_STATIC",
    "P143_RED_JUICE_FALL",
    "P144_RED_JUICE_CHEST",
    "P145_P_DRINK_STATIC",
    "P146_P_DRINK_FALL",
    "P147_P_DRINK_CHEST",
    "P148_D_DRINK_CHEST",
    "P149_D_DRINK_FALL",
    "P150_D_DRINK_STATIC",
    "P151_YELLOW_MUSIC_DRINK_CHEST",
    "P152_YELLOW_MUSIC_DRINK_FALL",
    "P153_YELLOW_MUSIC_DRINK_STATIC",
    "P154_BLUE_MUSIC_DRINK_CHEST",
    "P155_BLUE_MUSIC_DRINK_FALL",
    "P156_BLUE_MUSIC_DRINK_STATIC",
    "P157_FROG_DRINK_CHEST",
    "P158_FROG_DRINK_FALL",
    "P159_FROG_DRINK_STATIC",
    "P160_RED_MUSIC_DRINK_CHEST",
    "P161_RED_MUSIC_DRINK_FALL",
    "P162_RED_MUSIC_DRINK_STATIC",
    "P163_R_DRINK_STATIC",
    "P164_R_DRINK_FALL",
    "P165_R_DRINK_CHEST",
    "P166_MUSIC_NOTE_STATIC",
    "P167_MUSIC_NOTE_FALL",
    "P168_MUSIC_NOTE_CHEST",
    "P169_STAR_DRINK_STATIC",
    "P170_STAR_DRINK_FALL",
    "P171_STAR_DRINK_CHEST",
    "P172_UNUSED",
    "P173_GREEN_CANDY_STATIC",
    "P174_GREEN_CANDY_FALL",
    "P175_GREEN_CANDY_CHEST",
    "P176_BLUE_CANDY_STATIC",
    "P177_BLUE_CANDY_FALL",
    "P178_BLUE_CANDY_CHEST",
    "P179_GREEN_BOMB_STATIC",
    "P180_GREEN_BOMB_FALL",
    "P181_GREEN_BOMB_CHEST",
    "P182_RED_BOMB_STATIC",
    "P183_RED_BOMB_FALL",
    "P184_RED_BOMB_CHEST",
    "P185_BLUE_BOMB_STATIC",
    "P186_BLUE_BOMB_FALL",
    "P187_BLUE_BOMB_CHEST",
    "P188_YELLOW_BOMB_STATIC",
    "P189_YELLOW_BOMB_FALL",
    "P190_YELLOW_BOMB_CHEST",
    "P191_BEETLE_STATIC",
    "P192_BEETLE_FALL",
    "P193_BEETLE_CHEST",
    "P194_RED_MUSHROOM_STATIC",
    "P195_RED_MUSHROOM_FALL",
    "P196_RED_MUSHROOM_CHEST",
    "P197_GREEN_MUSHROOM_STATIC",
    "P198_GREEN_MUSHROOM_FALL",
    "P199_GREEN_MUSHROOM_CHEST",
    "P200_YELLOW_MUSHROOM_STATIC",
    "P201_YELLOW_MUSHROOM_FALL",
    "P202_YELLOW_MUSHROOM_CHEST",
    "P203_FRYING_PAN_STATIC",
    "P204_FRYING_PAN_FALL",
    "P205_FRYING_PAN_CHEST",
    "P206_HAMMER_STATIC",
    "P207_HAMMER_FALL",
    "P208_HAMMER_CHEST",
    "P209_STICK_STATIC",
    "P210_STICK_FALL",
    "P211_STICK_CHEST",
    "P212_CHOMP_STATIC",
    "P213_CHOMP_FALL",
    "P214_CHOMP_CHEST",
    "P215_FAN_STATIC",
    "P216_FAN_FALL",
    "P217_FAN_CHEST",
    "P218_RED_SHELL_STATIC",
    "P219_RED_SHELL_FALL",
    "P220_RED_SHELL_CHEST",
    "P221_GREEN_SHELL_STATIC",
    "P222_GREEN_SHELL_FALL",
    "P223_GREEN_SHELL_CHEST",
    "P224_PARASOL_STATIC",
    "P225_PARASOL_FALL",
    "P226_PARASOL_CHEST",
    "P227_UNUSED",
    "P228_UNUSED",
    "P229_UNUSED",
    "P230_UNUSED",
    "P231_UNUSED",
    "P232_UNUSED",
    "P233_UNUSED",
    "P234_UNUSED",
    "P235_UNUSED",
    "P236_UNUSED",
    "P237_UNUSED",
    "P238_UNUSED",
    "P239_UNUSED",
    "P240_UNUSED",
    "P241_UNUSED",
    "P242_UNUSED",
    "P243_UNUSED",
    "P244_UNUSED",
    "P245_UNUSED",
    "P246_UNUSED",
    "P247_UNUSED",
    "P248_UNUSED",
    "P249_UNUSED",
    "P250_UNUSED",
    "P251_UNUSED",
    "P252_UNUSED",
    "P253_UNUSED",
    "P254_UNUSED",
    "P255_UNUSED",
]

sys.stdout.reconfigure(encoding="utf-8")

searchable_vars = globals()


def namestr(obj, namespace):
    return [name for name in namespace if namespace[name] == obj]


def nameflag(byte, bit, namespace):
    return [
        name
        for name in namespace
        if isinstance(namespace[name], Flag)
        and namespace[name].byte == byte
        and namespace[name].bit == bit
    ]


def namevar(byte, namespace):
    return [
        name
        for name in namespace
        if (
            isinstance(namespace[name], ShortVar)
            or isinstance(namespace[name], ByteVar)
        )
        and int(namespace[name]) == int(byte)
    ]


def get_var_name_string(id, prefix):
    candidates = namestr(id, searchable_vars)
    r = re.compile("^%s.*" % prefix)
    newlist = list(filter(r.match, candidates))
    if len(newlist) != 1:
        print("%s %r" % (prefix, id))
        raise Exception(newlist)
    return newlist[0]


def get_flag(addr, bit):
    candidates = nameflag(addr, bit, searchable_vars)
    if len(candidates) != 1:
        print(f"0x{addr:04X}.{bit}")
        raise Exception(candidates)
    return candidates[0]


def get_var(addr):
    candidates = namevar(addr, searchable_vars)
    if len(candidates) != 1:
        print(f"0x{addr:04X}")
        raise Exception(candidates)
    return candidates[0]


def get_battlefield_name(id):
    return get_var_name_string(id, "BF")


def get_event_name(id):
    return get_var_name_string(id, "E")


def get_action_name(id):
    return get_var_name_string(id, "A")


def get_music_name(id):
    return get_var_name_string(id, "M")


def get_overworld_name(id):
    return get_var_name_string(id, "OW")


def get_packet_name(id):
    return PACKETS[id]


def get_room_name(id):
    return get_var_name_string(id, "R")


def get_scene_name(id):
    return get_var_name_string(id, "SC")


def get_shop_name(id):
    return get_var_name_string(id, "SH")


def get_sound_name(id):
    return get_var_name_string(id, "SO")


def get_tutorial_name(id):
    return get_var_name_string(id, "TU")


def get_pack_name(id):
    return get_var_name_string(id, "PACK")


actions_jumped_to = []
events_jumped_to = []


def convert_event_script_command(cmd, valid_identifiers):
    use_identifier: bool = cmd["identifier"] in valid_identifiers
    args = {}
    cls = None
    cmdargs = []
    include_argnames = True

    if "args" in cmd:
        cmdargs = cmd["args"]

    if cmd["command"] in [
        "action_queue",
        "start_embedded_action_script",
        "non_embedded_action_queue",
    ]:
        contents = convert_script(
            cmd["subscript"], valid_identifiers, convert_action_script_command
        )
        contents = ",\n\t\t".join(contents)
        contents = "[\n\t\t%s\n\t]" % contents
        if cmd["command"] == "action_queue":
            if cmdargs[1]:
                cls = "ActionQueueAsync"
            else:
                cls = "ActionQueueSync"  # why did i have these backwards lol
            args["target"] = AREA_OBJECTS[cmdargs[0]]
        elif cmd["command"] == "start_embedded_action_script":
            if cmdargs[1]:
                cls = "StartAsyncEmbeddedActionScript"
            else:
                cls = "StartSyncEmbeddedActionScript"
            args["target"] = AREA_OBJECTS[cmdargs[0]]
            args["prefix"] = f"0x{cmdargs[2]:02X}"
        elif cmd["command"] == "non_embedded_action_queue":
            cls = "NonEmbeddedActionQueue"
            args["required_offset"] = f"0x{cmd["internal_offset"]:02X}"
        args["subscript"] = contents
    elif cmd["command"] in ["set_action_script", "set_temp_action_script"]:
        if cmd["command"] == "set_action_script":
            if cmdargs[1]:
                cls = "SetSyncActionScript"
            else:
                cls = "SetAsyncActionScript"
        elif cmd["command"] == "set_temp_action_script":
            if cmdargs[1]:
                cls = "SetTempSyncActionScript"
            else:
                cls = "SetTempAsyncActionScript"
        include_argnames = False
        args["target"] = AREA_OBJECTS[cmdargs[0]]
        args["action_script_id"] = get_action_name(cmdargs[2])
    elif cmd["command"] in [
        "unsync_action_script",
        "summon_to_current_level_at_marios_coords",
        "summon_to_current_level",
        "remove_from_current_level",
        "pause_action_script",
        "resume_action_script",
        "enable_trigger",
        "disable_trigger",
        "stop_embedded_action_script",
        "reset_coords",
    ]:
        include_argnames = False
        if cmd["command"] == "unsync_action_script":
            cls = "UnsyncActionScript"
        elif cmd["command"] == "summon_to_current_level_at_marios_coords":
            cls = "SummonObjectToCurrentLevelAtMariosCoords"
        elif cmd["command"] == "summon_to_current_level":
            cls = "SummonObjectToCurrentLevel"
        elif cmd["command"] == "remove_from_current_level":
            cls = "RemoveObjectFromCurrentLevel"
        elif cmd["command"] == "pause_action_script":
            cls = "PauseActionScript"
        elif cmd["command"] == "resume_action_script":
            cls = "ResumeActionScript"
        elif cmd["command"] == "enable_trigger":
            cls = "EnableObjectTrigger"
        elif cmd["command"] == "disable_trigger":
            cls = "DisableObjectTrigger"
        elif cmd["command"] == "stop_embedded_action_script":
            cls = "StopEmbeddedActionScript"
        elif cmd["command"] == "reset_coords":
            cls = "ResetCoords"
        args["target"] = AREA_OBJECTS[cmdargs[0]]
    elif cmd["command"] == "add_const_to_var":
        cls = "AddConstToVar"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
        args["value"] = str(cmdargs[1])
    elif cmd["command"] == "inc":
        cls = "Inc"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
    elif cmd["command"] == "add_coins" or cmd["command"] == "add_frog_coins":
        if cmd["command"] == "add_coins":
            cls = "AddCoins"
        elif cmd["command"] == "add_frog_coins":
            cls = "AddFrogCoins"
        include_argnames = False
        if cmdargs[0] == 0x7000:
            args["amount"] = get_var(cmdargs[0])
        else:
            args["amount"] = str(cmdargs[0])
    elif cmd["command"] == "add_7000_to_current_FP":
        cls = "Add7000ToCurrentFP"
    elif cmd["command"] == "add_7000_to_max_FP":
        cls = "Add7000ToMaxFP"
    elif cmd["command"] == "add_var_to_7000":
        cls = "AddVarTo7000"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
    elif cmd["command"] == "adjust_music_tempo":
        args["duration"] = str(cmdargs[2])
        if cmdargs[1] >= 0x80:
            cls = "SpeedUpMusicTempoBy"
            args["change"] = str((0x100 - cmdargs[1]) & 0xFF)
        else:
            cls = "SlowDownMusicTempoBy"
            args["change"] = str(cmdargs[1])
    elif cmd["command"] == "adjust_music_pitch":
        args["duration"] = str(cmdargs[2])
        if cmdargs[1] >= 0x80:
            cls = "IncreaseMusicPitchBy"
            args["change"] = str((0x100 - cmdargs[1]) & 0xFF)
        else:
            cls = "ReduceMusicPitchBy"
            args["change"] = str(cmdargs[1])
    elif cmd["command"] == "append_to_dialog_at_7000":
        cls = "AppendDialogAt7000ToCurrentDialog"
        args["closable"] = "True" if 5 in cmdargs[0] else "False"
        args["sync"] = "False" if 7 in cmdargs[0] else "True"
    elif cmd["command"] == "apply_tile_mod" or cmd["command"] == "apply_solidity_mod":
        if cmd["command"] == "apply_tile_mod":
            cls = "ApplyTileModToLevel"
            args["use_alternate"] = "True" if 15 in cmdargs[2] else "False"
        elif cmd["command"] == "apply_solidity_mod":
            cls = "ApplySolidityModToLevel"
            args["permanent"] = "True" if 15 in cmdargs[2] else "False"
        args["room_id"] = get_room_name(cmdargs[0])
        args["mod_id"] = str(cmdargs[1])
    elif cmd["command"] == "circle_mask_expand_from_screen_center":
        cls = "CircleMaskExpandFromScreenCenter"
    elif (
        cmd["command"] == "circle_mask_nonstatic"
        or cmd["command"] == "circle_mask_static"
    ):
        cls = "CircleMaskShrinkToObject"
        args["target"] = AREA_OBJECTS[cmdargs[0]]
        args["width"] = str(cmdargs[1])
        args["speed"] = str(cmdargs[2])
        args["static"] = (
            "False" if cmd["command"] == "circle_mask_nonstatic" else "True"
        )
    elif cmd["command"] == "circle_mask_shrink_to_screen_center":
        cls = "CircleMaskShrinkToScreenCenter"
    elif (
        cmd["command"]
        == "clear_7016_to_7018_and_isolate_701A_high_byte_if_7018_bit_0_set"
    ):
        cls = "Clear7016To7018AndIsolate701AHighByteIf7018Bit0Set"
    elif cmd["command"] == "clear_bit":
        cls = "ClearBit"
        include_argnames = False
        args["flag"] = get_flag(cmdargs[0], cmdargs[1])
    elif cmd["command"] == "close_dialog":
        cls = "CloseDialog"
    elif cmd["command"] == "create_packet_at_npc_coords":
        cls = "CreatePacketAtObjectCoords"
        args["packet"] = get_packet_name(cmdargs[0])
        args["target_npc"] = AREA_OBJECTS[cmdargs[1]]
        args["destinations"] = '["%s"]' % cmdargs[2]
    elif cmd["command"] == "create_packet_at_7010":
        cls = "CreatePacketAt7010"
        args["packet"] = get_packet_name(cmdargs[0])
        args["destinations"] = '["%s"]' % cmdargs[1]
    elif cmd["command"] == "create_packet_at_7010_with_event":
        cls = "CreatePacketAt7010WithEvent"
        args["packet"] = get_packet_name(cmdargs[0])
        args["event_id"] = get_event_name(cmdargs[1])
        args["destinations"] = '["%s"]' % cmdargs[2]
    elif cmd["command"] == "deactivate_sound_channels":
        cls = "DeactivateSoundChannels"
        include_argnames = False
        bits = cmdargs[0]
        args["bits"] = "%r" % bits
    elif cmd["command"] == "dec":
        cls = "Dec"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
    elif (
        cmd["command"] == "dec_var_from_7000"
        or cmd["command"] == "dec_short_mem_from_7000"
    ):
        cls = "DecVarFrom7000"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
    elif cmd["command"] == "dec_coins":
        cls = "Dec7000FromCoins"
    elif cmd["command"] == "dec_7000_from_current_FP":
        cls = "Dec7000FromCurrentFP"
    elif cmd["command"] == "dec_7000_from_current_HP":
        cls = "Dec7000FromCurrentHP"
        include_argnames = False
        args["character"] = AREA_OBJECTS[cmdargs[0]]
    elif cmd["command"] == "dec_7000_from_frog_coins":
        cls = "Dec7000FromFrogCoins"
    elif cmd["command"] == "display_intro_title":
        cls = "DisplayIntroTitleText"
        args["text"] = INTRO_TEXT[cmdargs[1]]
        args["y"] = str(cmdargs[0])
    elif (
        cmd["command"] == "enable_controls"
        or cmd["command"] == "enable_controls_until_return"
    ):
        if cmd["command"] == "enable_controls":
            cls = "EnableControls"
        elif cmd["command"] == "enable_controls_until_return":
            cls = "EnableControlsUntilReturn"
        dirs = []
        for f in cmdargs[0]:
            dirs.append(CONTROLLER_INPUTS[f])
        include_argnames = False
        args["enabled_buttons"] = "[%s]" % (", ".join(dirs))
    elif cmd["command"] in [
        "summon_to_level",
        "remove_from_level",
        "enable_trigger_in_level",
        "disable_trigger_in_level",
    ]:
        if cmd["command"] == "summon_to_level":
            cls = "SummonObjectToSpecificLevel"
        elif cmd["command"] == "remove_from_level":
            cls = "RemoveObjectFromSpecificLevel"
        elif cmd["command"] == "enable_trigger_in_level":
            cls = "EnableObjectTriggerInSpecificLevel"
        elif cmd["command"] == "disable_trigger_in_level":
            cls = "DisableObjectTriggerInSpecificLevel"
        include_argnames = False
        args["object"] = AREA_OBJECTS[cmdargs[0]]
        args["level_id"] = get_room_name(cmdargs[1])
    elif cmd["command"] == "end_all":
        cls = "ReturnAll"
    elif cmd["command"] == "end_loop":
        cls = "EndLoop"
    elif cmd["command"] == "enable_trigger_at_70A8":
        cls = "EnableTriggerOfObjectAt70A8InCurrentLevel"
    elif cmd["command"] == "disable_trigger_at_70A8":
        cls = "DisableTriggerOfObjectAt70A8InCurrentLevel"
    elif cmd["command"] == "enter_area":
        cls = "EnterArea"
        args["room_id"] = get_room_name(cmdargs[0])
        args["face_direction"] = DIRECTIONS[cmdargs[1]]
        args["x"] = str(cmdargs[2])
        args["y"] = str(cmdargs[3] & 127)
        args["z"] = str(cmdargs[4])
        if 31 in cmdargs[5]:
            args["z_add_half_unit"] = "True"
        if 11 in cmdargs[5]:
            args["show_banner"] = "True"
        if 15 in cmdargs[5]:
            args["run_entrance_event"] = "True"
    elif cmd["command"] == "equip_item_to_character":
        cls = "EquipItemToCharacter"
        args["item"] = get_item_class(cmdargs[1])
        args["character"] = AREA_OBJECTS[cmdargs[0]]
        include_argnames = False
    elif cmd["command"] == "exor_crashes_into_keep":
        cls = "ExorCrashesIntoKeep"
    elif cmd["command"] in [
        "fade_in_from_black_sync",
        "fade_in_from_black_async",
        "fade_in_from_black_sync_duration",
        "fade_in_from_black_async_duration",
    ]:
        cls = "FadeInFromBlack"
        if cmd["command"] in [
            "fade_in_from_black_async",
            "fade_in_from_black_async_duration",
        ]:
            args["sync"] = "False"
        else:
            args["sync"] = "True"
        if cmd["command"] in [
            "fade_in_from_black_sync_duration",
            "fade_in_from_black_async_duration",
        ]:
            args["duration"] = cmdargs[0]
    elif cmd["command"] == "fade_in_from_colour_duration":
        cls = "FadeInFromColour"
        args["duration"] = cmdargs[0]
        args["colour"] = COLOURS[cmdargs[1]]
    elif cmd["command"] == "fade_in_music":
        cls = "FadeInMusic"
        args["music_id"] = get_music_name(cmdargs[0])
        include_argnames = False
    elif cmd["command"] == "fade_out_music":
        cls = "FadeOutMusic"
    elif cmd["command"] == "fade_out_music_FDA3":
        cls = "FadeOutMusicFDA3"
    elif cmd["command"] == "fade_out_music_to_volume":
        cls = "FadeOutMusicToVolume"
        args["duration"] = cmdargs[0]
        args["volume"] = cmdargs[1]
    elif cmd["command"] == "fade_out_sound_to_volume":
        cls = "FadeOutSoundToVolume"
        args["duration"] = cmdargs[0]
        args["volume"] = cmdargs[1]
    elif cmd["command"] in [
        "fade_out_to_black_sync",
        "fade_out_to_black_async",
        "fade_out_to_black_sync_duration",
        "fade_out_to_black_async_duration",
    ]:
        cls = "FadeOutToBlack"
        if cmd["command"] in [
            "fade_out_to_black_async",
            "fade_out_to_black_async_duration",
        ]:
            args["sync"] = "False"
        else:
            args["sync"] = "True"
        if cmd["command"] in [
            "fade_out_to_black_sync_duration",
            "fade_out_to_black_async_duration",
        ]:
            args["duration"] = str(cmdargs[0])
    elif cmd["command"] == "fade_out_to_colour_duration":
        cls = "FadeOutToColour"
        args["duration"] = str(cmdargs[0])
        args["colour"] = COLOURS[cmdargs[1]]
    elif cmd["command"] == "freeze_all_npcs_until_return":
        cls = "FreezeAllNPCsUntilReturn"
    elif cmd["command"] == "freeze_camera":
        cls = "FreezeCamera"
    elif cmd["command"] == "generate_random_num_from_range_var":
        cls = "GenerateRandomNumFromRangeVar"
        args["address"] = get_var(cmdargs[0])
        include_argnames = False
    elif cmd["command"] == "if_0210_bits_012_clear_do_not_jump":
        cls = "If0210Bits012ClearDoNotJump"
        include_argnames = False
        args["destinations"] = '["%s"]' % cmdargs[0]
    elif cmd["command"] == "inc_exp_by_packet":
        cls = "IncEXPByPacket"
    elif cmd["command"] == "initiate_battle_mask":
        cls = "InitiateBattleMask"
    elif cmd["command"] == "jmp":
        cls = "Jmp"
        include_argnames = False
        args["destinations"] = '["%s"]' % cmdargs[0]
    elif cmd["command"] == "jmp_fork_mario_on_object":
        cls = "JmpIfMarioOnAnObjectOrNot"
        include_argnames = False
        args["destinations"] = "%r" % cmdargs
    elif cmd["command"] == "jmp_if_316D_is_3":
        cls = "JmpIf316DIs3"
        args["destinations"] = '["%s"]' % cmdargs[0]
        include_argnames = False
    elif cmd["command"] in ["jmp_if_7000_all_bits_clear", "jmp_if_7000_any_bits_set"]:
        if cmd["command"] == "jmp_if_7000_all_bits_clear":
            cls = "JmpIf7000AllBitsClear"
        elif cmd["command"] == "jmp_if_7000_any_bits_set":
            cls = "JmpIf7000AnyBitsSet"
        bits = cmdargs[0]
        args["bits"] = "%r" % bits
        args["destinations"] = '["%s"]' % cmdargs[1]
    elif cmd["command"] == "jmp_if_audio_memory_at_least":
        cls = "JmpIfAudioMemoryIsAtLeast"
        args["threshold"] = str(cmdargs[0])
        args["destinations"] = '["%s"]' % cmdargs[1]
        include_argnames = False
    elif cmd["command"] == "jmp_if_audio_memory_equals":
        cls = "JmpIfAudioMemoryEquals"
        args["value"] = cmdargs[0]
        args["destinations"] = '["%s"]' % cmdargs[1]
        include_argnames = False
    elif cmd["command"] == "jmp_if_bit_clear":
        cls = "JmpIfBitClear"
        include_argnames = False
        args["bit"] = get_flag(cmdargs[0], cmdargs[1])
        args["destinations"] = '["%s"]' % cmdargs[2]
    elif cmd["command"] == "jmp_if_bit_set":
        cls = "JmpIfBitSet"
        include_argnames = False
        args["bit"] = get_flag(cmdargs[0], cmdargs[1])
        args["destinations"] = '["%s"]' % cmdargs[2]
    elif cmd["command"] == "jmp_if_comparison_result_is_greater_or_equal":
        cls = "JmpIfComparisonResultIsGreaterOrEqual"
        include_argnames = False
        args["destinations"] = '["%s"]' % cmdargs[0]
    elif cmd["command"] == "jmp_if_comparison_result_is_lesser":
        cls = "JmpIfComparisonResultIsLesser"
        include_argnames = False
        args["destinations"] = '["%s"]' % cmdargs[0]
    elif cmd["command"] == "jmp_if_dialog_option_b":
        cls = "JmpIfDialogOptionBSelected"
        args["destinations"] = '["%s"]' % cmdargs[0]
        include_argnames = False
    elif cmd["command"] == "jmp_if_dialog_option_b_or_c":
        cls = "JmpIfDialogOptionBOrCSelected"
        include_argnames = False
        args["destinations"] = "%r" % cmdargs
    elif cmd["command"] == "jmp_if_loaded_memory_is_0":
        cls = "JmpIfLoadedMemoryIs0"
        include_argnames = False
        args["destinations"] = '["%s"]' % cmdargs[0]
    elif cmd["command"] == "jmp_if_loaded_memory_is_not_0":
        cls = "JmpIfLoadedMemoryIsNot0"
        include_argnames = False
        args["destinations"] = '["%s"]' % cmdargs[0]
    elif cmd["command"] == "jmp_if_loaded_memory_is_below_0":
        cls = "JmpIfLoadedMemoryIsBelow0"
        include_argnames = False
        args["destinations"] = '["%s"]' % cmdargs[0]
    elif cmd["command"] == "jmp_if_loaded_memory_is_above_or_equal_0":
        cls = "JmpIfLoadedMemoryIsAboveOrEqual0"
        include_argnames = False
        args["destinations"] = '["%s"]' % cmdargs[0]
    elif cmd["command"] == "jmp_if_mario_in_air":
        cls = "JmpIfMarioInAir"
        include_argnames = False
        args["destinations"] = '["%s"]' % cmdargs[0]
    elif cmd["command"] == "jmp_if_mario_on_object":
        cls = "JmpIfMarioOnObject"
        include_argnames = False
        args["object"] = AREA_OBJECTS[cmdargs[0]]
        args["destinations"] = '["%s"]' % cmdargs[1]
    elif cmd["command"] == "jmp_if_mem_704x_at_7000_bit_set":
        cls = "JmpIfMem704XAt7000BitSet"
        include_argnames = False
        args["destinations"] = '["%s"]' % cmdargs[0]
    elif cmd["command"] == "jmp_if_mem_704x_at_7000_bit_clear":
        cls = "JmpIfMem704XAt7000BitClear"
        include_argnames = False
        args["destinations"] = '["%s"]' % cmdargs[0]
    elif cmd["command"] == "jmp_if_object_in_air":
        cls = "JmpIfObjectInAir"
        include_argnames = False
        args["object"] = AREA_OBJECTS[cmdargs[0]]
        args["destinations"] = '["%s"]' % cmdargs[1]
    elif cmd["command"] in ["jmp_if_object_in_level", "jmp_if_object_not_in_level"]:
        if cmd["command"] == "jmp_if_object_in_level":
            cls = "JmpIfObjectInSpecificLevel"
        elif cmd["command"] == "jmp_if_object_not_in_level":
            cls = "JmpIfObjectNotInSpecificLevel"
        include_argnames = False
        args["object"] = AREA_OBJECTS[cmdargs[0]]
        args["level_id"] = get_room_name(cmdargs[1])
        args["destinations"] = '["%s"]' % cmdargs[2]
    elif cmd["command"] in [
        "jmp_if_object_trigger_enabled",
        "jmp_if_object_trigger_disabled",
    ]:
        if cmd["command"] == "jmp_if_object_trigger_enabled":
            cls = "JmpIfObjectTriggerEnabledInSpecificLevel"
        elif cmd["command"] == "jmp_if_object_trigger_disabled":
            cls = "JmpIfObjectTriggerDisabledInSpecificLevel"
        include_argnames = False
        args["object"] = AREA_OBJECTS[cmdargs[0]]
        args["level_id"] = get_room_name(cmdargs[1])
        args["destinations"] = '["%s"]' % cmdargs[2]
    elif cmd["command"] == "jmp_if_object_underwater":
        cls = "JmpIfObjectIsUnderwater"
        include_argnames = False
        args["object"] = AREA_OBJECTS[cmdargs[0]]
        args["destinations"] = '["%s"]' % cmdargs[1]
    elif cmd["command"] == "jmp_if_objects_action_script_running":
        cls = "JmpIfObjectActionScriptIsRunning"
        include_argnames = False
        args["object"] = AREA_OBJECTS[cmdargs[0]]
        args["destinations"] = '["%s"]' % cmdargs[1]
    elif cmd["command"] in [
        "jmp_if_objects_less_than_xy_steps_apart",
        "jmp_if_objects_less_than_xy_steps_apart_same_z_coord",
    ]:
        if cmd["command"] == "jmp_if_objects_less_than_xy_steps_apart":
            cls = "JmpIfObjectsAreLessThanXYStepsApart"
        elif cmd["command"] == "jmp_if_objects_less_than_xy_steps_apart_same_z_coord":
            cls = "JmpIfObjectsAreLessThanXYStepsApartSameZCoord"
        include_argnames = False
        args["object_1"] = AREA_OBJECTS[cmdargs[0]]
        args["object_2"] = AREA_OBJECTS[cmdargs[1]]
        args["x"] = str(cmdargs[2])
        args["y"] = str(cmdargs[3])
        args["destinations"] = '["%s"]' % cmdargs[4]
    elif cmd["command"] == "jmp_if_present_in_current_level":
        cls = "JmpIfObjectInCurrentLevel"
        include_argnames = False
        args["object"] = AREA_OBJECTS[cmdargs[0]]
        args["destinations"] = '["%s"]' % cmdargs[1]
    elif cmd["command"] == "jmp_if_random_above_128":
        cls = "JmpIfRandom1of2"
        include_argnames = False
        args["destinations"] = '["%s"]' % cmdargs[0]
    elif cmd["command"] == "jmp_if_random_above_66":
        cls = "JmpIfRandom2of3"
        include_argnames = False
        args["destinations"] = "%r" % cmdargs
    elif cmd["command"] == "jmp_if_var_equals_const":
        cls = "JmpIfVarEqualsConst"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
        if cmdargs[0] == 0x70A7:
            try:
                args["value"] = get_item_class(cmdargs[1])
            except:
                args["value"] = str(cmdargs[1])
        else:
            args["value"] = str(cmdargs[1])
        args["destinations"] = '["%s"]' % cmdargs[2]
    elif (
        cmd["command"] == "jmp_if_var_not_equals_const"
        or cmd["command"] == "jmp_if_var_not_equals_short"
    ):
        cls = "JmpIfVarNotEqualsConst"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
        if cmdargs[0] == 0x70A7:
            try:
                args["value"] = get_item_class(cmdargs[1])
            except:
                args["value"] = str(cmdargs[1])
        else:
            args["value"] = str(cmdargs[1])
        args["destinations"] = '["%s"]' % cmdargs[2]
    elif cmd["command"] == "jmp_to_event":
        cls = "JmpToEvent"
        include_argnames = False
        args["destination"] = get_event_name(cmdargs[0])
    elif cmd["command"] == "jmp_to_start_of_this_script":
        cls = "JmpToStartOfThisScript"
    elif cmd["command"] == "jmp_to_start_of_this_script_FA":
        cls = "JmpToStartOfThisScriptFA"
    elif cmd["command"] == "jmp_to_subroutine":
        cls = "JmpToSubroutine"
        include_argnames = False
        args["destinations"] = '["%s"]' % cmdargs[0]
    elif cmd["command"] == "join_party":
        cls = "CharacterJoinsParty"
        include_argnames = False
        args["object"] = AREA_OBJECTS[cmdargs[0]]
    elif cmd["command"] == "leave_party":
        cls = "CharacterLeavesParty"
        include_argnames = False
        args["object"] = AREA_OBJECTS[cmdargs[0]]
    elif cmd["command"] == "reactivate_trigger_if_mario_on_top_of_object":
        cls = "ReactivateObject70A8TriggerIfMarioOnTopOfIt"
    elif cmd["command"] == "mario_glows":
        cls = "MarioGlows"
    elif cmd["command"] == "set_mem_704x_at_7000_bit":
        cls = "SetMem704XAt7000Bit"
    elif cmd["command"] == "clear_mem_704x_at_7000_bit":
        cls = "ClearMem704XAt7000Bit"
    elif cmd["command"] in [
        "mem_7000_xor_const",
        "mem_7000_or_const",
        "mem_7000_and_const",
    ]:
        if cmd["command"] == "mem_7000_and_const":
            cls = "Mem7000AndConst"
        elif cmd["command"] == "mem_7000_or_const":
            cls = "Mem7000OrConst"
        elif cmd["command"] == "mem_7000_xor_const":
            cls = "Mem7000XorConst"
        include_argnames = False
        args["value"] = f"0x{cmdargs[0]:04X}"
    elif cmd["command"] in ["mem_7000_or_var", "mem_7000_and_var"]:
        if cmd["command"] == "mem_7000_and_var":
            cls = "Mem7000AndVar"
        elif cmd["command"] == "mem_7000_or_var":
            cls = "Mem7000OrVar"
        elif cmd["command"] == "mem_7000_xor_var":
            cls = "Mem7000XorVar"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
    elif cmd["command"] == "mem_7000_shift_left":
        cls = "VarShiftLeft"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
        args["shift"] = str(cmdargs[1])
    elif cmd["command"] == "move_7010_7015_to_7016_701B":
        cls = "Move70107015To7016701B"
    elif cmd["command"] == "move_7016_701B_to_7010_7015":
        cls = "Move7016701BTo70107015"
    elif cmd["command"] == "compare_var_to_const":
        cls = "CompareVarToConst"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
        if cmdargs[0] == 0x70A7:
            try:
                args["value"] = get_item_class(cmdargs[1])
            except:
                args["value"] = str(cmdargs[1])
        else:
            args["value"] = str(cmdargs[1])
    elif cmd["command"] == "compare_7000_to_var":
        cls = "Compare7000ToVar"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
    elif cmd["command"] == "move_script_to_main_thread":
        cls = "MoveScriptToMainThread"
    elif cmd["command"] == "move_script_to_background_thread_1":
        cls = "MoveScriptToBackgroundThread1"
    elif cmd["command"] == "move_script_to_background_thread_2":
        cls = "MoveScriptToBackgroundThread2"
    elif (
        cmd["command"]
        == "multiply_and_add_mem_3148_store_to_offset_7FB000_plus_outputx2"
    ):
        cls = "MultiplyAndAddMem3148StoreToOffset7fB000PlusOutputX2"
        args["adding"] = str(cmdargs[0])
        args["multiplying"] = str(cmdargs[1])
    elif cmd["command"] == "open_location":
        cls = "ExitToWorldMap"
        args["area"] = get_overworld_name(cmdargs[0])
        if 5 in cmdargs[1]:
            args["bit_5"] = "True"
        if 6 in cmdargs[1]:
            args["bit_6"] = "True"
        if 7 in cmdargs[1]:
            args["bit_7"] = "True"
    elif cmd["command"] == "open_menu_or_run_event_sequence":
        cls = "RunMenuOrEventSequence"
        include_argnames = False
        args["scene"] = get_scene_name(cmdargs[0])
    elif cmd["command"] == "open_save_menu":
        cls = "OpenSaveMenu"
    elif cmd["command"] == "open_shop":
        cls = "OpenShop"
        include_argnames = False
        args["shop_id"] = get_shop_name(cmdargs[0])
    elif cmd["command"] == "palette_set":
        cls = "PaletteSet"
        args["palette_set"] = str(cmdargs[0])
        args["row"] = str(cmdargs[1])
        if 0 in cmdargs[2]:
            args["bit_0"] = "True"
        if 1 in cmdargs[2]:
            args["bit_1"] = "True"
        if 2 in cmdargs[2]:
            args["bit_2"] = "True"
        if 3 in cmdargs[2]:
            args["bit_3"] = "True"
    elif cmd["command"] == "palette_set_morphs":
        cls = "PaletteSetMorphs"
        args["palette_type"] = PALETTE_TYPES[cmdargs[0]]
        args["duration"] = str(cmdargs[1])
        args["palette_set"] = str(cmdargs[2])
        args["row"] = str(cmdargs[3])
    elif cmd["command"] == "pause":
        cls = "Pause"
        include_argnames = False
        args["length"] = str(cmdargs[0])
    elif cmd["command"] == "pause_script_if_menu_open":
        cls = "PauseScriptIfMenuOpen"
    elif cmd["command"] == "pause_script_until_effect_done":
        cls = "PauseScriptUntilEffectDone"
    elif cmd["command"] == "pause_script_resume_on_next_dialog_page_a":
        cls = "PauseScriptResumeOnNextDialogPageA"
    elif cmd["command"] == "pause_script_resume_on_next_dialog_page_b":
        cls = "PauseScriptResumeOnNextDialogPageB"
    elif cmd["command"] == "pixelate_layers":
        cls = "PixelateLayers"
        layers = []
        for n in cmdargs[0]:
            layers.append(LAYER_TYPES[n])
        args["layers"] = "[%s]" % ", ".join(layers)
        args["pixel_size"] = str(cmdargs[1])
        args["duration"] = str(cmdargs[2] & 0x3F)
        args["bit_6"] = "True" if cmdargs[2] & 0x40 != 0 else "False"
        args["bit_7"] = "True" if cmdargs[2] & 0x80 != 0 else "False"
    elif cmd["command"] == "play_music":
        cls = "PlayMusic"
        args["music_id"] = get_music_name(cmdargs[0])
        include_argnames = False
    elif cmd["command"] == "play_music_default_volume":
        cls = "PlayMusicAtDefaultVolume"
        args["music_id"] = get_music_name(cmdargs[0])
        include_argnames = False
    elif cmd["command"] == "play_music_current_volume":
        cls = "PlayMusicAtCurrentVolume"
        args["music_id"] = get_music_name(cmdargs[0])
        include_argnames = False
    elif cmd["command"] == "play_sound":
        cls = "PlaySound"
        args["sound"] = get_sound_name(cmdargs[0])
        args["channel"] = str(cmdargs[1])
    elif cmd["command"] in ["play_sound_balance", "play_sound_balance_FD9D"]:
        if cmd["command"] == "play_sound_balance":
            cls = "PlaySoundBalance"
        else:
            cls = "PlaySoundBalanceFD9D"
        args["sound"] = get_sound_name(cmdargs[0])
        args["balance"] = str(cmdargs[1])
    elif cmd["command"] == "priority_set":
        cls = "PrioritySet"
        mainscreen = []
        for n in cmdargs[0]:
            mainscreen.append(LAYER_TYPES[n])
        subscreen = []
        for n in cmdargs[1]:
            subscreen.append(LAYER_TYPES[n])
        colour_math = []
        for n in cmdargs[2]:
            colour_math.append(LAYER_TYPES[n])
        args["mainscreen"] = "[%s]" % ", ".join(mainscreen)
        args["subscreen"] = "[%s]" % ", ".join(subscreen)
        args["colour_math"] = "[%s]" % ", ".join(colour_math)
    elif cmd["command"] == "put_70A7_equips_inventory":
        cls = "Store70A7ToEquipsInventory"
    elif cmd["command"] == "put_inventory":
        cls = "AddToInventory"
        include_argnames = False
        if cmdargs[0] == 0x70A7:
            args["item"] = get_var(0x70A7)
        else:
            args["item"] = get_item_class(cmdargs[0])
    elif cmd["command"] == "read_from_address":
        cls = "ReadFromAddress"
        include_argnames = False
        args["address"] = f"0x{cmdargs[0]:04X}"
    elif cmd["command"] == "remember_last_object":
        cls = "RememberLastObject"
    elif cmd["command"] == "remove_object_at_70A8_from_current_level":
        cls = "RemoveObjectAt70A8FromCurrentLevel"
    elif cmd["command"] == "remove_one_from_inventory":
        cls = "RemoveOneOfItemFromInventory"
        include_argnames = False
        args["item"] = get_item_class(cmdargs[0])
    elif cmd["command"] == "reset_and_choose_game":
        cls = "ResetAndChooseGame"
    elif cmd["command"] == "reset_game":
        cls = "ResetGame"
    elif cmd["command"] == "reset_priority_set":
        cls = "ResetPrioritySet"
    elif cmd["command"] == "restore_all_fp":
        cls = "RestoreAllFP"
    elif cmd["command"] == "restore_all_hp":
        cls = "RestoreAllHP"
    elif cmd["command"] == "resume_background_event":
        cls = "ResumeBackgroundEvent"
        include_argnames = False
        args["timer_var"] = get_var(cmdargs[0])
    elif cmd["command"] == "ret":
        cls = "Return"
    elif cmd["command"] == "run_background_event":
        cls = "RunBackgroundEvent"
        args["event_id"] = get_event_name(cmdargs[0])
        if 13 in cmdargs[1]:
            args["return_on_level_exit"] = "True"
        if 14 in cmdargs[1]:
            args["bit_6"] = "True"
        if 15 in cmdargs[1]:
            args["run_as_second_script"] = "True"
    elif cmd["command"] in [
        "run_background_event_with_pause",
        "run_background_event_with_pause_return_on_exit",
    ]:
        if cmd["command"] == "run_background_event_with_pause":
            cls = "RunBackgroundEventWithPause"
        else:
            cls = "RunBackgroundEventWithPauseReturnOnExit"
        args["event_id"] = get_event_name(cmdargs[0])
        args["timer_var"] = get_var(cmdargs[1])
        if 12 in cmdargs[2]:
            args["bit_4"] = "True"
        if 13 in cmdargs[2]:
            args["bit_5"] = "True"
    elif cmd["command"] == "run_dialog":
        cls = "RunDialog"
        if cmdargs[0] == 0x7000:
            args["dialog_id"] = get_var(0x7000)
        else:
            args["dialog_id"] = DIALOGS[cmdargs[0]]
        args["above_object"] = AREA_OBJECTS[cmdargs[1]]
        args["closable"] = "True" if 5 in cmdargs[2] else "False"
        args["sync"] = "False" if 7 in cmdargs[2] else "True"
        args["multiline"] = "True" if 14 in cmdargs[2] else "False"
        args["use_background"] = "True" if 15 in cmdargs[2] else "False"
        if 6 in cmdargs[2]:
            args["bit_6"] = "True"
    elif cmd["command"] == "run_dialog_duration":
        cls = "RunDialogForDuration"
        args["dialog_id"] = DIALOGS[cmdargs[0]]
        args["duration"] = str(cmdargs[1])
        args["sync"] = "False" if 7 in cmdargs[2] else "True"
    elif cmd["command"] == "run_ending_credits":
        cls = "RunEndingCredits"
    elif cmd["command"] == "run_event_at_return":
        cls = "RunEventAtReturn"
        args["event_id"] = get_event_name(cmdargs[0])
        include_argnames = False
    elif cmd["command"] == "run_event_as_subroutine":
        cls = "RunEventAsSubroutine"
        args["event_id"] = get_event_name(cmdargs[0])
        include_argnames = False
    elif cmd["command"] == "run_event_sequence":
        cls = "RunEventSequence"
        args["scene"] = get_scene_name(cmdargs[0])
        args["value"] = str(cmdargs[1])
    elif cmd["command"] == "run_levelup_bonus_sequence":
        cls = "RunLevelupBonusSequence"
    elif cmd["command"] == "run_menu_tutorial":
        cls = "RunMenuTutorial"
        args["tutorial"] = get_tutorial_name(cmdargs[0])
        include_argnames = False
    elif cmd["command"] == "run_moleville_mountain_intro_sequence":
        cls = "RunMolevilleMountainIntroSequence"
    elif cmd["command"] == "run_moleville_mountain_sequence":
        cls = "RunMolevilleMountainSequence"
    elif cmd["command"] == "run_star_piece_sequence":
        cls = "RunStarPieceSequence"
        args["star"] = str(cmdargs[0])
        include_argnames = False
    elif cmd["command"] == "screen_flashes_with_colour":
        cls = "ScreenFlashesWithColour"
        include_argnames = False
        args["colour"] = COLOURS[cmdargs[0]]
    elif cmd["command"] == "set_var_to_const":
        cls = "SetVarToConst"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
        if cmdargs[0] == 0x70A7:
            try:
                args["value"] = get_item_class(cmdargs[1])
            except:
                args["value"] = str(cmdargs[1])
        else:
            args["value"] = str(cmdargs[1])
    elif cmd["command"] == "set_7000_to_7F_mem_var":
        cls = "Set7000To7FMemVar"
        include_argnames = False
        args["address"] = f"0x{cmdargs[0]:04X}"
    elif cmd["command"] == "set_bit":
        cls = "SetBit"
        include_argnames = False
        args["flag"] = get_flag(cmdargs[0], cmdargs[1])
    elif cmd["command"] == "set_bit_3":
        cls = "MarioStopsGlowing"
    elif cmd["command"] == "set_bit_3_offset":
        cls = "Set0158Bit3Offset"
        include_argnames = False
        args["address"] = f"0x{cmdargs[0]:04X}"
    elif cmd["command"] in ["set_bit_7_offset", "clear_bit_7_offset"]:
        if cmd["command"] == "set_bit_7_offset":
            cls = "Set0158Bit7Offset"
        else:
            cls = "Clear0158Bit7Offset"
        include_argnames = False
        args["address"] = f"0x{cmdargs[0]:04X}"
        if 7 in cmdargs[1]:
            args["bit_7"] = "True"
    elif cmd["command"] == "set_var_to_random":
        cls = "SetVarToRandom"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
        args["value"] = str(cmdargs[1])
    elif cmd["command"] == "set_7000_to_current_level":
        cls = "Set7000ToCurrentLevel"
    elif cmd["command"] == "set_7000_to_object_coord":
        cls = "Set7000ToObjectCoord"
        args["target_npc"] = AREA_OBJECTS[cmdargs[0]]
        coord = cmdargs[1]
        if coord == 0:
            args["coord"] = "COORD_X"
        elif coord == 1:
            args["coord"] = "COORD_Y"
        elif coord == 2:
            args["coord"] = "COORD_Z"
        elif coord == 5:
            args["coord"] = "COORD_F"
        if len(cmdargs) > 3 and cmdargs[3] > 0:
            args["isometric"] = True
        else:
            args["pixel"] = True
        if len(cmdargs[2]) > 0:
            args["bit_7"] = "True"
    elif cmd["command"] == "set_7000_to_pressed_button":
        cls = "Set7000ToPressedButton"
    elif cmd["command"] == "set_7000_to_tapped_button":
        cls = "Set7000ToTappedButton"
    elif cmd["command"] == "set_7010_to_object_xyz":
        try:
            cls = "Set70107015ToObjectXYZ"
            args["object"] = AREA_OBJECTS[cmdargs[0] & 0x3F]
            if cmdargs[0] & 0x40 == 0x40:
                args["bit_6"] = "True"
            if cmdargs[0] & 0x80 == 0x80:
                args["bit_7"] = "True"
        except:
            cls = "UnknownCommand"
            args["args"] = "%r" % bytearray([0xC7, cmdargs[0]])
    elif cmd["command"] == "set_7016_to_object_xyz":
        try:
            cls = "Set7016701BToObjectXYZ"
            args["object"] = AREA_OBJECTS[cmdargs[0] & 0x3F]
            if cmdargs[0] & 0x40 == 0x40:
                args["bit_6"] = "True"
            if cmdargs[0] & 0x80 == 0x80:
                args["bit_7"] = "True"
        except:
            cls = "UnknownCommand"
            args["args"] = "%r" % bytearray([0xC8, cmdargs[0]])
        include_argnames = False
    elif cmd["command"] == "set_experience_packet_7000":
        cls = "SetEXPPacketTo7000"
    elif cmd["command"] == "set_object_memory_to":
        cls = "SetObjectMemoryToVar"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
    elif cmd["command"] == "copy_var_to_var":
        cls = "CopyVarToVar"
        args["from_var"] = get_var(cmdargs[0])
        args["to_var"] = get_var(cmdargs[1])
    elif cmd["command"] == "set_7000_to_member_in_slot":
        cls = "Set7000ToIDOfMemberInSlot"
        args["slot"] = str(cmdargs[0])
        include_argnames = False
    elif cmd["command"] == "set_7000_to_party_capacity":
        cls = "Set7000ToPartySize"
    elif cmd["command"] == "slow_down_music":
        cls = "SlowDownMusic"
    elif cmd["command"] == "speed_up_music_to_normal":
        cls = "SpeedUpMusicToDefault"
    elif cmd["command"] == "star_mask_expand_from_screen_center":
        cls = "StarMaskExpandFromScreenCenter"
    elif cmd["command"] == "star_mask_shrink_to_screen_center":
        cls = "StarMaskShrinkToScreenCenter"
    elif cmd["command"] == "start_battle":
        cls = "StartBattleAtBattlefield"
        include_argnames = False
        args["pack_id"] = PACK_IDS[cmdargs[0]]
        args["battlefield"] = get_battlefield_name(cmdargs[1])
    elif cmd["command"] == "stop_all_background_events":
        cls = "StopAllBackgroundEvents"
    elif cmd["command"] == "store_bytes_to_0335_0556":
        cls = "StoreBytesTo0335And0556"
        args["value_1"] = str(cmdargs[0])
        args["value_2"] = str(cmdargs[1])
    elif cmd["command"] == "store_00_to_0248":
        cls = "Store00To0248"
    elif cmd["command"] == "store_00_to_0334":
        cls = "Store00To0334"
    elif cmd["command"] == "store_01_to_0248":
        cls = "Store01To0248"
    elif cmd["command"] == "store_01_to_0335":
        cls = "Store01To0335"
    elif cmd["command"] == "store_02_to_0248":
        cls = "Store02To0248"
    elif cmd["command"] == "store_FF_to_0335":
        cls = "StoreFFTo0335"
    elif cmd["command"] == "store_7000_minecart_timer":
        cls = "Set7000ToMinecartTimer"
    elif cmd["command"] == "store_set_bits":
        cls = "StoreSetBits"
        args["bit"] = get_flag(cmdargs[0], cmdargs[1])
        include_argnames = False
    elif cmd["command"] == "start_battle_700E":
        cls = "StartBattleWithPackAt700E"
    elif cmd["command"] == "start_loop_n_times":
        cls = "StartLoopNTimes"
        include_argnames = False
        args["count"] = str(cmdargs[0])
    elif cmd["command"] == "start_loop_n_frames":
        cls = "StartLoopNFrames"
        include_argnames = False
        args["length"] = str(cmdargs[0])
    elif cmd["command"] == "stop_music_FD9F":
        cls = "StopMusicFD9F"
    elif cmd["command"] == "stop_music_FDA0":
        cls = "StopMusicFDA0"
    elif cmd["command"] == "stop_music_FDA1":
        cls = "StopMusicFDA1"
    elif cmd["command"] == "stop_music_FDA2":
        cls = "StopMusicFDA2"
    elif cmd["command"] == "stop_music_FDA6":
        cls = "StopMusicFDA6"
    elif cmd["command"] == "stop_music":
        cls = "StopMusic"
    elif cmd["command"] == "stop_sound":
        cls = "StopSound"
    elif cmd["command"] == "store_7000_item_quantity_to_70A7":
        cls = "StoreItemAt70A7QuantityTo7000"
    elif cmd["command"] == "store_character_equipment_7000":
        cls = "StoreCharacterEquipmentTo7000"
        args["character"] = AREA_OBJECTS[cmdargs[0]]
        args["equip_slot"] = EQSLOTS[cmdargs[1]]
        include_argnames = False
    elif cmd["command"] == "store_current_FP_7000":
        cls = "StoreCurrentFPTo7000"
    elif cmd["command"] == "store_empty_inventory_slot_count_7000":
        cls = "StoreEmptyItemInventorySlotCountTo7000"
    elif cmd["command"] == "store_coin_amount_7000":
        cls = "StoreCoinCountTo7000"
    elif cmd["command"] == "store_item_amount_7000":
        cls = "StoreItemAmountTo7000"
        args["item"] = get_item_class(cmdargs[0])
        include_argnames = False
    elif cmd["command"] == "store_frog_coin_amount_7000":
        cls = "StoreFrogCoinCountTo7000"
    elif cmd["command"] == "stop_background_event":
        cls = "StopBackgroundEvent"
        include_argnames = False
        args["timer_var"] = get_var(cmdargs[0])
    elif cmd["command"] == "summon_object_at_70A8_to_current_level":
        cls = "SummonObjectAt70A8ToCurrentLevel"
    elif cmd["command"] == "swap_vars":
        cls = "SwapVars"
        include_argnames = False
        args["memory_a"] = get_var(cmdargs[1])
        args["memory_b"] = get_var(cmdargs[0])
    elif cmd["command"] == "tint_layers":
        cls = "TintLayers"
        layers = []
        for n in cmdargs[4]:
            layers.append(LAYER_TYPES[n])
        args["layers"] = "[%s]" % ", ".join(layers)
        args["red"] = str(cmdargs[0])
        args["green"] = str(cmdargs[1])
        args["blue"] = str(cmdargs[2])
        args["speed"] = str(cmdargs[3])
        if 7 in cmdargs[5]:
            args["bit_15"] = "True"
    elif cmd["command"] == "unfreeze_all_npcs":
        cls = "UnfreezeAllNPCs"
    elif cmd["command"] == "unfreeze_camera":
        cls = "UnfreezeCamera"
    elif cmd["command"] == "unsync_dialog":
        cls = "UnsyncDialog"
    elif cmd["command"] == "xor_3105_with_01" or cmd["command"] == "return_fd":
        cls = "ReturnFD"
    elif cmd["command"] == "db":
        cls = "UnknownCommand"
        include_argnames = False
        args["args"] = "%r" % bytearray(cmdargs)
    else:
        raise Exception("%s not found" % cmd["command"])

    return cls, args, use_identifier, include_argnames


def convert_action_script_command(cmd, valid_identifiers):
    use_identifier: bool = cmd["identifier"] in valid_identifiers
    args = {}
    cls = None
    cmdargs = []
    include_argnames = True

    if "args" in cmd:
        cmdargs = cmd["args"]

    if cmd["command"] == "visibility_on":
        cls = "A_VisibilityOn"
    elif cmd["command"] == "visibility_off":
        cls = "A_VisibilityOff"
    elif cmd["command"] == "sequence_playback_on":
        cls = "A_SequencePlaybackOn"
    elif cmd["command"] == "sequence_playback_off":
        cls = "A_SequencePlaybackOff"
    elif cmd["command"] == "sequence_looping_on":
        cls = "A_SequenceLoopingOn"
    elif cmd["command"] == "sequence_looping_off":
        cls = "A_SequenceLoopingOff"
    elif cmd["command"] == "fixed_f_coord_on":
        cls = "A_FixedFCoordOn"
    elif cmd["command"] == "fixed_f_coord_off":
        cls = "A_FixedFCoordOff"
    elif cmd["command"] == "set_sprite_sequence":
        cls = "A_SetSpriteSequence"
        args["index"] = str(cmdargs[0])
        if cmdargs[1] > 0:
            args["sprite_offset"] = str(cmdargs[1])
        flags = cmdargs[2]
        if 3 in flags:
            args["is_mold"] = "True"
        if 6 in flags:
            args["is_sequence"] = "True"
        looping_off = 4 in flags
        if (not looping_off) or not (3 in flags and 6 not in flags):
            args["looping"] = "False" if looping_off else "True"
        if 15 in flags:
            args["mirror_sprite"] = "True"
    elif cmd["command"] == "reset_properties":
        cls = "A_ResetProperties"
    elif cmd["command"] in [
        "overwrite_solidity",
        "set_solidity_bits",
        "clear_solidity_bits",
        "set_movement_bits",
    ]:
        if cmd["command"] == "overwrite_solidity":
            cls = "A_OverwriteSolidity"
        elif cmd["command"] == "set_solidity_bits":
            cls = "A_SetSolidityBits"
        elif cmd["command"] == "clear_solidity_bits":
            cls = "A_ClearSolidityBits"
        elif cmd["command"] == "set_movement_bits":
            cls = "A_SetMovementsBits"
        flags = cmdargs[0]
        if 0 in flags:
            args["bit_0"] = "True"
        if 1 in flags:
            args["cant_walk_under"] = "True"
        if 2 in flags:
            args["cant_pass_walls"] = "True"
        if 3 in flags:
            args["cant_jump_through"] = "True"
        if 4 in flags:
            args["bit_4"] = "True"
        if 5 in flags:
            args["cant_pass_npcs"] = "True"
        if 6 in flags:
            args["cant_walk_through"] = "True"
        if 7 in flags:
            args["bit_7"] = "True"
    elif cmd["command"] == "set_palette_row":
        cls = "A_SetPaletteRow"
        args["row"] = str(cmdargs[0] & 0xF)
        upper = (cmdargs[0] & 0xF0) >> 4
        if upper != 0:
            args["upper"] = str(upper)
    elif cmd["command"] == "inc_palette_row_by":
        cls = "A_IncPaletteRowBy"
        include_argnames = False
        args["rows"] = str(cmdargs[0] & 0x0F)
        upper = (cmdargs[0] & 0xF0) >> 4
        if upper != 0:
            args["upper"] = str(upper)
    elif cmd["command"] == "set_animation_speed":
        include_argnames = False
        speed = cmdargs[0]
        if speed == 0:
            args["speed"] = "NORMAL"
        elif speed == 1:
            args["speed"] = "FAST"
        elif speed == 2:
            args["speed"] = "FASTER"
        elif speed == 3:
            args["speed"] = "VERY_FAST"
        elif speed == 4:
            args["speed"] = "FASTEST"
        elif speed == 5:
            args["speed"] = "SLOW"
        elif speed == 6:
            args["speed"] = "VERY_SLOW"
        else:
            raise Exception("illegal speed")
        flags = cmdargs[1]
        if 0 in flags and 1 not in flags:
            cls = "A_SetWalkingSpeed"
        elif 1 in flags and 0 not in flags:
            cls = "A_SetSequenceSpeed"
        elif 0 in flags and 1 in flags:
            cls = "A_SetAllSpeeds"
        else:
            raise Exception("%s %r speed has no type" % (cmd["identifier"], flags))
    elif cmd["command"] == "set_object_memory_bits":
        cls = "A_SetObjectMemoryBits"
        args["arg_1"] = f"0x{cmdargs[0]:02X}"
        bits = cmdargs[1]
        args["bits"] = "%r" % bits
    elif cmd["command"] == "set_vram_priority":
        cls = "A_SetVRAMPriority"
        priority = cmdargs[0]
        include_argnames = False
        if priority == 0:
            args["priority"] = "MARIO_OVERLAPS_ON_ALL_SIDES"
        elif priority == 1:
            args["priority"] = "NORMAL_PRIORITY"
        elif priority == 2:
            args["priority"] = "OBJECT_OVERLAPS_MARIO_ON_ALL_SIDES"
        elif priority == 3:
            args["priority"] = "PRIORITY_3"
    elif cmd["command"] == "bpl_26_27_28":
        cls = "A_BPL262728"
    elif cmd["command"] == "bmi_26_27_28":
        cls = "A_BMI262728"
    elif cmd["command"] == "embedded_animation_routine":
        cls = "A_EmbeddedAnimationRoutine"
        include_argnames = False
        args["args"] = "%r" % bytearray(cmdargs)
    elif cmd["command"] == "bpl_26_27":
        cls = "A_BPL2627"
    elif (
        cmd["command"] == "jmp_if_object_within_range"
        or cmd["command"] == "jmp_if_object_within_range_same_z"
    ):
        if cmd["command"] == "jmp_if_object_within_range":
            cls = "A_JmpIfObjectWithinRange"
        elif cmd["command"] == "jmp_if_object_within_range_same_z":
            cls = "A_JmpIfObjectWithinRangeSameZ"
        args["comparing_npc"] = AREA_OBJECTS[cmdargs[0]]
        args["usually"] = str(cmdargs[1])
        args["tiles"] = str(cmdargs[2])
        args["destinations"] = '["%s"]' % cmdargs[3]
    elif cmd["command"] == "unknown_jmp_3C":
        cls = "A_UnknownJmp3C"
        include_argnames = False
        args["arg1"] = f"0x{cmdargs[0]:02X}"
        args["arg2"] = f"0x{cmdargs[1]:02X}"
        args["destinations"] = '["%s"]' % cmdargs[2]
    elif cmd["command"] == "jmp_if_mario_in_air":
        cls = "A_JmpIfMarioInAir"
        include_argnames = False
        args["destinations"] = '["%s"]' % cmdargs[0]
    elif cmd["command"] == "create_packet_at_npc_coords":
        cls = "A_CreatePacketAtObjectCoords"
        args["packet"] = get_packet_name(cmdargs[0])
        args["target_npc"] = AREA_OBJECTS[cmdargs[1]]
        args["destinations"] = '["%s"]' % cmdargs[2]
    elif cmd["command"] == "create_packet_at_7010":
        cls = "A_CreatePacketAt7010"
        args["packet"] = get_packet_name(cmdargs[0])
        args["destinations"] = '["%s"]' % cmdargs[1]
    elif cmd["command"] == "walk_1_step_east":
        cls = "A_Walk1StepEast"
    elif cmd["command"] == "walk_1_step_southeast":
        cls = "A_Walk1StepSoutheast"
    elif cmd["command"] == "walk_1_step_south":
        cls = "A_Walk1StepSouth"
    elif cmd["command"] == "walk_1_step_southwest":
        cls = "A_Walk1StepSouthwest"
    elif cmd["command"] == "walk_1_step_west":
        cls = "A_Walk1StepWest"
    elif cmd["command"] == "walk_1_step_northwest":
        cls = "A_Walk1StepNorthwest"
    elif cmd["command"] == "walk_1_step_north":
        cls = "A_Walk1StepNorth"
    elif cmd["command"] == "walk_1_step_northeast":
        cls = "A_Walk1StepNortheast"
    elif cmd["command"] == "walk_1_step_f_direction":
        cls = "A_Walk1StepFDirection"
    elif cmd["command"] == "add_z_coord_1_step":
        cls = "A_AddZCoord1Step"
    elif cmd["command"] == "dec_z_coord_1_step":
        cls = "A_DecZCoord1Step"
    elif cmd["command"] == "shift_east_steps":
        cls = "A_WalkEastSteps"
        include_argnames = False
        args["steps"] = str(cmdargs[0])
    elif cmd["command"] == "shift_southeast_steps":
        cls = "A_WalkSoutheastSteps"
        include_argnames = False
        args["steps"] = str(cmdargs[0])
    elif cmd["command"] == "shift_south_steps":
        cls = "A_WalkSouthSteps"
        include_argnames = False
        args["steps"] = str(cmdargs[0])
    elif cmd["command"] == "shift_southwest_steps":
        cls = "A_WalkSouthwestSteps"
        include_argnames = False
        args["steps"] = str(cmdargs[0])
    elif cmd["command"] == "shift_west_steps":
        cls = "A_WalkWestSteps"
        include_argnames = False
        args["steps"] = str(cmdargs[0])
    elif cmd["command"] == "shift_northwest_steps":
        cls = "A_WalkNorthwestSteps"
        include_argnames = False
        args["steps"] = str(cmdargs[0])
    elif cmd["command"] == "shift_north_steps":
        cls = "A_WalkNorthSteps"
        include_argnames = False
        args["steps"] = str(cmdargs[0])
    elif cmd["command"] == "shift_northeast_steps":
        cls = "A_WalkNortheastSteps"
        include_argnames = False
        args["steps"] = str(cmdargs[0])
    elif cmd["command"] == "shift_f_direction_steps":
        cls = "A_WalkFDirectionSteps"
        include_argnames = False
        args["steps"] = str(cmdargs[0])
    elif cmd["command"] == "shift_z_20_steps":
        cls = "A_ShiftZUp20Steps"
    elif cmd["command"] == "shift_z_up_steps":
        cls = "A_ShiftZUpSteps"
        include_argnames = False
        args["steps"] = str(cmdargs[0])
    elif cmd["command"] == "shift_z_down_steps":
        cls = "A_ShiftZDownSteps"
        include_argnames = False
        args["steps"] = str(cmdargs[0])
    elif cmd["command"] == "shift_z_up_20_steps":
        cls = "A_ShiftZUp20Steps"
    elif cmd["command"] == "shift_z_down_20_steps":
        cls = "A_ShiftZDown20Steps"
    elif cmd["command"] == "shift_east_pixels":
        cls = "A_WalkEastPixels"
        include_argnames = False
        args["pixels"] = str(cmdargs[0])
    elif cmd["command"] == "shift_southeast_pixels":
        cls = "A_WalkSoutheastPixels"
        include_argnames = False
        args["pixels"] = str(cmdargs[0])
    elif cmd["command"] == "shift_south_pixels":
        cls = "A_WalkSouthPixels"
        include_argnames = False
        args["pixels"] = str(cmdargs[0])
    elif cmd["command"] == "shift_southwest_pixels":
        cls = "A_WalkSouthwestPixels"
        include_argnames = False
        args["pixels"] = str(cmdargs[0])
    elif cmd["command"] == "shift_west_pixels":
        cls = "A_WalkWestPixels"
        include_argnames = False
        args["pixels"] = str(cmdargs[0])
    elif cmd["command"] == "shift_northwest_pixels":
        cls = "A_WalkNorthwestPixels"
        include_argnames = False
        args["pixels"] = str(cmdargs[0])
    elif cmd["command"] == "shift_north_pixels":
        cls = "A_WalkNorthPixels"
        include_argnames = False
        args["pixels"] = str(cmdargs[0])
    elif cmd["command"] == "shift_northeast_pixels":
        cls = "A_WalkNortheastPixels"
        include_argnames = False
        args["pixels"] = str(cmdargs[0])
    elif cmd["command"] == "shift_f_direction_pixels":
        cls = "A_WalkFDirectionPixels"
        include_argnames = False
        args["pixels"] = str(cmdargs[0])
    elif cmd["command"] == "walk_f_direction_16_pixels":
        cls = "A_WalkFDirection16Pixels"
    elif cmd["command"] == "shift_z_up_pixels":
        cls = "A_ShiftZUpPixels"
        include_argnames = False
        args["pixels"] = str(cmdargs[0])
    elif cmd["command"] == "shift_z_down_pixels":
        cls = "A_ShiftZDownPixels"
        include_argnames = False
        args["pixels"] = str(cmdargs[0])
    elif cmd["command"] == "face_east":
        cls = "A_FaceEast"
    elif cmd["command"] == "face_east_7C":
        cls = "A_FaceEast7C"
    elif cmd["command"] == "face_southeast":
        cls = "A_FaceSoutheast"
    elif cmd["command"] == "face_south":
        cls = "A_FaceSouth"
    elif cmd["command"] == "face_southwest":
        cls = "A_FaceSouthwest"
    elif cmd["command"] == "face_southwest_7D":
        cls = "A_FaceSouthwest7D"
        args["arg"] = f"0x{cmdargs[0]:02X}"
    elif cmd["command"] == "face_west":
        cls = "A_FaceWest"
    elif cmd["command"] == "face_northwest":
        cls = "A_FaceNorthwest"
    elif cmd["command"] == "face_north":
        cls = "A_FaceNorth"
    elif cmd["command"] == "face_northeast":
        cls = "A_FaceNortheast"
    elif cmd["command"] == "face_mario":
        cls = "A_FaceMario"
    elif cmd["command"] == "turn_clockwise_45_degrees":
        cls = "A_TurnClockwise45Degrees"
    elif cmd["command"] == "turn_random_direction":
        cls = "A_TurnRandomDirection"
    elif cmd["command"] == "turn_clockwise_45_degrees_n_times":
        cls = "A_TurnClockwise45DegreesNTimes"
        include_argnames = False
        args["count"] = str(cmdargs[0])
    elif (
        cmd["command"] == "jump_to_height_silent" or cmd["command"] == "jump_to_height"
    ):
        cls = "A_JumpToHeight"
        args["height"] = str(cmdargs[0])
        if cmd["command"] == "jump_to_height_silent":
            args["silent"] = "True"
        else:
            include_argnames = False
    elif cmd["command"] in [
        "walk_to_xy_coords",
        "walk_xy_steps",
        "shift_to_xy_coords",
        "shift_xy_steps",
        "shift_xy_pixels",
    ]:
        if cmd["command"] == "walk_to_xy_coords":
            cls = "A_WalkToXYCoords"
        elif cmd["command"] == "walk_xy_steps":
            cls = "A_WalkXYSteps"
        elif cmd["command"] == "shift_to_xy_coords":
            cls = "A_ShiftToXYCoords"
        elif cmd["command"] == "shift_xy_steps":
            cls = "A_ShiftXYSteps"
        elif cmd["command"] == "shift_xy_pixels":
            cls = "A_ShiftXYPixels"
        args["x"] = str(cmdargs[0])
        args["y"] = str(cmdargs[1])
    elif cmd["command"] == "maximize_sequence_speed":
        cls = "A_MaximizeSequenceSpeed"
    elif cmd["command"] == "maximize_sequence_speed_86":
        cls = "A_MaximizeSequenceSpeed86"
    elif cmd["command"] == "transfer_to_object_xy":
        cls = "A_TransferToObjectXY"
        include_argnames = False
        args["object"] = AREA_OBJECTS[cmdargs[0]]
    elif cmd["command"] == "run_away_shift":
        cls = "A_RunAwayShift"
    elif cmd["command"] == "transfer_to_7016_7018":
        cls = "A_TransferTo70167018"
    elif cmd["command"] == "walk_to_7016_7018":
        cls = "A_WalkTo70167018"
    elif (
        cmd["command"] == "bounce_to_xy_with_height"
        or cmd["command"] == "bounce_xy_steps_with_height"
    ):
        if cmd["command"] == "bounce_to_xy_with_height":
            cls = "A_BounceToXYWithHeight"
        elif cmd["command"] == "bounce_xy_steps_with_height":
            cls = "A_BounceXYStepsWithHeight"
        args["x"] = str(cmdargs[0])
        args["y"] = str(cmdargs[1])
        args["height"] = str(cmdargs[2])
    elif cmd["command"] in [
        "transfer_to_xyzf",
        "transfer_xyzf_steps",
        "transfer_xyzf_pixels",
    ]:
        if cmd["command"] == "transfer_to_xyzf":
            cls = "A_TransferToXYZF"
        elif cmd["command"] == "transfer_xyzf_steps":
            cls = "A_TransferXYZFSteps"
        elif cmd["command"] == "transfer_xyzf_pixels":
            cls = "A_TransferXYZFPixels"
        args["x"] = str(cmdargs[0])
        args["y"] = str(cmdargs[1])
        args["z"] = str(cmdargs[2])
        args["direction"] = DIRECTIONS[cmdargs[3]]
    elif cmd["command"] == "transfer_to_object_xyz":
        cls = "A_TransferToObjectXYZ"
        include_argnames = False
        args["object"] = AREA_OBJECTS[cmdargs[0]]
    elif cmd["command"] == "walk_to_7016_7018_701A":
        cls = "A_WalkTo70167018701A"
    elif cmd["command"] == "transfer_to_7016_7018_701A":
        cls = "A_TransferTo70167018701A"
    elif cmd["command"] == "stop_sound":
        cls = "A_StopSound"
    elif cmd["command"] == "play_sound":
        cls = "A_PlaySound"
        args["sound"] = get_sound_name(cmdargs[0])
        args["channel"] = str(cmdargs[1])
    elif cmd["command"] == "play_sound_balance":
        cls = "A_PlaySoundBalance"
        args["sound"] = get_sound_name(cmdargs[0])
        args["balance"] = str(cmdargs[1])
    elif cmd["command"] == "fade_out_sound_to_volume":
        cls = "A_FadeOutSoundToVolume"
        args["duration"] = str(cmdargs[0])
        args["volume"] = str(cmdargs[1])
    elif cmd["command"] == "set_bit":
        cls = "A_SetBit"
        include_argnames = False
        args["flag"] = get_flag(cmdargs[0], cmdargs[1])
    elif cmd["command"] == "set_mem_704x_at_700C_bit":
        cls = "A_SetMem704XAt700CBit"
    elif cmd["command"] == "clear_bit":
        cls = "A_ClearBit"
        include_argnames = False
        args["flag"] = get_flag(cmdargs[0], cmdargs[1])
    elif cmd["command"] == "clear_mem_704x_at_700C_bit":
        cls = "A_ClearMem704XAt700CBit"
    elif cmd["command"] == "set_var_to_const":
        cls = "A_SetVarToConst"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
        if cmdargs[0] == 0x70A7:
            try:
                args["value"] = get_item_class(cmdargs[1])
            except:
                args["value"] = str(cmdargs[1])
        else:
            args["value"] = str(cmdargs[1])
    elif cmd["command"] == "add_const_to_var" or cmd["command"] == "add":
        cls = "A_AddConstToVar"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
        args["value"] = str(cmdargs[1])
    elif cmd["command"] == "inc" or cmd["command"] == "inc_short":
        cls = "A_Inc"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
    elif cmd["command"] == "dec":
        cls = "A_Dec"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
    elif cmd["command"] == "copy_var_to_var":
        cls = "A_CopyVarToVar"
        args["from_var"] = get_var(cmdargs[0])
        args["to_var"] = get_var(cmdargs[1])
    elif cmd["command"] == "set_var_to_random":
        cls = "A_SetVarToRandom"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
        args["value"] = str(cmdargs[1])
    elif (
        cmd["command"] == "add_var_to_700C" or cmd["command"] == "add_short_mem_to_700C"
    ):
        cls = "A_AddVarTo700C"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
    elif (
        cmd["command"] == "dec_var_from_700C"
        or cmd["command"] == "dec_short_mem_from_700C"
    ):
        cls = "A_DecVarFrom700C"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
    elif cmd["command"] == "swap_vars":
        cls = "A_SwapVars"
        include_argnames = False
        args["memory_a"] = get_var(cmdargs[1])
        args["memory_b"] = get_var(cmdargs[0])
    elif cmd["command"] == "move_7010_7015_to_7016_701B":
        cls = "A_Move70107015To7016701B"
    elif cmd["command"] == "move_7016_701B_to_7010_7015":
        cls = "A_Move7016701BTo70107015"
    elif (
        cmd["command"] == "compare_var_to_const"
        or cmd["command"] == "mem_compare"
        or cmd["command"] == "mem_compare_val"
    ):
        cls = "A_CompareVarToConst"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
        if cmdargs[0] == 0x70A7:
            try:
                args["value"] = get_item_class(cmdargs[1])
            except:
                args["value"] = str(cmdargs[1])
        else:
            args["value"] = str(cmdargs[1])
    elif cmd["command"] == "compare_700C_to_var":
        cls = "A_Compare700CToVar"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
    elif cmd["command"] == "set_700C_to_current_level":
        cls = "A_Set700CToCurrentLevel"
    elif cmd["command"] == "set_700C_to_object_coord":
        cls = "A_Set700CToObjectCoord"
        args["target_npc"] = AREA_OBJECTS[cmdargs[0]]
        coord = cmdargs[1]
        if coord == 0:
            args["coord"] = "COORD_X"
        elif coord == 1:
            args["coord"] = "COORD_Y"
        elif coord == 2:
            args["coord"] = "COORD_Z"
        elif coord == 5:
            args["coord"] = "COORD_F"
        if coord != 5:
            if len(cmdargs) > 3 and cmdargs[3] > 0:
                args["isometric"] = True
            else:
                args["pixel"] = True
            if len(cmdargs[2]) > 0:
                args["bit_7"] = "True"
    elif cmd["command"] == "set_700C_to_pressed_button":
        cls = "A_Set700CToPressedButton"
    elif cmd["command"] == "set_700C_to_tapped_button":
        cls = "A_Set700CToTappedButton"
    elif cmd["command"] == "jmp_to_script":
        cls = "A_JmpToScript"
        include_argnames = False
        args["destination"] = get_action_name(cmdargs[0])
    elif cmd["command"] == "jmp":
        cls = "A_Jmp"
        include_argnames = False
        args["destinations"] = '["%s"]' % cmdargs[0]
    elif cmd["command"] == "jmp_to_subroutine":
        cls = "A_JmpToSubroutine"
        include_argnames = False
        args["destinations"] = '["%s"]' % cmdargs[0]
    elif cmd["command"] == "start_loop_n_times":
        cls = "A_StartLoopNTimes"
        include_argnames = False
        args["count"] = str(cmdargs[0])
    elif cmd["command"] == "start_loop_n_frames":
        cls = "A_StartLoopNFrames"
        include_argnames = False
        args["length"] = str(cmdargs[0])
    elif cmd["command"] == "load_mem":
        cls = "A_LoadMemory"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
    elif cmd["command"] == "end_loop":
        cls = "A_EndLoop"
    elif cmd["command"] == "jmp_if_bit_clear":
        cls = "A_JmpIfBitClear"
        include_argnames = False
        args["bit"] = get_flag(cmdargs[0], cmdargs[1])
        args["destinations"] = '["%s"]' % cmdargs[2]
    elif cmd["command"] == "jmp_if_bit_set":
        cls = "A_JmpIfBitSet"
        include_argnames = False
        args["bit"] = get_flag(cmdargs[0], cmdargs[1])
        args["destinations"] = '["%s"]' % cmdargs[2]
    elif cmd["command"] == "jmp_if_mem_704x_at_700C_bit_set":
        cls = "A_JmpIfMem704XAt700CBitSet"
        include_argnames = False
        args["destinations"] = '["%s"]' % cmdargs[0]
    elif cmd["command"] == "jmp_if_mem_704x_at_700C_bit_clear":
        cls = "A_JmpIfMem704XAt700CBitClear"
        include_argnames = False
        args["destinations"] = '["%s"]' % cmdargs[0]
    elif cmd["command"] == "jmp_if_var_equals_const":
        cls = "A_JmpIfVarEqualsConst"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
        if cmdargs[0] == 0x70A7:
            try:
                args["value"] = get_item_class(cmdargs[1])
            except:
                args["value"] = str(cmdargs[1])
        else:
            args["value"] = str(cmdargs[1])
        args["destinations"] = '["%s"]' % cmdargs[2]
    elif cmd["command"] == "jmp_if_var_not_equals_const":
        cls = "A_JmpIfVarNotEqualsConst"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
        if cmdargs[0] == 0x70A7:
            try:
                args["value"] = get_item_class(cmdargs[1])
            except:
                args["value"] = str(cmdargs[1])
        else:
            args["value"] = str(cmdargs[1])
        args["destinations"] = '["%s"]' % cmdargs[2]
    elif cmd["command"] in ["jmp_if_700C_all_bits_clear", "jmp_if_700C_any_bits_set"]:
        if cmd["command"] == "jmp_if_700C_all_bits_clear":
            cls = "A_JmpIf700CAllBitsClear"
        elif cmd["command"] == "jmp_if_700C_any_bits_set":
            cls = "A_JmpIf700CAnyBitsSet"
        bits = cmdargs[0]
        args["bits"] = "%r" % bits
        args["destinations"] = '["%s"]' % cmdargs[1]
    elif cmd["command"] == "jmp_if_random_above_128":
        cls = "A_JmpIfRandom1of2"
        include_argnames = False
        args["destinations"] = '["%s"]' % cmdargs[0]
    elif cmd["command"] == "jmp_if_random_above_66":
        cls = "A_JmpIfRandom2of3"
        include_argnames = False
        args["destinations"] = "%r" % cmdargs
    elif cmd["command"] == "jmp_if_loaded_memory_is_0":
        cls = "A_JmpIfLoadedMemoryIs0"
        include_argnames = False
        args["destinations"] = '["%s"]' % cmdargs[0]
    elif cmd["command"] == "jmp_if_loaded_memory_is_not_0":
        cls = "A_JmpIfLoadedMemoryIsNot0"
        include_argnames = False
        args["destinations"] = '["%s"]' % cmdargs[0]
    elif cmd["command"] == "jmp_if_comparison_result_is_greater_or_equal":
        cls = "A_JmpIfComparisonResultIsGreaterOrEqual"
        include_argnames = False
        args["destinations"] = '["%s"]' % cmdargs[0]
    elif cmd["command"] == "jmp_if_comparison_result_is_lesser":
        cls = "A_JmpIfComparisonResultIsLesser"
        include_argnames = False
        args["destinations"] = '["%s"]' % cmdargs[0]
    elif cmd["command"] == "jmp_if_loaded_memory_is_below_0":
        cls = "A_JmpIfLoadedMemoryIsBelow0"
        include_argnames = False
        args["destinations"] = '["%s"]' % cmdargs[0]
    elif cmd["command"] == "jmp_if_loaded_memory_is_above_or_equal_0":
        cls = "A_JmpIfLoadedMemoryIsAboveOrEqual0"
        include_argnames = False
        args["destinations"] = '["%s"]' % cmdargs[0]
    elif cmd["command"] == "pause":
        cls = "A_Pause"
        include_argnames = False
        args["length"] = str(cmdargs[0])
    elif cmd["command"] in [
        "summon_to_level",
        "remove_from_level",
        "enable_trigger_in_level",
        "disable_trigger_in_level",
    ]:
        if cmd["command"] == "summon_to_level":
            cls = "A_SummonObjectToSpecificLevel"
        elif cmd["command"] == "remove_from_level":
            cls = "A_RemoveObjectFromSpecificLevel"
        elif cmd["command"] == "enable_trigger_in_level":
            cls = "A_EnableObjectTriggerInSpecificLevel"
        elif cmd["command"] == "disable_trigger_in_level":
            cls = "A_DisableObjectTriggerInSpecificLevel"
        include_argnames = False
        args["object"] = AREA_OBJECTS[cmdargs[0]]
        args["level_id"] = get_room_name(cmdargs[1])
    elif cmd["command"] == "summon_object_at_70A8_to_current_level":
        cls = "A_SummonObjectAt70A8ToCurrentLevel"
    elif cmd["command"] == "remove_object_at_70A8_from_current_level":
        cls = "A_RemoveObjectAt70A8FromCurrentLevel"
    elif cmd["command"] == "enable_trigger_at_70A8":
        cls = "A_EnableTriggerOfObjectAt70A8InCurrentLevel"
    elif cmd["command"] == "disable_trigger_at_70A8":
        cls = "A_DisableTriggerOfObjectAt70A8InCurrentLevel"
    elif cmd["command"] in ["jmp_if_object_in_level", "jmp_if_object_not_in_level"]:
        if cmd["command"] == "jmp_if_object_in_level":
            cls = "A_JmpIfObjectInSpecificLevel"
        elif cmd["command"] == "jmp_if_object_not_in_level":
            cls = "A_JmpIfObjectNotInSpecificLevel"
        include_argnames = False
        args["object"] = AREA_OBJECTS[cmdargs[0]]
        args["level_id"] = get_room_name(cmdargs[1])
        args["destinations"] = '["%s"]' % cmdargs[2]
    elif cmd["command"] == "jmp_to_start_of_this_script":
        cls = "A_JmpToStartOfThisScript"
    elif cmd["command"] == "jmp_to_start_of_this_script_FA":
        cls = "A_JmpToStartOfThisScriptFA"
    elif cmd["command"] == "ret":
        cls = "A_ReturnQueue"
    elif cmd["command"] == "end_all":
        cls = "A_ReturnAll"
    elif cmd["command"] == "shadow_on":
        cls = "A_ShadowOn"
    elif cmd["command"] == "shadow_off":
        cls = "A_ShadowOff"
    elif cmd["command"] == "floating_on":
        cls = "A_FloatingOn"
    elif cmd["command"] == "floating_off":
        cls = "A_FloatingOff"
    elif cmd["command"] in ["object_memory_set_bit", "object_memory_clear_bit"]:
        if cmd["command"] == "object_memory_set_bit":
            cls = "A_ObjectMemorySetBit"
        elif cmd["command"] == "object_memory_clear_bit":
            cls = "A_ObjectMemoryClearBit"
        args["arg_1"] = f"0x{cmdargs[0]:02X}"
        bits = cmdargs[1]
        args["bits"] = "%r" % bits
    elif cmd["command"] == "object_memory_modify_bits":
        cls = "A_ObjectMemoryModifyBits"
        args["arg_1"] = f"0x{cmdargs[0]:02X}"
        set_flags = cmdargs[1]
        if len(set_flags) > 0:
            args["set_bits"] = "%r" % set_flags
        clear_bits = cmdargs[2]
        if len(clear_bits) > 0:
            args["clear_bits"] = "%r" % clear_bits
    elif cmd["command"] == "set_priority":
        cls = "A_SetPriority"
        include_argnames = False
        args["priority"] = str(cmdargs[0])
    elif cmd["command"] == "jmp_if_object_in_air":
        cls = "A_JmpIfObjectInAir"
        include_argnames = False
        args["object"] = AREA_OBJECTS[cmdargs[0]]
        args["destinations"] = '["%s"]' % cmdargs[1]
    elif cmd["command"] == "create_packet_at_7010_with_event":
        cls = "A_CreatePacketAt7010WithEvent"
        args["packet"] = get_packet_name(cmdargs[0])
        args["event_id"] = get_event_name(cmdargs[1])
        args["destinations"] = '["%s"]' % cmdargs[2]
    elif cmd["command"] in [
        "mem_700C_xor_const",
        "mem_700C_or_const",
        "mem_700C_and_const",
    ]:
        if cmd["command"] == "mem_700C_and_const":
            cls = "A_Mem700CAndConst"
        elif cmd["command"] == "mem_700C_or_const":
            cls = "A_Mem700COrConst"
        elif cmd["command"] == "mem_700C_xor_const":
            cls = "A_Mem700CXorConst"
        include_argnames = False
        args["value"] = f"0x{cmdargs[0]:04X}"
    elif cmd["command"] in ["mem_700C_or_var", "mem_700C_and_var"]:
        if cmd["command"] == "mem_700C_and_var":
            cls = "A_Mem700CAndVar"
        elif cmd["command"] == "mem_700C_or_var":
            cls = "A_Mem700COrVar"
        elif cmd["command"] == "mem_700C_xor_var":
            cls = "A_Mem700CXorVar"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
    elif cmd["command"] == "mem_700C_shift_left":
        cls = "A_VarShiftLeft"
        include_argnames = False
        args["address"] = get_var(cmdargs[0])
        args["shift"] = str(cmdargs[1])
    elif cmd["command"] == "db":
        cls = "A_UnknownCommand"
        include_argnames = False
        args["args"] = "%r" % bytearray(cmdargs)
    else:
        raise Exception("%s not found" % cmd["command"])

    return cls, args, use_identifier, include_argnames


def convert_script(script, valid_identifiers, converter):
    new_script = []

    for cmd in script:
        identifier = ""
        cls, args, use_identifier, include_argnames = converter(cmd, valid_identifiers)

        if cls is not None:
            arg_strings = []
            for key in args:
                if include_argnames:
                    arg_strings.append("%s=%s" % (key, args[key]))
                else:
                    arg_strings.append(args[key])
            arg_string = ", ".join(
                [f"{w}" if not isinstance(w, str) else w for w in arg_strings]
            )

            if use_identifier:
                if len(arg_string) > 0:
                    arg_string += ", "
                identifier = 'identifier="%s"' % cmd["identifier"]

            output = "%s(%s%s)" % (cls, arg_string, identifier)
            new_script.append(output)

    return new_script


def produce_action_script(index, script, valid_identifiers):
    output = "#%s" % get_action_name(index)
    output += (
        "\n\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.action_scripts import *"
    )
    output += "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.area_objects import *"
    output += "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.battlefields import *"
    output += "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.colours import *"
    output += "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.controller_inputs import *"
    output += (
        "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.coords import *"
    )
    output += "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.directions import *"
    output += "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.intro_title_text import *"
    output += (
        "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.layers import *"
    )
    output += "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.packets import *"
    output += "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.palette_types import *"
    output += (
        "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.scenes import *"
    )
    output += "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.tutorials import *"
    output += "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.variables import *"
    output += "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.event_scripts.ids import *"
    output += "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.ids import *"
    output += "\n\nscript = ActionScript([\n\t"

    contents = convert_script(script, valid_identifiers, convert_action_script_command)
    output += ",\n\t".join(contents)

    output += "\n])"

    return output


def produce_event_script(index, script, valid_identifiers):
    output = "# %s" % get_event_name(index)
    output += (
        "\n\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.event_scripts import *"
    )
    output += (
        "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.action_scripts import *"
    )
    output += "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.area_objects import *"
    output += "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.battlefields import *"
    output += "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.colours import *"
    output += "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.controller_inputs import *"
    output += (
        "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.coords import *"
    )
    output += "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.directions import *"
    output += "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.intro_title_text import *"
    output += (
        "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.layers import *"
    )
    output += "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.packets import *"
    output += "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.palette_types import *"
    output += (
        "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.scenes import *"
    )
    output += "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.tutorials import *"
    output += "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.arguments.variables import *"
    output += "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.event_scripts.ids import *"
    output += "\nfrom smrpgpatchbuilder.datatypes.overworld_scripts.ids import *"
    output += "\nfrom smrpgpatchbuilder.datatypes.dialogs.ids.dialog_ids import *"
    output += "\nfrom smrpgpatchbuilder.datatypes.items.implementations import *"
    output += "\nfrom smrpgpatchbuilder.datatypes.battles.ids.pack_ids import *"
    output += "\n\nscript = EventScript([\n\t"

    contents = convert_script(script, valid_identifiers, convert_event_script_command)
    output += ",\n\t".join(contents)

    output += "\n])"

    return output


class Command(BaseCommand):
    def add_arguments(self, parser):
        parser.add_argument("-r", "--rom", dest="rom", help="Path to a Mario RPG rom")

    def handle(self, *args, **options):
        ajt = []
        ejt = []

        disassembler = EventDisassemblerCommand()
        e_scripts = disassembler.handle(rom=options["rom"])
        disassembler2 = AnimationDisassemblerCommand()
        a_scripts = disassembler2.handle(rom=options["rom"])

        output_path = "./src/disassembler_output/overworld_scripts"
        event_path = f"{output_path}/event/scripts"
        action_path = f"{output_path}/animation/scripts"
        shutil.rmtree(output_path, ignore_errors=True)

        os.makedirs(event_path, exist_ok=True)
        os.makedirs(action_path, exist_ok=True)

        for i, script_dict in enumerate(a_scripts):
            for cmd in script_dict:
                if "args" in cmd:
                    ajt.extend([a for a in cmd["args"] if isinstance(a, str)])
            actions_jumped_to.extend(list(set(ajt)))

        for i, script_dict in enumerate(e_scripts):
            for cmd in script_dict:
                if "args" in cmd:
                    ejt.extend([a for a in cmd["args"] if isinstance(a, str)])
                if "subscript" in cmd:
                    for ccmd in cmd["subscript"]:
                        if "args" in ccmd:
                            ejt.extend([a for a in ccmd["args"] if isinstance(a, str)])
            events_jumped_to.extend(list(set(ejt)))

        for i, script in enumerate(a_scripts):
            output = produce_action_script(i, script, actions_jumped_to)
            file = open(f"{action_path}/script_{i}.py", "w")
            writeline(file, output)
            file.close()

        open(f"{output_path}/animation/__init__.py", "w")
        open(f"{action_path}/__init__.py", "w")
        file = open(f"{output_path}/animation/actionqueues.py", "w")
        output = "from smrpgpatchbuilder.datatypes.overworld_scripts.action_scripts.classes import ActionScriptBank"
        for i, script in enumerate(a_scripts):
            output += f"\nfrom .scripts.script_{i} import script as script_{i}"
        output += "\n\nactions = ActionScriptBank([\n"
        for i, script in enumerate(a_scripts):
            output += f"\tscript_{i},\n"
        output += "])"
        writeline(file, output)
        file.close()

        open(f"{output_path}/event/__init__.py", "w")
        open(f"{event_path}/__init__.py", "w")
        for i, script in enumerate(e_scripts):
            output = produce_event_script(i, script, events_jumped_to)
            file = open(f"{event_path}/script_{i}.py", "w")
            writeline(file, output)
            file.close()

        file = open(f"{output_path}/event/events.py", "w")
        output = "from smrpgpatchbuilder.datatypes.overworld_scripts.event_scripts.classes import EventScriptController, EventScriptBank"
        for i, script in enumerate(e_scripts):
            output += f"\nfrom .scripts.script_{i} import script as script_{i}"
        output += "\n\nevents = EventScriptController([\n"
        output += "\tEventScriptBank(pointer_table_start=0x1E0000, start=0x1E0C00, end=0x1F0000, scripts=[\n"
        for i in range(0, 1536):
            output += f"\t\tscript_{i},\n"
        output += "\t]),\n"

        output += "\tEventScriptBank(pointer_table_start=0x1F0000, start=0x1F0C00, end=0x200000, scripts=[\n"
        for i in range(1536, 3072):
            output += f"\t\tscript_{i},\n"
        output += "\t]),\n"

        output += "\tEventScriptBank(pointer_table_start=0x200000, start=0x200800, end=0x20E000, scripts=[\n"
        for i in range(3072, 4096):
            output += f"\t\tscript_{i},\n"
        output += "\t])\n"

        output += "])"
        writeline(file, output)
        file.close()
